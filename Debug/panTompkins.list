
panTompkins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082d8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08008478  08008478  00009478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008548  08008548  0000a1d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008548  08008548  00009548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008550  08008550  0000a1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008550  08008550  00009550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008554  08008554  00009554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  08008558  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f28  200001d0  08008728  0000a1d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020f8  08008728  0000b0f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e196  00000000  00000000  0000a200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce2  00000000  00000000  00018396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  0001b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000911  00000000  00000000  0001bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aa9  00000000  00000000  0001c5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001047c  00000000  00000000  00035082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008887b  00000000  00000000  000454fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cdd79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003880  00000000  00000000  000cddbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000d163c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008460 	.word	0x08008460

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	08008460 	.word	0x08008460

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <panTompkins_init>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);

//Init function
void panTompkins_init(void){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	memset(lpf_buffer ,0 , sizeof(lpf_buffer));
 80005b0:	2234      	movs	r2, #52	@ 0x34
 80005b2:	2100      	movs	r1, #0
 80005b4:	482a      	ldr	r0, [pc, #168]	@ (8000660 <panTompkins_init+0xb4>)
 80005b6:	f007 f9d1 	bl	800795c <memset>
	memset(hpf_buffer ,0 , sizeof(hpf_buffer));
 80005ba:	2284      	movs	r2, #132	@ 0x84
 80005bc:	2100      	movs	r1, #0
 80005be:	4829      	ldr	r0, [pc, #164]	@ (8000664 <panTompkins_init+0xb8>)
 80005c0:	f007 f9cc 	bl	800795c <memset>
	memset(deriv_buffer ,0 , sizeof(deriv_buffer));
 80005c4:	2214      	movs	r2, #20
 80005c6:	2100      	movs	r1, #0
 80005c8:	4827      	ldr	r0, [pc, #156]	@ (8000668 <panTompkins_init+0xbc>)
 80005ca:	f007 f9c7 	bl	800795c <memset>
	memset(mwi_buffer ,0 , sizeof(mwi_buffer));
 80005ce:	2298      	movs	r2, #152	@ 0x98
 80005d0:	2100      	movs	r1, #0
 80005d2:	4826      	ldr	r0, [pc, #152]	@ (800066c <panTompkins_init+0xc0>)
 80005d4:	f007 f9c2 	bl	800795c <memset>
    memset(rrRecent, 0, sizeof(rrRecent));
 80005d8:	2220      	movs	r2, #32
 80005da:	2100      	movs	r1, #0
 80005dc:	4824      	ldr	r0, [pc, #144]	@ (8000670 <panTompkins_init+0xc4>)
 80005de:	f007 f9bd 	bl	800795c <memset>

	lpfPtr = 0; lpf_y1 = 0 ; lpf_y2 = 0;
 80005e2:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <panTompkins_init+0xc8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	4b23      	ldr	r3, [pc, #140]	@ (8000678 <panTompkins_init+0xcc>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	4b23      	ldr	r3, [pc, #140]	@ (800067c <panTompkins_init+0xd0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
	hpfPtr = 0; hpf_y1 = 0 ;
 80005f4:	4b22      	ldr	r3, [pc, #136]	@ (8000680 <panTompkins_init+0xd4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <panTompkins_init+0xd8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
	derivPtr = 0;
 8000600:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <panTompkins_init+0xdc>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
	mwiPtr = 0; mwiSum =0 ;
 8000606:	4b21      	ldr	r3, [pc, #132]	@ (800068c <panTompkins_init+0xe0>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <panTompkins_init+0xe4>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]

    spki = 0;
 8000612:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <panTompkins_init+0xe8>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
    npki = 0;
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <panTompkins_init+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
    threshold1 = 0;
 800061e:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <panTompkins_init+0xf0>)
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
    threshold2 = 0;
 8000624:	4b1e      	ldr	r3, [pc, #120]	@ (80006a0 <panTompkins_init+0xf4>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
    rrAvg = 0;
 800062a:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <panTompkins_init+0xf8>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
    lastQrs = 0;
 8000630:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <panTompkins_init+0xfc>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
    rrRecentPtr = 0;
 8000636:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <panTompkins_init+0x100>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
    potentialPeakVal = 0;
 800063c:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <panTompkins_init+0x104>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
    potentialPeakTime = 0;
 8000642:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <panTompkins_init+0x108>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
    signalRising = 0;
 8000648:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <panTompkins_init+0x10c>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
    sample_count = 0;
 800064e:	4b1b      	ldr	r3, [pc, #108]	@ (80006bc <panTompkins_init+0x110>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
    refractory_period = 0;
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <panTompkins_init+0x114>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000278 	.word	0x20000278
 8000664:	200001ec 	.word	0x200001ec
 8000668:	200002b8 	.word	0x200002b8
 800066c:	200002d0 	.word	0x200002d0
 8000670:	20000388 	.word	0x20000388
 8000674:	200002ac 	.word	0x200002ac
 8000678:	200002b0 	.word	0x200002b0
 800067c:	200002b4 	.word	0x200002b4
 8000680:	20000270 	.word	0x20000270
 8000684:	20000274 	.word	0x20000274
 8000688:	200002cc 	.word	0x200002cc
 800068c:	20000368 	.word	0x20000368
 8000690:	2000036c 	.word	0x2000036c
 8000694:	20000370 	.word	0x20000370
 8000698:	20000374 	.word	0x20000374
 800069c:	20000378 	.word	0x20000378
 80006a0:	2000037c 	.word	0x2000037c
 80006a4:	20000380 	.word	0x20000380
 80006a8:	20000384 	.word	0x20000384
 80006ac:	200003a8 	.word	0x200003a8
 80006b0:	200003ac 	.word	0x200003ac
 80006b4:	200003b0 	.word	0x200003b0
 80006b8:	200003b4 	.word	0x200003b4
 80006bc:	200003b8 	.word	0x200003b8
 80006c0:	200003bc 	.word	0x200003bc

080006c4 <lowPassFilter>:

//@brief Filter Stage
static int lowPassFilter(int input){
 80006c4:	b480      	push	{r7}
 80006c6:	b087      	sub	sp, #28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	long y0;
	int half;


//	hitung y0
	int x6Ptr = (lpfPtr + lpfBufferSize - 6) % lpfBufferSize;
 80006cc:	4b2f      	ldr	r3, [pc, #188]	@ (800078c <lowPassFilter+0xc8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	1dda      	adds	r2, r3, #7
 80006d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000790 <lowPassFilter+0xcc>)
 80006d4:	fb83 1302 	smull	r1, r3, r3, r2
 80006d8:	1099      	asrs	r1, r3, #2
 80006da:	17d3      	asrs	r3, r2, #31
 80006dc:	1ac9      	subs	r1, r1, r3
 80006de:	460b      	mov	r3, r1
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	440b      	add	r3, r1
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	440b      	add	r3, r1
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	617b      	str	r3, [r7, #20]
	int x12Ptr = (lpfPtr + lpfBufferSize - 12 ) % lpfBufferSize;
 80006ec:	4b27      	ldr	r3, [pc, #156]	@ (800078c <lowPassFilter+0xc8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <lowPassFilter+0xcc>)
 80006f4:	fb83 1302 	smull	r1, r3, r3, r2
 80006f8:	1099      	asrs	r1, r3, #2
 80006fa:	17d3      	asrs	r3, r2, #31
 80006fc:	1ac9      	subs	r1, r1, r3
 80006fe:	460b      	mov	r3, r1
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	440b      	add	r3, r1
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	440b      	add	r3, r1
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	613b      	str	r3, [r7, #16]
	y0 = 2 * lpf_y1 -lpf_y2 + input - 2 *lpf_buffer[x6Ptr] + lpf_buffer[x12Ptr];
 800070c:	4b21      	ldr	r3, [pc, #132]	@ (8000794 <lowPassFilter+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	005a      	lsls	r2, r3, #1
 8000712:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <lowPassFilter+0xd4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	1ad2      	subs	r2, r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	441a      	add	r2, r3
 800071c:	491f      	ldr	r1, [pc, #124]	@ (800079c <lowPassFilter+0xd8>)
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	1ad2      	subs	r2, r2, r3
 8000728:	491c      	ldr	r1, [pc, #112]	@ (800079c <lowPassFilter+0xd8>)
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000730:	4413      	add	r3, r2
 8000732:	60fb      	str	r3, [r7, #12]

//	history y1 dan y2
	lpf_y2 = lpf_y1;
 8000734:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <lowPassFilter+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a17      	ldr	r2, [pc, #92]	@ (8000798 <lowPassFilter+0xd4>)
 800073a:	6013      	str	r3, [r2, #0]
	lpf_y1 = y0;
 800073c:	4a15      	ldr	r2, [pc, #84]	@ (8000794 <lowPassFilter+0xd0>)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	6013      	str	r3, [r2, #0]

	lpf_buffer[lpfPtr] = input;
 8000742:	4b12      	ldr	r3, [pc, #72]	@ (800078c <lowPassFilter+0xc8>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4915      	ldr	r1, [pc, #84]	@ (800079c <lowPassFilter+0xd8>)
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lpfPtr = (lpfPtr + 1)% lpfBufferSize;
 800074e:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <lowPassFilter+0xc8>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	1c59      	adds	r1, r3, #1
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <lowPassFilter+0xcc>)
 8000756:	fb83 2301 	smull	r2, r3, r3, r1
 800075a:	109a      	asrs	r2, r3, #2
 800075c:	17cb      	asrs	r3, r1, #31
 800075e:	1ad2      	subs	r2, r2, r3
 8000760:	4613      	mov	r3, r2
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	4413      	add	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	1aca      	subs	r2, r1, r3
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <lowPassFilter+0xc8>)
 800076e:	601a      	str	r2, [r3, #0]
	half = y0/32;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2b00      	cmp	r3, #0
 8000774:	da00      	bge.n	8000778 <lowPassFilter+0xb4>
 8000776:	331f      	adds	r3, #31
 8000778:	115b      	asrs	r3, r3, #5
 800077a:	60bb      	str	r3, [r7, #8]

	return (int)half;
 800077c:	68bb      	ldr	r3, [r7, #8]
}
 800077e:	4618      	mov	r0, r3
 8000780:	371c      	adds	r7, #28
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	200002ac 	.word	0x200002ac
 8000790:	4ec4ec4f 	.word	0x4ec4ec4f
 8000794:	200002b0 	.word	0x200002b0
 8000798:	200002b4 	.word	0x200002b4
 800079c:	20000278 	.word	0x20000278

080007a0 <highPassFilter>:

static int highPassFilter(int input){
 80007a0:	b480      	push	{r7}
 80007a2:	b087      	sub	sp, #28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	long y0;

	int x16Ptr = (hpfPtr + hpfBufferSize - 16) % hpfBufferSize;
 80007a8:	4b34      	ldr	r3, [pc, #208]	@ (800087c <highPassFilter+0xdc>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f103 0211 	add.w	r2, r3, #17
 80007b0:	4b33      	ldr	r3, [pc, #204]	@ (8000880 <highPassFilter+0xe0>)
 80007b2:	fb83 1302 	smull	r1, r3, r3, r2
 80007b6:	10d9      	asrs	r1, r3, #3
 80007b8:	17d3      	asrs	r3, r2, #31
 80007ba:	1ac9      	subs	r1, r1, r3
 80007bc:	460b      	mov	r3, r1
 80007be:	015b      	lsls	r3, r3, #5
 80007c0:	440b      	add	r3, r1
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	617b      	str	r3, [r7, #20]
	int x17Ptr = (hpfPtr + hpfBufferSize - 17) % hpfBufferSize;
 80007c6:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <highPassFilter+0xdc>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f103 0210 	add.w	r2, r3, #16
 80007ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000880 <highPassFilter+0xe0>)
 80007d0:	fb83 1302 	smull	r1, r3, r3, r2
 80007d4:	10d9      	asrs	r1, r3, #3
 80007d6:	17d3      	asrs	r3, r2, #31
 80007d8:	1ac9      	subs	r1, r1, r3
 80007da:	460b      	mov	r3, r1
 80007dc:	015b      	lsls	r3, r3, #5
 80007de:	440b      	add	r3, r1
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	613b      	str	r3, [r7, #16]
	int x32Ptr =(hpfPtr + hpfBufferSize - 32) % hpfBufferSize;
 80007e4:	4b25      	ldr	r3, [pc, #148]	@ (800087c <highPassFilter+0xdc>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	4b25      	ldr	r3, [pc, #148]	@ (8000880 <highPassFilter+0xe0>)
 80007ec:	fb83 1302 	smull	r1, r3, r3, r2
 80007f0:	10d9      	asrs	r1, r3, #3
 80007f2:	17d3      	asrs	r3, r2, #31
 80007f4:	1ac9      	subs	r1, r1, r3
 80007f6:	460b      	mov	r3, r1
 80007f8:	015b      	lsls	r3, r3, #5
 80007fa:	440b      	add	r3, r1
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	60fb      	str	r3, [r7, #12]

	// Hitung y0
	y0 = hpf_y1 - (input / 32) + hpf_buffer[x16Ptr] - hpf_buffer[x17Ptr] + (hpf_buffer[x32Ptr] / 32);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	da00      	bge.n	8000808 <highPassFilter+0x68>
 8000806:	331f      	adds	r3, #31
 8000808:	115b      	asrs	r3, r3, #5
 800080a:	425b      	negs	r3, r3
 800080c:	461a      	mov	r2, r3
 800080e:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <highPassFilter+0xe4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	441a      	add	r2, r3
 8000814:	491c      	ldr	r1, [pc, #112]	@ (8000888 <highPassFilter+0xe8>)
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800081c:	441a      	add	r2, r3
 800081e:	491a      	ldr	r1, [pc, #104]	@ (8000888 <highPassFilter+0xe8>)
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000826:	1ad2      	subs	r2, r2, r3
 8000828:	4917      	ldr	r1, [pc, #92]	@ (8000888 <highPassFilter+0xe8>)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000830:	2b00      	cmp	r3, #0
 8000832:	da00      	bge.n	8000836 <highPassFilter+0x96>
 8000834:	331f      	adds	r3, #31
 8000836:	115b      	asrs	r3, r3, #5
 8000838:	4413      	add	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
	hpf_y1 = y0;
 800083c:	4a11      	ldr	r2, [pc, #68]	@ (8000884 <highPassFilter+0xe4>)
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	6013      	str	r3, [r2, #0]
	hpf_buffer[hpfPtr] = input;
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <highPassFilter+0xdc>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4910      	ldr	r1, [pc, #64]	@ (8000888 <highPassFilter+0xe8>)
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	hpfPtr = (hpfPtr + 1) % hpfBufferSize;
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <highPassFilter+0xdc>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	1c59      	adds	r1, r3, #1
 8000854:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <highPassFilter+0xe0>)
 8000856:	fb83 2301 	smull	r2, r3, r3, r1
 800085a:	10da      	asrs	r2, r3, #3
 800085c:	17cb      	asrs	r3, r1, #31
 800085e:	1ad2      	subs	r2, r2, r3
 8000860:	4613      	mov	r3, r2
 8000862:	015b      	lsls	r3, r3, #5
 8000864:	4413      	add	r3, r2
 8000866:	1aca      	subs	r2, r1, r3
 8000868:	4b04      	ldr	r3, [pc, #16]	@ (800087c <highPassFilter+0xdc>)
 800086a:	601a      	str	r2, [r3, #0]

	return (int)y0;
 800086c:	68bb      	ldr	r3, [r7, #8]
}
 800086e:	4618      	mov	r0, r3
 8000870:	371c      	adds	r7, #28
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000270 	.word	0x20000270
 8000880:	3e0f83e1 	.word	0x3e0f83e1
 8000884:	20000274 	.word	0x20000274
 8000888:	200001ec 	.word	0x200001ec

0800088c <derivFilter>:

static int derivFilter(int input){
 800088c:	b480      	push	{r7}
 800088e:	b087      	sub	sp, #28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	long y0;

	int x1Ptr = (derivPtr + derivBufferSize -1) % derivBufferSize;
 8000894:	4b2e      	ldr	r3, [pc, #184]	@ (8000950 <derivFilter+0xc4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	1d1a      	adds	r2, r3, #4
 800089a:	4b2e      	ldr	r3, [pc, #184]	@ (8000954 <derivFilter+0xc8>)
 800089c:	fb83 1302 	smull	r1, r3, r3, r2
 80008a0:	1059      	asrs	r1, r3, #1
 80008a2:	17d3      	asrs	r3, r2, #31
 80008a4:	1ac9      	subs	r1, r1, r3
 80008a6:	460b      	mov	r3, r1
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	440b      	add	r3, r1
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	617b      	str	r3, [r7, #20]
	int x3Ptr = (derivPtr + derivBufferSize -3) % derivBufferSize;
 80008b0:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <derivFilter+0xc4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	1c9a      	adds	r2, r3, #2
 80008b6:	4b27      	ldr	r3, [pc, #156]	@ (8000954 <derivFilter+0xc8>)
 80008b8:	fb83 1302 	smull	r1, r3, r3, r2
 80008bc:	1059      	asrs	r1, r3, #1
 80008be:	17d3      	asrs	r3, r2, #31
 80008c0:	1ac9      	subs	r1, r1, r3
 80008c2:	460b      	mov	r3, r1
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	440b      	add	r3, r1
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	613b      	str	r3, [r7, #16]
	int x4Ptr = (derivPtr + derivBufferSize -4) % derivBufferSize;
 80008cc:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <derivFilter+0xc4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	1c5a      	adds	r2, r3, #1
 80008d2:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <derivFilter+0xc8>)
 80008d4:	fb83 1302 	smull	r1, r3, r3, r2
 80008d8:	1059      	asrs	r1, r3, #1
 80008da:	17d3      	asrs	r3, r2, #31
 80008dc:	1ac9      	subs	r1, r1, r3
 80008de:	460b      	mov	r3, r1
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	440b      	add	r3, r1
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	60fb      	str	r3, [r7, #12]

	y0 = 2 * input + deriv_buffer[x1Ptr] - deriv_buffer[x3Ptr] - 2 * deriv_buffer[x4Ptr];
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	005a      	lsls	r2, r3, #1
 80008ec:	491a      	ldr	r1, [pc, #104]	@ (8000958 <derivFilter+0xcc>)
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008f4:	441a      	add	r2, r3
 80008f6:	4918      	ldr	r1, [pc, #96]	@ (8000958 <derivFilter+0xcc>)
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008fe:	1ad2      	subs	r2, r2, r3
 8000900:	4915      	ldr	r1, [pc, #84]	@ (8000958 <derivFilter+0xcc>)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	60bb      	str	r3, [r7, #8]

	deriv_buffer[derivPtr] = input;
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <derivFilter+0xc4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4911      	ldr	r1, [pc, #68]	@ (8000958 <derivFilter+0xcc>)
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	derivPtr = (derivPtr + 1) % derivBufferSize;
 800091a:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <derivFilter+0xc4>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	1c59      	adds	r1, r3, #1
 8000920:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <derivFilter+0xc8>)
 8000922:	fb83 2301 	smull	r2, r3, r3, r1
 8000926:	105a      	asrs	r2, r3, #1
 8000928:	17cb      	asrs	r3, r1, #31
 800092a:	1ad2      	subs	r2, r2, r3
 800092c:	4613      	mov	r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	4413      	add	r3, r2
 8000932:	1aca      	subs	r2, r1, r3
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <derivFilter+0xc4>)
 8000936:	601a      	str	r2, [r3, #0]

	return (int)( y0 / 8 );
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	2b00      	cmp	r3, #0
 800093c:	da00      	bge.n	8000940 <derivFilter+0xb4>
 800093e:	3307      	adds	r3, #7
 8000940:	10db      	asrs	r3, r3, #3
}
 8000942:	4618      	mov	r0, r3
 8000944:	371c      	adds	r7, #28
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	200002cc 	.word	0x200002cc
 8000954:	66666667 	.word	0x66666667
 8000958:	200002b8 	.word	0x200002b8

0800095c <squaring>:

static int squaring(int input){
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	return input * input;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	fb03 f303 	mul.w	r3, r3, r3
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <movingWindowIntegration>:

static int movingWindowIntegration(int input){
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	int oldInput = mwi_buffer[mwiPtr];
 8000980:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <movingWindowIntegration+0x74>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a1a      	ldr	r2, [pc, #104]	@ (80009f0 <movingWindowIntegration+0x78>)
 8000986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098a:	60fb      	str	r3, [r7, #12]
	mwiSum -= oldInput;
 800098c:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <movingWindowIntegration+0x7c>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <movingWindowIntegration+0x7c>)
 8000996:	6013      	str	r3, [r2, #0]
	mwiSum += input;
 8000998:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <movingWindowIntegration+0x7c>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4413      	add	r3, r2
 80009a0:	4a14      	ldr	r2, [pc, #80]	@ (80009f4 <movingWindowIntegration+0x7c>)
 80009a2:	6013      	str	r3, [r2, #0]

	mwi_buffer[mwiPtr] = input;
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <movingWindowIntegration+0x74>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4911      	ldr	r1, [pc, #68]	@ (80009f0 <movingWindowIntegration+0x78>)
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	mwiPtr = (mwiPtr + 1) % mwiWindowSize;
 80009b0:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <movingWindowIntegration+0x74>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <movingWindowIntegration+0x80>)
 80009b8:	fb83 1302 	smull	r1, r3, r3, r2
 80009bc:	1119      	asrs	r1, r3, #4
 80009be:	17d3      	asrs	r3, r2, #31
 80009c0:	1acb      	subs	r3, r1, r3
 80009c2:	2126      	movs	r1, #38	@ 0x26
 80009c4:	fb01 f303 	mul.w	r3, r1, r3
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	4a08      	ldr	r2, [pc, #32]	@ (80009ec <movingWindowIntegration+0x74>)
 80009cc:	6013      	str	r3, [r2, #0]

	return mwiSum / mwiWindowSize;
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <movingWindowIntegration+0x7c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a09      	ldr	r2, [pc, #36]	@ (80009f8 <movingWindowIntegration+0x80>)
 80009d4:	fb82 1203 	smull	r1, r2, r2, r3
 80009d8:	1112      	asrs	r2, r2, #4
 80009da:	17db      	asrs	r3, r3, #31
 80009dc:	1ad3      	subs	r3, r2, r3

}
 80009de:	4618      	mov	r0, r3
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000368 	.word	0x20000368
 80009f0:	200002d0 	.word	0x200002d0
 80009f4:	2000036c 	.word	0x2000036c
 80009f8:	6bca1af3 	.word	0x6bca1af3

080009fc <peakDetection>:
/**
 * @brief Fungsi utama untuk deteksi puncak dengan double threshold adaptif.
 * @param mwi_sample Sampel baru dari output Moving Window Integration.
 * @return 1 jika QRS terdeteksi, 0 jika tidak.
 */
static int peakDetection(int input){
 80009fc:	b480      	push	{r7}
 80009fe:	b08d      	sub	sp, #52	@ 0x34
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

    sample_count++;
 8000a04:	4b66      	ldr	r3, [pc, #408]	@ (8000ba0 <peakDetection+0x1a4>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4a65      	ldr	r2, [pc, #404]	@ (8000ba0 <peakDetection+0x1a4>)
 8000a0c:	6013      	str	r3, [r2, #0]
    int qrs_detected = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // --- MANAJEMEN WAKTU & REFRAKTER ---
    if (refractory_period > 0) {
 8000a12:	4b64      	ldr	r3, [pc, #400]	@ (8000ba4 <peakDetection+0x1a8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	dd1d      	ble.n	8000a56 <peakDetection+0x5a>
        refractory_period--;
 8000a1a:	4b62      	ldr	r3, [pc, #392]	@ (8000ba4 <peakDetection+0x1a8>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	4a60      	ldr	r2, [pc, #384]	@ (8000ba4 <peakDetection+0x1a8>)
 8000a22:	6013      	str	r3, [r2, #0]
        // Update NPK (Noise Peak) jika ada puncak tinggi saat refrakter
        if (input > npki) {
 8000a24:	4b60      	ldr	r3, [pc, #384]	@ (8000ba8 <peakDetection+0x1ac>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	f340 812d 	ble.w	8000c8a <peakDetection+0x28e>
            npki = (input / 8) + (npki * 7 / 8);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	da00      	bge.n	8000a38 <peakDetection+0x3c>
 8000a36:	3307      	adds	r3, #7
 8000a38:	10db      	asrs	r3, r3, #3
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ba8 <peakDetection+0x1ac>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4613      	mov	r3, r2
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	1a9b      	subs	r3, r3, r2
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	da00      	bge.n	8000a4c <peakDetection+0x50>
 8000a4a:	3307      	adds	r3, #7
 8000a4c:	10db      	asrs	r3, r3, #3
 8000a4e:	440b      	add	r3, r1
 8000a50:	4a55      	ldr	r2, [pc, #340]	@ (8000ba8 <peakDetection+0x1ac>)
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	e119      	b.n	8000c8a <peakDetection+0x28e>
        }
    } else {
        // --- 1. DETEKSI PUNCAK LOKAL ---
        if (input > potentialPeakVal) {
 8000a56:	4b55      	ldr	r3, [pc, #340]	@ (8000bac <peakDetection+0x1b0>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	dd0a      	ble.n	8000a76 <peakDetection+0x7a>
            // Sinyal masih naik, update potensi puncak
            potentialPeakVal = input;
 8000a60:	4a52      	ldr	r2, [pc, #328]	@ (8000bac <peakDetection+0x1b0>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
            potentialPeakTime = sample_count;
 8000a66:	4b4e      	ldr	r3, [pc, #312]	@ (8000ba0 <peakDetection+0x1a4>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a51      	ldr	r2, [pc, #324]	@ (8000bb0 <peakDetection+0x1b4>)
 8000a6c:	6013      	str	r3, [r2, #0]
            signalRising = 1;
 8000a6e:	4b51      	ldr	r3, [pc, #324]	@ (8000bb4 <peakDetection+0x1b8>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	e109      	b.n	8000c8a <peakDetection+0x28e>
        } else if (signalRising) {
 8000a76:	4b4f      	ldr	r3, [pc, #316]	@ (8000bb4 <peakDetection+0x1b8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f000 8105 	beq.w	8000c8a <peakDetection+0x28e>
            // Puncak lokal ditemukan (sinyal mulai turun)
            int currentPeakVal = potentialPeakVal;
 8000a80:	4b4a      	ldr	r3, [pc, #296]	@ (8000bac <peakDetection+0x1b0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	61fb      	str	r3, [r7, #28]
            int currentPeakTime = potentialPeakTime;
 8000a86:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb0 <peakDetection+0x1b4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	61bb      	str	r3, [r7, #24]
            signalRising = 0;
 8000a8c:	4b49      	ldr	r3, [pc, #292]	@ (8000bb4 <peakDetection+0x1b8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
            potentialPeakVal = input;
 8000a92:	4a46      	ldr	r2, [pc, #280]	@ (8000bac <peakDetection+0x1b0>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6013      	str	r3, [r2, #0]

            // --- 2. ADAPTIVE THRESHOLDING & KLASIFIKASI ---
            if (currentPeakVal >= threshold1) {
 8000a98:	4b47      	ldr	r3, [pc, #284]	@ (8000bb8 <peakDetection+0x1bc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	69fa      	ldr	r2, [r7, #28]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	f2c0 8096 	blt.w	8000bd0 <peakDetection+0x1d4>
                // Kandidat QRS (di atas Ambang Batas Sinyal)

                int rrInterval = currentPeakTime - lastQrs;
 8000aa4:	4b45      	ldr	r3, [pc, #276]	@ (8000bbc <peakDetection+0x1c0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	617b      	str	r3, [r7, #20]

                // Pengecekan Diskriminasi T-Wave/RR Interval terlalu pendek
                if (rrInterval < 200 && rrInterval > REFRACTORY_PERIOD_SAMPLES && lastQrs != 0) {
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	2bc7      	cmp	r3, #199	@ 0xc7
 8000ab2:	dc19      	bgt.n	8000ae8 <peakDetection+0xec>
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	2b4b      	cmp	r3, #75	@ 0x4b
 8000ab8:	dd16      	ble.n	8000ae8 <peakDetection+0xec>
 8000aba:	4b40      	ldr	r3, [pc, #256]	@ (8000bbc <peakDetection+0x1c0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d012      	beq.n	8000ae8 <peakDetection+0xec>
                    // Terlalu cepat, diklasifikasikan sebagai Noise/T-Wave
                    npki = (currentPeakVal / 8) + (npki * 7 / 8); // Update NPK
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	da00      	bge.n	8000aca <peakDetection+0xce>
 8000ac8:	3307      	adds	r3, #7
 8000aca:	10db      	asrs	r3, r3, #3
 8000acc:	4619      	mov	r1, r3
 8000ace:	4b36      	ldr	r3, [pc, #216]	@ (8000ba8 <peakDetection+0x1ac>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	1a9b      	subs	r3, r3, r2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	da00      	bge.n	8000ade <peakDetection+0xe2>
 8000adc:	3307      	adds	r3, #7
 8000ade:	10db      	asrs	r3, r3, #3
 8000ae0:	440b      	add	r3, r1
 8000ae2:	4a31      	ldr	r2, [pc, #196]	@ (8000ba8 <peakDetection+0x1ac>)
 8000ae4:	6013      	str	r3, [r2, #0]
 8000ae6:	e08a      	b.n	8000bfe <peakDetection+0x202>
                } else {
                    // QRS Terdeteksi!
                    qrs_detected = 1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    // Update SPK (Signal Peak)
                    spki = (currentPeakVal / 8) + (spki * 7 / 8);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	da00      	bge.n	8000af4 <peakDetection+0xf8>
 8000af2:	3307      	adds	r3, #7
 8000af4:	10db      	asrs	r3, r3, #3
 8000af6:	4619      	mov	r1, r3
 8000af8:	4b31      	ldr	r3, [pc, #196]	@ (8000bc0 <peakDetection+0x1c4>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4613      	mov	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	1a9b      	subs	r3, r3, r2
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	da00      	bge.n	8000b08 <peakDetection+0x10c>
 8000b06:	3307      	adds	r3, #7
 8000b08:	10db      	asrs	r3, r3, #3
 8000b0a:	440b      	add	r3, r1
 8000b0c:	4a2c      	ldr	r2, [pc, #176]	@ (8000bc0 <peakDetection+0x1c4>)
 8000b0e:	6013      	str	r3, [r2, #0]

                    // Update Rata-rata RR-Interval
                    // Logika update rrAvg...
                    int newRR = currentPeakTime - lastQrs;
 8000b10:	4b2a      	ldr	r3, [pc, #168]	@ (8000bbc <peakDetection+0x1c0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	613b      	str	r3, [r7, #16]
                    if (lastQrs != 0) {
 8000b1a:	4b28      	ldr	r3, [pc, #160]	@ (8000bbc <peakDetection+0x1c0>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d037      	beq.n	8000b92 <peakDetection+0x196>
                        rrRecent[rrRecentPtr] = newRR;
 8000b22:	4b28      	ldr	r3, [pc, #160]	@ (8000bc4 <peakDetection+0x1c8>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4928      	ldr	r1, [pc, #160]	@ (8000bc8 <peakDetection+0x1cc>)
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        rrRecentPtr = (rrRecentPtr + 1) % 8;
 8000b2e:	4b25      	ldr	r3, [pc, #148]	@ (8000bc4 <peakDetection+0x1c8>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	425a      	negs	r2, r3
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	f002 0207 	and.w	r2, r2, #7
 8000b3e:	bf58      	it	pl
 8000b40:	4253      	negpl	r3, r2
 8000b42:	4a20      	ldr	r2, [pc, #128]	@ (8000bc4 <peakDetection+0x1c8>)
 8000b44:	6013      	str	r3, [r2, #0]
                        long sumRR = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	@ 0x28
                        int countRR = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
                        for(int i = 0; i < 8; i++) {
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
 8000b52:	e012      	b.n	8000b7a <peakDetection+0x17e>
                            if (rrRecent[i] > 0) {
 8000b54:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc8 <peakDetection+0x1cc>)
 8000b56:	6a3b      	ldr	r3, [r7, #32]
 8000b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	dd09      	ble.n	8000b74 <peakDetection+0x178>
                                sumRR += rrRecent[i];
 8000b60:	4a19      	ldr	r2, [pc, #100]	@ (8000bc8 <peakDetection+0x1cc>)
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b6a:	4413      	add	r3, r2
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
                                countRR++;
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b70:	3301      	adds	r3, #1
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
                        for(int i = 0; i < 8; i++) {
 8000b74:	6a3b      	ldr	r3, [r7, #32]
 8000b76:	3301      	adds	r3, #1
 8000b78:	623b      	str	r3, [r7, #32]
 8000b7a:	6a3b      	ldr	r3, [r7, #32]
 8000b7c:	2b07      	cmp	r3, #7
 8000b7e:	dde9      	ble.n	8000b54 <peakDetection+0x158>
                            }
                        }
                        if (countRR > 0) {
 8000b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	dd05      	ble.n	8000b92 <peakDetection+0x196>
                            rrAvg = sumRR / countRR;
 8000b86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bcc <peakDetection+0x1d0>)
 8000b90:	6013      	str	r3, [r2, #0]
                        }
                    }
                    lastQrs = currentPeakTime;
 8000b92:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <peakDetection+0x1c0>)
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	6013      	str	r3, [r2, #0]

                    // Aktifkan periode refrakter
                    refractory_period = REFRACTORY_PERIOD_SAMPLES;
 8000b98:	4b02      	ldr	r3, [pc, #8]	@ (8000ba4 <peakDetection+0x1a8>)
 8000b9a:	224b      	movs	r2, #75	@ 0x4b
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	e02e      	b.n	8000bfe <peakDetection+0x202>
 8000ba0:	200003b8 	.word	0x200003b8
 8000ba4:	200003bc 	.word	0x200003bc
 8000ba8:	20000374 	.word	0x20000374
 8000bac:	200003ac 	.word	0x200003ac
 8000bb0:	200003b0 	.word	0x200003b0
 8000bb4:	200003b4 	.word	0x200003b4
 8000bb8:	20000378 	.word	0x20000378
 8000bbc:	20000384 	.word	0x20000384
 8000bc0:	20000370 	.word	0x20000370
 8000bc4:	200003a8 	.word	0x200003a8
 8000bc8:	20000388 	.word	0x20000388
 8000bcc:	20000380 	.word	0x20000380
                }

            } else if (currentPeakVal > threshold2) {
 8000bd0:	4b46      	ldr	r3, [pc, #280]	@ (8000cec <peakDetection+0x2f0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	69fa      	ldr	r2, [r7, #28]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	dd11      	ble.n	8000bfe <peakDetection+0x202>
                // Puncak di antara THR1 dan THR2, diklasifikasikan sebagai Noise
                npki = (currentPeakVal / 8) + (npki * 7 / 8); // Update NPK
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	da00      	bge.n	8000be2 <peakDetection+0x1e6>
 8000be0:	3307      	adds	r3, #7
 8000be2:	10db      	asrs	r3, r3, #3
 8000be4:	4619      	mov	r1, r3
 8000be6:	4b42      	ldr	r3, [pc, #264]	@ (8000cf0 <peakDetection+0x2f4>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	4613      	mov	r3, r2
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	1a9b      	subs	r3, r3, r2
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	da00      	bge.n	8000bf6 <peakDetection+0x1fa>
 8000bf4:	3307      	adds	r3, #7
 8000bf6:	10db      	asrs	r3, r3, #3
 8000bf8:	440b      	add	r3, r1
 8000bfa:	4a3d      	ldr	r2, [pc, #244]	@ (8000cf0 <peakDetection+0x2f4>)
 8000bfc:	6013      	str	r3, [r2, #0]
            }

            // --- 3. REKALKULASI AMBANG BATAS ---
            threshold1 = npki + ((spki - npki) / 4); // THR1 = NPK + 0.25 * (SPK - NPK)
 8000bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf4 <peakDetection+0x2f8>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf0 <peakDetection+0x2f4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	da00      	bge.n	8000c0e <peakDetection+0x212>
 8000c0c:	3303      	adds	r3, #3
 8000c0e:	109b      	asrs	r3, r3, #2
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b37      	ldr	r3, [pc, #220]	@ (8000cf0 <peakDetection+0x2f4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a37      	ldr	r2, [pc, #220]	@ (8000cf8 <peakDetection+0x2fc>)
 8000c1a:	6013      	str	r3, [r2, #0]
            threshold2 = threshold1 / 2;             // THR2 = 0.5 * THR1
 8000c1c:	4b36      	ldr	r3, [pc, #216]	@ (8000cf8 <peakDetection+0x2fc>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	0fda      	lsrs	r2, r3, #31
 8000c22:	4413      	add	r3, r2
 8000c24:	105b      	asrs	r3, r3, #1
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b30      	ldr	r3, [pc, #192]	@ (8000cec <peakDetection+0x2f0>)
 8000c2a:	601a      	str	r2, [r3, #0]

            // --- 4. SEARCHBACK (PENCARIAN QRS TERLEWAT) ---
            int rr_limit = (rrAvg * 5) / 3;
 8000c2c:	4b33      	ldr	r3, [pc, #204]	@ (8000cfc <peakDetection+0x300>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4613      	mov	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4413      	add	r3, r2
 8000c36:	4a32      	ldr	r2, [pc, #200]	@ (8000d00 <peakDetection+0x304>)
 8000c38:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3c:	17db      	asrs	r3, r3, #31
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	60fb      	str	r3, [r7, #12]
            if (lastQrs != 0 && (sample_count - lastQrs) > rr_limit) {
 8000c42:	4b30      	ldr	r3, [pc, #192]	@ (8000d04 <peakDetection+0x308>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d01f      	beq.n	8000c8a <peakDetection+0x28e>
 8000c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d08 <peakDetection+0x30c>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d04 <peakDetection+0x308>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	da17      	bge.n	8000c8a <peakDetection+0x28e>
                // Jika terlalu lama tanpa deteksi, turunkan ambang batas (penyederhanaan searchback)
                if (threshold1 > 0) threshold1 = threshold1 / 2;
 8000c5a:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <peakDetection+0x2fc>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	dd07      	ble.n	8000c72 <peakDetection+0x276>
 8000c62:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <peakDetection+0x2fc>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	0fda      	lsrs	r2, r3, #31
 8000c68:	4413      	add	r3, r2
 8000c6a:	105b      	asrs	r3, r3, #1
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <peakDetection+0x2fc>)
 8000c70:	601a      	str	r2, [r3, #0]
                if (threshold2 > 0) threshold2 = threshold2 / 2;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <peakDetection+0x2f0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	dd07      	ble.n	8000c8a <peakDetection+0x28e>
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cec <peakDetection+0x2f0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	0fda      	lsrs	r2, r3, #31
 8000c80:	4413      	add	r3, r2
 8000c82:	105b      	asrs	r3, r3, #1
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <peakDetection+0x2f0>)
 8000c88:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // --- INISIALISASI AWAL ---
    if (sample_count < 100 && input > spki) {
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d08 <peakDetection+0x30c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b63      	cmp	r3, #99	@ 0x63
 8000c90:	dc25      	bgt.n	8000cde <peakDetection+0x2e2>
 8000c92:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <peakDetection+0x2f8>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dd20      	ble.n	8000cde <peakDetection+0x2e2>
        // Set nilai awal SPK, NPK, dan Ambang batas
        spki = input;
 8000c9c:	4a15      	ldr	r2, [pc, #84]	@ (8000cf4 <peakDetection+0x2f8>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
        npki = input / 2;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	0fda      	lsrs	r2, r3, #31
 8000ca6:	4413      	add	r3, r2
 8000ca8:	105b      	asrs	r3, r3, #1
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <peakDetection+0x2f4>)
 8000cae:	601a      	str	r2, [r3, #0]
        threshold1 = npki + ((spki - npki) / 4);
 8000cb0:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <peakDetection+0x2f8>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <peakDetection+0x2f4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	da00      	bge.n	8000cc0 <peakDetection+0x2c4>
 8000cbe:	3303      	adds	r3, #3
 8000cc0:	109b      	asrs	r3, r3, #2
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <peakDetection+0x2f4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4413      	add	r3, r2
 8000cca:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf8 <peakDetection+0x2fc>)
 8000ccc:	6013      	str	r3, [r2, #0]
        threshold2 = threshold1 / 2;
 8000cce:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <peakDetection+0x2fc>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	0fda      	lsrs	r2, r3, #31
 8000cd4:	4413      	add	r3, r2
 8000cd6:	105b      	asrs	r3, r3, #1
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b04      	ldr	r3, [pc, #16]	@ (8000cec <peakDetection+0x2f0>)
 8000cdc:	601a      	str	r2, [r3, #0]
    }

    return qrs_detected;
 8000cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3734      	adds	r7, #52	@ 0x34
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	2000037c 	.word	0x2000037c
 8000cf0:	20000374 	.word	0x20000374
 8000cf4:	20000370 	.word	0x20000370
 8000cf8:	20000378 	.word	0x20000378
 8000cfc:	20000380 	.word	0x20000380
 8000d00:	55555556 	.word	0x55555556
 8000d04:	20000384 	.word	0x20000384
 8000d08:	200003b8 	.word	0x200003b8

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d12:	f000 fa45 	bl	80011a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d16:	f000 f84d 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1a:	f000 f8b7 	bl	8000e8c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000d1e:	f005 ff1f 	bl	8006b60 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  panTompkins_init();
 8000d22:	f7ff fc43 	bl	80005ac <panTompkins_init>

  printf("Initializing Pan-Tompkins...\n");
 8000d26:	481e      	ldr	r0, [pc, #120]	@ (8000da0 <main+0x94>)
 8000d28:	f006 fd38 	bl	800779c <puts>

  for (int i = 0; i < ecg_len; i++) {
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
 8000d30:	e02e      	b.n	8000d90 <main+0x84>
      int sample = ecg_data[i];
 8000d32:	4a1c      	ldr	r2, [pc, #112]	@ (8000da4 <main+0x98>)
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3a:	61bb      	str	r3, [r7, #24]

      // Tahapan filter
      int y_lpf  = lowPassFilter(sample);
 8000d3c:	69b8      	ldr	r0, [r7, #24]
 8000d3e:	f7ff fcc1 	bl	80006c4 <lowPassFilter>
 8000d42:	6178      	str	r0, [r7, #20]
      int y_hpf  = highPassFilter(y_lpf);
 8000d44:	6978      	ldr	r0, [r7, #20]
 8000d46:	f7ff fd2b 	bl	80007a0 <highPassFilter>
 8000d4a:	6138      	str	r0, [r7, #16]
      int y_der  = derivFilter(y_hpf);
 8000d4c:	6938      	ldr	r0, [r7, #16]
 8000d4e:	f7ff fd9d 	bl	800088c <derivFilter>
 8000d52:	60f8      	str	r0, [r7, #12]
      int y_sqr  = squaring(y_der);
 8000d54:	68f8      	ldr	r0, [r7, #12]
 8000d56:	f7ff fe01 	bl	800095c <squaring>
 8000d5a:	60b8      	str	r0, [r7, #8]
      int y_mwi  = movingWindowIntegration(y_sqr);
 8000d5c:	68b8      	ldr	r0, [r7, #8]
 8000d5e:	f7ff fe0b 	bl	8000978 <movingWindowIntegration>
 8000d62:	6078      	str	r0, [r7, #4]

      // Deteksi QRS
      int detected = peakDetection(y_mwi);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff fe49 	bl	80009fc <peakDetection>
 8000d6a:	6038      	str	r0, [r7, #0]

      if (detected) {
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d008      	beq.n	8000d84 <main+0x78>
          printf("QRS detected at sample %d (val=%d)\n", i, sample);
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	69f9      	ldr	r1, [r7, #28]
 8000d76:	480c      	ldr	r0, [pc, #48]	@ (8000da8 <main+0x9c>)
 8000d78:	f006 fca8 	bl	80076cc <iprintf>
          // Misalnya toggle LED
          HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	480b      	ldr	r0, [pc, #44]	@ (8000dac <main+0xa0>)
 8000d80:	f000 fd53 	bl	800182a <HAL_GPIO_TogglePin>
      }

      HAL_Delay(2); // delay sesuai sampling rate (contoh 500Hz → 2ms)
 8000d84:	2002      	movs	r0, #2
 8000d86:	f000 fa7d 	bl	8001284 <HAL_Delay>
  for (int i = 0; i < ecg_len; i++) {
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	61fb      	str	r3, [r7, #28]
 8000d90:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <main+0xa4>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	69fa      	ldr	r2, [r7, #28]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	dbcb      	blt.n	8000d32 <main+0x26>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d9a:	bf00      	nop
 8000d9c:	e7fd      	b.n	8000d9a <main+0x8e>
 8000d9e:	bf00      	nop
 8000da0:	08008478 	.word	0x08008478
 8000da4:	20000000 	.word	0x20000000
 8000da8:	08008498 	.word	0x08008498
 8000dac:	40020400 	.word	0x40020400
 8000db0:	20000074 	.word	0x20000074

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b094      	sub	sp, #80	@ 0x50
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0320 	add.w	r3, r7, #32
 8000dbe:	2230      	movs	r2, #48	@ 0x30
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f006 fdca 	bl	800795c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	4b29      	ldr	r3, [pc, #164]	@ (8000e84 <SystemClock_Config+0xd0>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de0:	4a28      	ldr	r2, [pc, #160]	@ (8000e84 <SystemClock_Config+0xd0>)
 8000de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de8:	4b26      	ldr	r3, [pc, #152]	@ (8000e84 <SystemClock_Config+0xd0>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000df4:	2300      	movs	r3, #0
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	4b23      	ldr	r3, [pc, #140]	@ (8000e88 <SystemClock_Config+0xd4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e00:	4a21      	ldr	r2, [pc, #132]	@ (8000e88 <SystemClock_Config+0xd4>)
 8000e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <SystemClock_Config+0xd4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e14:	2301      	movs	r3, #1
 8000e16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e28:	2319      	movs	r3, #25
 8000e2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e2c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e32:	2304      	movs	r3, #4
 8000e34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e36:	2307      	movs	r3, #7
 8000e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 ff60 	bl	8002d04 <HAL_RCC_OscConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e4a:	f000 f861 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4e:	230f      	movs	r3, #15
 8000e50:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e52:	2302      	movs	r3, #2
 8000e54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	2102      	movs	r1, #2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 f9c2 	bl	80031f4 <HAL_RCC_ClockConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e76:	f000 f84b 	bl	8000f10 <Error_Handler>
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	3750      	adds	r7, #80	@ 0x50
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40007000 	.word	0x40007000

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <MX_GPIO_Init+0x7c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a17      	ldr	r2, [pc, #92]	@ (8000f08 <MX_GPIO_Init+0x7c>)
 8000eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <MX_GPIO_Init+0x7c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <MX_GPIO_Init+0x7c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a10      	ldr	r2, [pc, #64]	@ (8000f08 <MX_GPIO_Init+0x7c>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <MX_GPIO_Init+0x7c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2101      	movs	r1, #1
 8000ede:	480b      	ldr	r0, [pc, #44]	@ (8000f0c <MX_GPIO_Init+0x80>)
 8000ee0:	f000 fc8a 	bl	80017f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4804      	ldr	r0, [pc, #16]	@ (8000f0c <MX_GPIO_Init+0x80>)
 8000efc:	f000 faf8 	bl	80014f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <Error_Handler+0x8>

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f32:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	4a08      	ldr	r2, [pc, #32]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <NMI_Handler+0x4>

08000f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <MemManage_Handler+0x4>

08000f84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc2:	f000 f93f 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <OTG_FS_IRQHandler+0x10>)
 8000fd2:	f000 fd88 	bl	8001ae6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200018a8 	.word	0x200018a8

08000fe0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	e00a      	b.n	8001008 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ff2:	f3af 8000 	nop.w
 8000ff6:	4601      	mov	r1, r0
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	60ba      	str	r2, [r7, #8]
 8000ffe:	b2ca      	uxtb	r2, r1
 8001000:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3301      	adds	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	429a      	cmp	r2, r3
 800100e:	dbf0      	blt.n	8000ff2 <_read+0x12>
  }

  return len;
 8001010:	687b      	ldr	r3, [r7, #4]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	e009      	b.n	8001040 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	60ba      	str	r2, [r7, #8]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbf1      	blt.n	800102c <_write+0x12>
  }
  return len;
 8001048:	687b      	ldr	r3, [r7, #4]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_close>:

int _close(int file)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800107a:	605a      	str	r2, [r3, #4]
  return 0;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_isatty>:

int _isatty(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	@ (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	@ (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ec:	f006 fc84 	bl	80079f8 <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20018000 	.word	0x20018000
 800111c:	00000400 	.word	0x00000400
 8001120:	200003c0 	.word	0x200003c0
 8001124:	200020f8 	.word	0x200020f8

08001128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <SystemInit+0x20>)
 800112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001132:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <SystemInit+0x20>)
 8001134:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001138:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800114c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001184 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001150:	f7ff ffea 	bl	8001128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001154:	480c      	ldr	r0, [pc, #48]	@ (8001188 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001156:	490d      	ldr	r1, [pc, #52]	@ (800118c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001158:	4a0d      	ldr	r2, [pc, #52]	@ (8001190 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800116c:	4c0a      	ldr	r4, [pc, #40]	@ (8001198 <LoopFillZerobss+0x22>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800117a:	f006 fc43 	bl	8007a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117e:	f7ff fdc5 	bl	8000d0c <main>
  bx  lr    
 8001182:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001184:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001190:	08008558 	.word	0x08008558
  ldr r2, =_sbss
 8001194:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001198:	200020f8 	.word	0x200020f8

0800119c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC_IRQHandler>
	...

080011a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a4:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0d      	ldr	r2, [pc, #52]	@ (80011e0 <HAL_Init+0x40>)
 80011aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b0:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <HAL_Init+0x40>)
 80011b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a07      	ldr	r2, [pc, #28]	@ (80011e0 <HAL_Init+0x40>)
 80011c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c8:	2003      	movs	r0, #3
 80011ca:	f000 f94f 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ce:	200f      	movs	r0, #15
 80011d0:	f000 f808 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d4:	f7ff fea2 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023c00 	.word	0x40023c00

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_InitTick+0x54>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_InitTick+0x58>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f967 	bl	80014d6 <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00e      	b.n	8001230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d80a      	bhi.n	800122e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f000 f92f 	bl	8001482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001224:	4a06      	ldr	r2, [pc, #24]	@ (8001240 <HAL_InitTick+0x5c>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000078 	.word	0x20000078
 800123c:	20000080 	.word	0x20000080
 8001240:	2000007c 	.word	0x2000007c

08001244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_IncTick+0x20>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_IncTick+0x24>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	@ (8001268 <HAL_IncTick+0x24>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000080 	.word	0x20000080
 8001268:	200003c4 	.word	0x200003c4

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	200003c4 	.word	0x200003c4

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff ffee 	bl	800126c <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <HAL_Delay+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffde 	bl	800126c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000080 	.word	0x20000080

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	@ (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4907      	ldr	r1, [pc, #28]	@ (8001368 <__NVIC_EnableIRQ+0x38>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	@ (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	@ (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	@ 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	@ 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f7ff ff8e 	bl	800136c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff29 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff3e 	bl	8001314 <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff8e 	bl	80013c0 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5d 	bl	800136c <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff31 	bl	8001330 <__NVIC_EnableIRQ>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffa2 	bl	8001428 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	@ 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	e159      	b.n	80017c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800150c:	2201      	movs	r2, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	429a      	cmp	r2, r3
 8001526:	f040 8148 	bne.w	80017ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b01      	cmp	r3, #1
 8001534:	d005      	beq.n	8001542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153e:	2b02      	cmp	r3, #2
 8001540:	d130      	bne.n	80015a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	2203      	movs	r2, #3
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001578:	2201      	movs	r2, #1
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f003 0201 	and.w	r2, r3, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d017      	beq.n	80015e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d123      	bne.n	8001634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	08da      	lsrs	r2, r3, #3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3208      	adds	r2, #8
 80015f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	220f      	movs	r2, #15
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	08da      	lsrs	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3208      	adds	r2, #8
 800162e:	69b9      	ldr	r1, [r7, #24]
 8001630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0203 	and.w	r2, r3, #3
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80a2 	beq.w	80017ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b57      	ldr	r3, [pc, #348]	@ (80017d8 <HAL_GPIO_Init+0x2e8>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	4a56      	ldr	r2, [pc, #344]	@ (80017d8 <HAL_GPIO_Init+0x2e8>)
 8001680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001684:	6453      	str	r3, [r2, #68]	@ 0x44
 8001686:	4b54      	ldr	r3, [pc, #336]	@ (80017d8 <HAL_GPIO_Init+0x2e8>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001692:	4a52      	ldr	r2, [pc, #328]	@ (80017dc <HAL_GPIO_Init+0x2ec>)
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	3302      	adds	r3, #2
 800169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	220f      	movs	r2, #15
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a49      	ldr	r2, [pc, #292]	@ (80017e0 <HAL_GPIO_Init+0x2f0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d019      	beq.n	80016f2 <HAL_GPIO_Init+0x202>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a48      	ldr	r2, [pc, #288]	@ (80017e4 <HAL_GPIO_Init+0x2f4>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d013      	beq.n	80016ee <HAL_GPIO_Init+0x1fe>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a47      	ldr	r2, [pc, #284]	@ (80017e8 <HAL_GPIO_Init+0x2f8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d00d      	beq.n	80016ea <HAL_GPIO_Init+0x1fa>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a46      	ldr	r2, [pc, #280]	@ (80017ec <HAL_GPIO_Init+0x2fc>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d007      	beq.n	80016e6 <HAL_GPIO_Init+0x1f6>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a45      	ldr	r2, [pc, #276]	@ (80017f0 <HAL_GPIO_Init+0x300>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_GPIO_Init+0x1f2>
 80016de:	2304      	movs	r3, #4
 80016e0:	e008      	b.n	80016f4 <HAL_GPIO_Init+0x204>
 80016e2:	2307      	movs	r3, #7
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x204>
 80016e6:	2303      	movs	r3, #3
 80016e8:	e004      	b.n	80016f4 <HAL_GPIO_Init+0x204>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e002      	b.n	80016f4 <HAL_GPIO_Init+0x204>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_GPIO_Init+0x204>
 80016f2:	2300      	movs	r3, #0
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	f002 0203 	and.w	r2, r2, #3
 80016fa:	0092      	lsls	r2, r2, #2
 80016fc:	4093      	lsls	r3, r2
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001704:	4935      	ldr	r1, [pc, #212]	@ (80017dc <HAL_GPIO_Init+0x2ec>)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001712:	4b38      	ldr	r3, [pc, #224]	@ (80017f4 <HAL_GPIO_Init+0x304>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001736:	4a2f      	ldr	r2, [pc, #188]	@ (80017f4 <HAL_GPIO_Init+0x304>)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800173c:	4b2d      	ldr	r3, [pc, #180]	@ (80017f4 <HAL_GPIO_Init+0x304>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001760:	4a24      	ldr	r2, [pc, #144]	@ (80017f4 <HAL_GPIO_Init+0x304>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001766:	4b23      	ldr	r3, [pc, #140]	@ (80017f4 <HAL_GPIO_Init+0x304>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800178a:	4a1a      	ldr	r2, [pc, #104]	@ (80017f4 <HAL_GPIO_Init+0x304>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001790:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <HAL_GPIO_Init+0x304>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017b4:	4a0f      	ldr	r2, [pc, #60]	@ (80017f4 <HAL_GPIO_Init+0x304>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3301      	adds	r3, #1
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	2b0f      	cmp	r3, #15
 80017c4:	f67f aea2 	bls.w	800150c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	3724      	adds	r7, #36	@ 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40013800 	.word	0x40013800
 80017e0:	40020000 	.word	0x40020000
 80017e4:	40020400 	.word	0x40020400
 80017e8:	40020800 	.word	0x40020800
 80017ec:	40020c00 	.word	0x40020c00
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40013c00 	.word	0x40013c00

080017f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	807b      	strh	r3, [r7, #2]
 8001804:	4613      	mov	r3, r2
 8001806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001808:	787b      	ldrb	r3, [r7, #1]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001814:	e003      	b.n	800181e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	041a      	lsls	r2, r3, #16
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	619a      	str	r2, [r3, #24]
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800182a:	b480      	push	{r7}
 800182c:	b085      	sub	sp, #20
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800183c:	887a      	ldrh	r2, [r7, #2]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4013      	ands	r3, r2
 8001842:	041a      	lsls	r2, r3, #16
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43d9      	mvns	r1, r3
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	400b      	ands	r3, r1
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	619a      	str	r2, [r3, #24]
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af02      	add	r7, sp, #8
 8001864:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e101      	b.n	8001a74 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f005 fb48 	bl	8006f20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2203      	movs	r2, #3
 8001894:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800189e:	d102      	bne.n	80018a6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f001 ff71 	bl	8003792 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	7c1a      	ldrb	r2, [r3, #16]
 80018b8:	f88d 2000 	strb.w	r2, [sp]
 80018bc:	3304      	adds	r3, #4
 80018be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c0:	f001 fe50 	bl	8003564 <USB_CoreInit>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2202      	movs	r2, #2
 80018ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e0ce      	b.n	8001a74 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f001 ff69 	bl	80037b4 <USB_SetCurrentMode>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0bf      	b.n	8001a74 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]
 80018f8:	e04a      	b.n	8001990 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	3315      	adds	r3, #21
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	3314      	adds	r3, #20
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	b298      	uxth	r0, r3
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	332e      	adds	r3, #46	@ 0x2e
 8001936:	4602      	mov	r2, r0
 8001938:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	3318      	adds	r3, #24
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	331c      	adds	r3, #28
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	3320      	adds	r3, #32
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	3324      	adds	r3, #36	@ 0x24
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	3301      	adds	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	791b      	ldrb	r3, [r3, #4]
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	429a      	cmp	r2, r3
 8001998:	d3af      	bcc.n	80018fa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199a:	2300      	movs	r3, #0
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	e044      	b.n	8001a2a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019a0:	7bfa      	ldrb	r2, [r7, #15]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019b6:	7bfa      	ldrb	r2, [r7, #15]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019e2:	7bfa      	ldrb	r2, [r7, #15]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019f8:	7bfa      	ldrb	r2, [r7, #15]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	3301      	adds	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	791b      	ldrb	r3, [r3, #4]
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d3b5      	bcc.n	80019a0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7c1a      	ldrb	r2, [r3, #16]
 8001a3c:	f88d 2000 	strb.w	r2, [sp]
 8001a40:	3304      	adds	r3, #4
 8001a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a44:	f001 ff02 	bl	800384c <USB_DevInit>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2202      	movs	r2, #2
 8001a52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00c      	b.n	8001a74 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f002 ff4c 	bl	800490a <USB_DevDisconnect>

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_PCD_Start+0x1c>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e022      	b.n	8001ade <HAL_PCD_Start+0x62>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d009      	beq.n	8001ac0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d105      	bne.n	8001ac0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ab8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 fe53 	bl	8003770 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 fefa 	bl	80048c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ae6:	b590      	push	{r4, r7, lr}
 8001ae8:	b08d      	sub	sp, #52	@ 0x34
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 ffb8 	bl	8004a72 <USB_GetMode>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f040 848c 	bne.w	8002422 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 ff1c 	bl	800494c <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8482 	beq.w	8002420 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f002 ff09 	bl	800494c <USB_ReadInterrupts>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d107      	bne.n	8001b54 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f002 0202 	and.w	r2, r2, #2
 8001b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 fef7 	bl	800494c <USB_ReadInterrupts>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b10      	cmp	r3, #16
 8001b66:	d161      	bne.n	8001c2c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0210 	bic.w	r2, r2, #16
 8001b76:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f003 020f 	and.w	r2, r3, #15
 8001b84:	4613      	mov	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4413      	add	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	4413      	add	r3, r2
 8001b94:	3304      	adds	r3, #4
 8001b96:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001b9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001ba2:	d124      	bne.n	8001bee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d035      	beq.n	8001c1c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	6a38      	ldr	r0, [r7, #32]
 8001bc4:	f002 fd2e 	bl	8004624 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bd4:	441a      	add	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	695a      	ldr	r2, [r3, #20]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001be6:	441a      	add	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	615a      	str	r2, [r3, #20]
 8001bec:	e016      	b.n	8001c1c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001bf4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001bf8:	d110      	bne.n	8001c1c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001c00:	2208      	movs	r2, #8
 8001c02:	4619      	mov	r1, r3
 8001c04:	6a38      	ldr	r0, [r7, #32]
 8001c06:	f002 fd0d 	bl	8004624 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c16:	441a      	add	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0210 	orr.w	r2, r2, #16
 8001c2a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fe8b 	bl	800494c <USB_ReadInterrupts>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001c40:	f040 80a7 	bne.w	8001d92 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 fe90 	bl	8004972 <USB_ReadDevAllOutEpInterrupt>
 8001c52:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001c54:	e099      	b.n	8001d8a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 808e 	beq.w	8001d7e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f002 feb4 	bl	80049da <USB_ReadDevOutEPInterrupt>
 8001c72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00c      	beq.n	8001c98 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	015a      	lsls	r2, r3, #5
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	4413      	add	r3, r2
 8001c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 fea4 	bl	80029e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00c      	beq.n	8001cbc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	015a      	lsls	r2, r3, #5
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cae:	461a      	mov	r2, r3
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001cb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 ff7a 	bl	8002bb0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d008      	beq.n	8001cd8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2310      	movs	r3, #16
 8001cd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d030      	beq.n	8001d44 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cea:	2b80      	cmp	r3, #128	@ 0x80
 8001cec:	d109      	bne.n	8001d02 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cfc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d00:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	3304      	adds	r3, #4
 8001d16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	78db      	ldrb	r3, [r3, #3]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d108      	bne.n	8001d32 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2200      	movs	r2, #0
 8001d24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f005 f9fd 	bl	800712c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2302      	movs	r3, #2
 8001d42:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d008      	beq.n	8001d60 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	2320      	movs	r3, #32
 8001d5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d76:	461a      	mov	r2, r3
 8001d78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d7c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	3301      	adds	r3, #1
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d86:	085b      	lsrs	r3, r3, #1
 8001d88:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f47f af62 	bne.w	8001c56 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f002 fdd8 	bl	800494c <USB_ReadInterrupts>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001da2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001da6:	f040 80db 	bne.w	8001f60 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fdf9 	bl	80049a6 <USB_ReadDevAllInEpInterrupt>
 8001db4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001dba:	e0cd      	b.n	8001f58 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80c2 	beq.w	8001f4c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f002 fe1f 	bl	8004a16 <USB_ReadDevInEPInterrupt>
 8001dd8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d057      	beq.n	8001e94 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	2201      	movs	r2, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001df8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69f9      	ldr	r1, [r7, #28]
 8001e00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001e04:	4013      	ands	r3, r2
 8001e06:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e14:	461a      	mov	r2, r3
 8001e16:	2301      	movs	r3, #1
 8001e18:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	799b      	ldrb	r3, [r3, #6]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d132      	bne.n	8001e88 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	3320      	adds	r3, #32
 8001e32:	6819      	ldr	r1, [r3, #0]
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4403      	add	r3, r0
 8001e42:	331c      	adds	r3, #28
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4419      	add	r1, r3
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4403      	add	r3, r0
 8001e56:	3320      	adds	r3, #32
 8001e58:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d113      	bne.n	8001e88 <HAL_PCD_IRQHandler+0x3a2>
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3324      	adds	r3, #36	@ 0x24
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d108      	bne.n	8001e88 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e80:	461a      	mov	r2, r3
 8001e82:	2101      	movs	r1, #1
 8001e84:	f002 fe26 	bl	8004ad4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f005 f8c7 	bl	8007022 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	015a      	lsls	r2, r3, #5
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2308      	movs	r3, #8
 8001eae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d008      	beq.n	8001ecc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2310      	movs	r3, #16
 8001eca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d008      	beq.n	8001ee8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2340      	movs	r3, #64	@ 0x40
 8001ee6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d023      	beq.n	8001f3a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ef2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ef4:	6a38      	ldr	r0, [r7, #32]
 8001ef6:	f001 fe0d 	bl	8003b14 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	3310      	adds	r3, #16
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	78db      	ldrb	r3, [r3, #3]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d108      	bne.n	8001f28 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	4619      	mov	r1, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f005 f914 	bl	8007150 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f34:	461a      	mov	r2, r3
 8001f36:	2302      	movs	r3, #2
 8001f38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fcbd 	bl	80028c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4e:	3301      	adds	r3, #1
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f54:	085b      	lsrs	r3, r3, #1
 8001f56:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f47f af2e 	bne.w	8001dbc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f002 fcf1 	bl	800494c <USB_ReadInterrupts>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001f70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f74:	d122      	bne.n	8001fbc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d108      	bne.n	8001fa6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fea4 	bl	8002cec <HAL_PCDEx_LPM_Callback>
 8001fa4:	e002      	b.n	8001fac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f005 f8b2 	bl	8007110 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001fba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f002 fcc3 	bl	800494c <USB_ReadInterrupts>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fd0:	d112      	bne.n	8001ff8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d102      	bne.n	8001fe8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f005 f86e 	bl	80070c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001ff6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f002 fca5 	bl	800494c <USB_ReadInterrupts>
 8002002:	4603      	mov	r3, r0
 8002004:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800200c:	f040 80b7 	bne.w	800217e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800201e:	f023 0301 	bic.w	r3, r3, #1
 8002022:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2110      	movs	r1, #16
 800202a:	4618      	mov	r0, r3
 800202c:	f001 fd72 	bl	8003b14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002030:	2300      	movs	r3, #0
 8002032:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002034:	e046      	b.n	80020c4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	4413      	add	r3, r2
 800203e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002042:	461a      	mov	r2, r3
 8002044:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002048:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800204a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	4413      	add	r3, r2
 8002052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800205a:	0151      	lsls	r1, r2, #5
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	440a      	add	r2, r1
 8002060:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002064:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002068:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800206a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	4413      	add	r3, r2
 8002072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002076:	461a      	mov	r2, r3
 8002078:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800207c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800207e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	4413      	add	r3, r2
 8002086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800208e:	0151      	lsls	r1, r2, #5
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	440a      	add	r2, r1
 8002094:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002098:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800209c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800209e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020ae:	0151      	lsls	r1, r2, #5
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	440a      	add	r2, r1
 80020b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80020b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80020bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c0:	3301      	adds	r3, #1
 80020c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	791b      	ldrb	r3, [r3, #4]
 80020c8:	461a      	mov	r2, r3
 80020ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d3b2      	bcc.n	8002036 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020de:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80020e2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7bdb      	ldrb	r3, [r3, #15]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d016      	beq.n	800211a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020f6:	69fa      	ldr	r2, [r7, #28]
 80020f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020fc:	f043 030b 	orr.w	r3, r3, #11
 8002100:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800210a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002112:	f043 030b 	orr.w	r3, r3, #11
 8002116:	6453      	str	r3, [r2, #68]	@ 0x44
 8002118:	e015      	b.n	8002146 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002128:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800212c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002130:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002140:	f043 030b 	orr.w	r3, r3, #11
 8002144:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002154:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002158:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002168:	461a      	mov	r2, r3
 800216a:	f002 fcb3 	bl	8004ad4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800217c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f002 fbe2 	bl	800494c <USB_ReadInterrupts>
 8002188:	4603      	mov	r3, r0
 800218a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800218e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002192:	d123      	bne.n	80021dc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f002 fc78 	bl	8004a8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f001 fd2f 	bl	8003c06 <USB_GetDevSpeed>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681c      	ldr	r4, [r3, #0]
 80021b4:	f001 f9ca 	bl	800354c <HAL_RCC_GetHCLKFreq>
 80021b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021be:	461a      	mov	r2, r3
 80021c0:	4620      	mov	r0, r4
 80021c2:	f001 fa33 	bl	800362c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f004 ff53 	bl	8007072 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80021da:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f002 fbb3 	bl	800494c <USB_ReadInterrupts>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d10a      	bne.n	8002206 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f004 ff30 	bl	8007056 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f002 0208 	and.w	r2, r2, #8
 8002204:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f002 fb9e 	bl	800494c <USB_ReadInterrupts>
 8002210:	4603      	mov	r3, r0
 8002212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002216:	2b80      	cmp	r3, #128	@ 0x80
 8002218:	d123      	bne.n	8002262 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002226:	2301      	movs	r3, #1
 8002228:	627b      	str	r3, [r7, #36]	@ 0x24
 800222a:	e014      	b.n	8002256 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d105      	bne.n	8002250 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002246:	b2db      	uxtb	r3, r3
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fb0a 	bl	8002864 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002252:	3301      	adds	r3, #1
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	791b      	ldrb	r3, [r3, #4]
 800225a:	461a      	mov	r2, r3
 800225c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225e:	4293      	cmp	r3, r2
 8002260:	d3e4      	bcc.n	800222c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f002 fb70 	bl	800494c <USB_ReadInterrupts>
 800226c:	4603      	mov	r3, r0
 800226e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002276:	d13c      	bne.n	80022f2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002278:	2301      	movs	r3, #1
 800227a:	627b      	str	r3, [r7, #36]	@ 0x24
 800227c:	e02b      	b.n	80022d6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	4413      	add	r3, r2
 8002286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	3318      	adds	r3, #24
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d115      	bne.n	80022d0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80022a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da12      	bge.n	80022d0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3317      	adds	r3, #23
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4619      	mov	r1, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 faca 	bl	8002864 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	3301      	adds	r3, #1
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	791b      	ldrb	r3, [r3, #4]
 80022da:	461a      	mov	r2, r3
 80022dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022de:	4293      	cmp	r3, r2
 80022e0:	d3cd      	bcc.n	800227e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80022f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 fb28 	bl	800494c <USB_ReadInterrupts>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002302:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002306:	d156      	bne.n	80023b6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002308:	2301      	movs	r3, #1
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
 800230c:	e045      	b.n	800239a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d12e      	bne.n	8002394 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002336:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002338:	2b00      	cmp	r3, #0
 800233a:	da2b      	bge.n	8002394 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	0c1a      	lsrs	r2, r3, #16
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002346:	4053      	eors	r3, r2
 8002348:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800234c:	2b00      	cmp	r3, #0
 800234e:	d121      	bne.n	8002394 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10a      	bne.n	8002394 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800238c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002390:	6053      	str	r3, [r2, #4]
            break;
 8002392:	e008      	b.n	80023a6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002396:	3301      	adds	r3, #1
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	791b      	ldrb	r3, [r3, #4]
 800239e:	461a      	mov	r2, r3
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d3b3      	bcc.n	800230e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80023b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 fac6 	bl	800494c <USB_ReadInterrupts>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80023c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023ca:	d10a      	bne.n	80023e2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f004 fed1 	bl	8007174 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80023e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f002 fab0 	bl	800494c <USB_ReadInterrupts>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d115      	bne.n	8002422 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f004 fec1 	bl	8007190 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	430a      	orrs	r2, r1
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	e000      	b.n	8002422 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002420:	bf00      	nop
    }
  }
}
 8002422:	3734      	adds	r7, #52	@ 0x34
 8002424:	46bd      	mov	sp, r7
 8002426:	bd90      	pop	{r4, r7, pc}

08002428 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_PCD_SetAddress+0x1a>
 800243e:	2302      	movs	r3, #2
 8002440:	e012      	b.n	8002468 <HAL_PCD_SetAddress+0x40>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f002 fa0f 	bl	800487c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	4608      	mov	r0, r1
 800247a:	4611      	mov	r1, r2
 800247c:	461a      	mov	r2, r3
 800247e:	4603      	mov	r3, r0
 8002480:	70fb      	strb	r3, [r7, #3]
 8002482:	460b      	mov	r3, r1
 8002484:	803b      	strh	r3, [r7, #0]
 8002486:	4613      	mov	r3, r2
 8002488:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800248e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002492:	2b00      	cmp	r3, #0
 8002494:	da0f      	bge.n	80024b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	f003 020f 	and.w	r2, r3, #15
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	3310      	adds	r3, #16
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	3304      	adds	r3, #4
 80024ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	705a      	strb	r2, [r3, #1]
 80024b4:	e00f      	b.n	80024d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	f003 020f 	and.w	r2, r3, #15
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	4413      	add	r3, r2
 80024cc:	3304      	adds	r3, #4
 80024ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80024e2:	883b      	ldrh	r3, [r7, #0]
 80024e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	78ba      	ldrb	r2, [r7, #2]
 80024f0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	785b      	ldrb	r3, [r3, #1]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d004      	beq.n	8002504 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002504:	78bb      	ldrb	r3, [r7, #2]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d102      	bne.n	8002510 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_PCD_EP_Open+0xae>
 800251a:	2302      	movs	r3, #2
 800251c:	e00e      	b.n	800253c <HAL_PCD_EP_Open+0xcc>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68f9      	ldr	r1, [r7, #12]
 800252c:	4618      	mov	r0, r3
 800252e:	f001 fb8f 	bl	8003c50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800253a:	7afb      	ldrb	r3, [r7, #11]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002554:	2b00      	cmp	r3, #0
 8002556:	da0f      	bge.n	8002578 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	f003 020f 	and.w	r2, r3, #15
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	3310      	adds	r3, #16
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	4413      	add	r3, r2
 800256c:	3304      	adds	r3, #4
 800256e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2201      	movs	r2, #1
 8002574:	705a      	strb	r2, [r3, #1]
 8002576:	e00f      	b.n	8002598 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	f003 020f 	and.w	r2, r3, #15
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	3304      	adds	r3, #4
 8002590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_PCD_EP_Close+0x6e>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e00e      	b.n	80025d0 <HAL_PCD_EP_Close+0x8c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68f9      	ldr	r1, [r7, #12]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 fbcd 	bl	8003d60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	460b      	mov	r3, r1
 80025e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e8:	7afb      	ldrb	r3, [r7, #11]
 80025ea:	f003 020f 	and.w	r2, r3, #15
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4413      	add	r3, r2
 80025fe:	3304      	adds	r3, #4
 8002600:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2200      	movs	r2, #0
 8002612:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2200      	movs	r2, #0
 8002618:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800261a:	7afb      	ldrb	r3, [r7, #11]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	b2da      	uxtb	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	799b      	ldrb	r3, [r3, #6]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d102      	bne.n	8002634 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	799b      	ldrb	r3, [r3, #6]
 800263c:	461a      	mov	r2, r3
 800263e:	6979      	ldr	r1, [r7, #20]
 8002640:	f001 fc6a 	bl	8003f18 <USB_EPStartXfer>

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	f003 020f 	and.w	r2, r3, #15
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002670:	681b      	ldr	r3, [r3, #0]
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	460b      	mov	r3, r1
 800268c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800268e:	7afb      	ldrb	r3, [r7, #11]
 8002690:	f003 020f 	and.w	r2, r3, #15
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	3310      	adds	r3, #16
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4413      	add	r3, r2
 80026a2:	3304      	adds	r3, #4
 80026a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2200      	movs	r2, #0
 80026b6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2201      	movs	r2, #1
 80026bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026be:	7afb      	ldrb	r3, [r7, #11]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	799b      	ldrb	r3, [r3, #6]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d102      	bne.n	80026d8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	799b      	ldrb	r3, [r3, #6]
 80026e0:	461a      	mov	r2, r3
 80026e2:	6979      	ldr	r1, [r7, #20]
 80026e4:	f001 fc18 	bl	8003f18 <USB_EPStartXfer>

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	7912      	ldrb	r2, [r2, #4]
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e04f      	b.n	80027b0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002714:	2b00      	cmp	r3, #0
 8002716:	da0f      	bge.n	8002738 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	f003 020f 	and.w	r2, r3, #15
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	3310      	adds	r3, #16
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	3304      	adds	r3, #4
 800272e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	705a      	strb	r2, [r3, #1]
 8002736:	e00d      	b.n	8002754 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	3304      	adds	r3, #4
 800274c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	b2da      	uxtb	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_PCD_EP_SetStall+0x82>
 8002770:	2302      	movs	r3, #2
 8002772:	e01d      	b.n	80027b0 <HAL_PCD_EP_SetStall+0xbe>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68f9      	ldr	r1, [r7, #12]
 8002782:	4618      	mov	r0, r3
 8002784:	f001 ffa6 	bl	80046d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	7999      	ldrb	r1, [r3, #6]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027a0:	461a      	mov	r2, r3
 80027a2:	f002 f997 	bl	8004ad4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	7912      	ldrb	r2, [r2, #4]
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e042      	b.n	800285c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	da0f      	bge.n	80027fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	f003 020f 	and.w	r2, r3, #15
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	3310      	adds	r3, #16
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	3304      	adds	r3, #4
 80027f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	705a      	strb	r2, [r3, #1]
 80027fc:	e00f      	b.n	800281e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	f003 020f 	and.w	r2, r3, #15
 8002804:	4613      	mov	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	3304      	adds	r3, #4
 8002816:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	b2da      	uxtb	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_PCD_EP_ClrStall+0x86>
 800283a:	2302      	movs	r3, #2
 800283c:	e00e      	b.n	800285c <HAL_PCD_EP_ClrStall+0xa4>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68f9      	ldr	r1, [r7, #12]
 800284c:	4618      	mov	r0, r3
 800284e:	f001 ffaf 	bl	80047b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002874:	2b00      	cmp	r3, #0
 8002876:	da0c      	bge.n	8002892 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	f003 020f 	and.w	r2, r3, #15
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	3310      	adds	r3, #16
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	3304      	adds	r3, #4
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	e00c      	b.n	80028ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	f003 020f 	and.w	r2, r3, #15
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	4413      	add	r3, r2
 80028a8:	3304      	adds	r3, #4
 80028aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68f9      	ldr	r1, [r7, #12]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f001 fdce 	bl	8004454 <USB_EPStopXfer>
 80028b8:	4603      	mov	r3, r0
 80028ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80028bc:	7afb      	ldrb	r3, [r7, #11]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b08a      	sub	sp, #40	@ 0x28
 80028ca:	af02      	add	r7, sp, #8
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	3310      	adds	r3, #16
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	3304      	adds	r3, #4
 80028ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d901      	bls.n	80028fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e06b      	b.n	80029d6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	429a      	cmp	r2, r3
 8002912:	d902      	bls.n	800291a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3303      	adds	r3, #3
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002922:	e02a      	b.n	800297a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	429a      	cmp	r2, r3
 8002938:	d902      	bls.n	8002940 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	3303      	adds	r3, #3
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	68d9      	ldr	r1, [r3, #12]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	4603      	mov	r3, r0
 800295c:	6978      	ldr	r0, [r7, #20]
 800295e:	f001 fe23 	bl	80045a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	441a      	add	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	441a      	add	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	429a      	cmp	r2, r3
 800298e:	d809      	bhi.n	80029a4 <PCD_WriteEmptyTxFifo+0xde>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002998:	429a      	cmp	r2, r3
 800299a:	d203      	bcs.n	80029a4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1bf      	bne.n	8002924 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d811      	bhi.n	80029d4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	2201      	movs	r2, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	6939      	ldr	r1, [r7, #16]
 80029cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80029d0:	4013      	ands	r3, r2
 80029d2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	333c      	adds	r3, #60	@ 0x3c
 80029f8:	3304      	adds	r3, #4
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	799b      	ldrb	r3, [r3, #6]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d17b      	bne.n	8002b0e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d015      	beq.n	8002a4c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	4a61      	ldr	r2, [pc, #388]	@ (8002ba8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	f240 80b9 	bls.w	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80b3 	beq.w	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a42:	461a      	mov	r2, r3
 8002a44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a48:	6093      	str	r3, [r2, #8]
 8002a4a:	e0a7      	b.n	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a62:	461a      	mov	r2, r3
 8002a64:	2320      	movs	r3, #32
 8002a66:	6093      	str	r3, [r2, #8]
 8002a68:	e098      	b.n	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f040 8093 	bne.w	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	4a4b      	ldr	r2, [pc, #300]	@ (8002ba8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d90f      	bls.n	8002a9e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a94:	461a      	mov	r2, r3
 8002a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a9a:	6093      	str	r3, [r2, #8]
 8002a9c:	e07e      	b.n	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a1a      	ldr	r2, [r3, #32]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	0159      	lsls	r1, r3, #5
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	440b      	add	r3, r1
 8002ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aca:	1ad2      	subs	r2, r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d114      	bne.n	8002b00 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2101      	movs	r1, #1
 8002aec:	f001 fff2 	bl	8004ad4 <USB_EP0_OutStart>
 8002af0:	e006      	b.n	8002b00 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	441a      	add	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	4619      	mov	r1, r3
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f004 fa70 	bl	8006fec <HAL_PCD_DataOutStageCallback>
 8002b0c:	e046      	b.n	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	4a26      	ldr	r2, [pc, #152]	@ (8002bac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d124      	bne.n	8002b60 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b32:	6093      	str	r3, [r2, #8]
 8002b34:	e032      	b.n	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2320      	movs	r3, #32
 8002b50:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	4619      	mov	r1, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f004 fa47 	bl	8006fec <HAL_PCD_DataOutStageCallback>
 8002b5e:	e01d      	b.n	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d114      	bne.n	8002b90 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d108      	bne.n	8002b90 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	f001 ffa2 	bl	8004ad4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f004 fa28 	bl	8006fec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	4f54300a 	.word	0x4f54300a
 8002bac:	4f54310a 	.word	0x4f54310a

08002bb0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	333c      	adds	r3, #60	@ 0x3c
 8002bc8:	3304      	adds	r3, #4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4a15      	ldr	r2, [pc, #84]	@ (8002c38 <PCD_EP_OutSetupPacket_int+0x88>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d90e      	bls.n	8002c04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d009      	beq.n	8002c04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f004 f9df 	bl	8006fc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c38 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d90c      	bls.n	8002c2c <PCD_EP_OutSetupPacket_int+0x7c>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	799b      	ldrb	r3, [r3, #6]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d108      	bne.n	8002c2c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c24:	461a      	mov	r2, r3
 8002c26:	2101      	movs	r1, #1
 8002c28:	f001 ff54 	bl	8004ad4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	4f54300a 	.word	0x4f54300a

08002c3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c52:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d107      	bne.n	8002c6a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c5a:	883b      	ldrh	r3, [r7, #0]
 8002c5c:	0419      	lsls	r1, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c68:	e028      	b.n	8002cbc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c70:	0c1b      	lsrs	r3, r3, #16
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	4413      	add	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
 8002c7c:	e00d      	b.n	8002c9a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	3340      	adds	r3, #64	@ 0x40
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	4413      	add	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	3301      	adds	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3ec      	bcc.n	8002c7e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ca4:	883b      	ldrh	r3, [r7, #0]
 8002ca6:	0418      	lsls	r0, r3, #16
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6819      	ldr	r1, [r3, #0]
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	4302      	orrs	r2, r0
 8002cb4:	3340      	adds	r3, #64	@ 0x40
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	887a      	ldrh	r2, [r7, #2]
 8002cdc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e267      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d075      	beq.n	8002e0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d22:	4b88      	ldr	r3, [pc, #544]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d00c      	beq.n	8002d48 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2e:	4b85      	ldr	r3, [pc, #532]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d112      	bne.n	8002d60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3a:	4b82      	ldr	r3, [pc, #520]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d46:	d10b      	bne.n	8002d60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	4b7e      	ldr	r3, [pc, #504]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d05b      	beq.n	8002e0c <HAL_RCC_OscConfig+0x108>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d157      	bne.n	8002e0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e242      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d68:	d106      	bne.n	8002d78 <HAL_RCC_OscConfig+0x74>
 8002d6a:	4b76      	ldr	r3, [pc, #472]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a75      	ldr	r2, [pc, #468]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e01d      	b.n	8002db4 <HAL_RCC_OscConfig+0xb0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x98>
 8002d82:	4b70      	ldr	r3, [pc, #448]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a6f      	ldr	r2, [pc, #444]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a6c      	ldr	r2, [pc, #432]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0xb0>
 8002d9c:	4b69      	ldr	r3, [pc, #420]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a68      	ldr	r2, [pc, #416]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	4b66      	ldr	r3, [pc, #408]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a65      	ldr	r2, [pc, #404]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d013      	beq.n	8002de4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fa56 	bl	800126c <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7fe fa52 	bl	800126c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	@ 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e207      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0xc0>
 8002de2:	e014      	b.n	8002e0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7fe fa42 	bl	800126c <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dec:	f7fe fa3e 	bl	800126c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	@ 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e1f3      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfe:	4b51      	ldr	r3, [pc, #324]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0xe8>
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d063      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e26:	4b47      	ldr	r3, [pc, #284]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d11c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e32:	4b44      	ldr	r3, [pc, #272]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d116      	bne.n	8002e6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3e:	4b41      	ldr	r3, [pc, #260]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_RCC_OscConfig+0x152>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e1c7      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e56:	4b3b      	ldr	r3, [pc, #236]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4937      	ldr	r1, [pc, #220]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	e03a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d020      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e74:	4b34      	ldr	r3, [pc, #208]	@ (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7a:	f7fe f9f7 	bl	800126c <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e82:	f7fe f9f3 	bl	800126c <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e1a8      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e94:	4b2b      	ldr	r3, [pc, #172]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea0:	4b28      	ldr	r3, [pc, #160]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4925      	ldr	r1, [pc, #148]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
 8002eb4:	e015      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb6:	4b24      	ldr	r3, [pc, #144]	@ (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe f9d6 	bl	800126c <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec4:	f7fe f9d2 	bl	800126c <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e187      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d036      	beq.n	8002f5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d016      	beq.n	8002f24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef6:	4b15      	ldr	r3, [pc, #84]	@ (8002f4c <HAL_RCC_OscConfig+0x248>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fe f9b6 	bl	800126c <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f04:	f7fe f9b2 	bl	800126c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e167      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f16:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x200>
 8002f22:	e01b      	b.n	8002f5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f24:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <HAL_RCC_OscConfig+0x248>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe f99f 	bl	800126c <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f30:	e00e      	b.n	8002f50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f32:	f7fe f99b 	bl	800126c <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d907      	bls.n	8002f50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e150      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
 8002f44:	40023800 	.word	0x40023800
 8002f48:	42470000 	.word	0x42470000
 8002f4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f50:	4b88      	ldr	r3, [pc, #544]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ea      	bne.n	8002f32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 8097 	beq.w	8003098 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6e:	4b81      	ldr	r3, [pc, #516]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10f      	bne.n	8002f9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	4b7d      	ldr	r3, [pc, #500]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	4a7c      	ldr	r2, [pc, #496]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f8a:	4b7a      	ldr	r3, [pc, #488]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f96:	2301      	movs	r3, #1
 8002f98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9a:	4b77      	ldr	r3, [pc, #476]	@ (8003178 <HAL_RCC_OscConfig+0x474>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d118      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa6:	4b74      	ldr	r3, [pc, #464]	@ (8003178 <HAL_RCC_OscConfig+0x474>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a73      	ldr	r2, [pc, #460]	@ (8003178 <HAL_RCC_OscConfig+0x474>)
 8002fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb2:	f7fe f95b 	bl	800126c <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fba:	f7fe f957 	bl	800126c <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e10c      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	4b6a      	ldr	r3, [pc, #424]	@ (8003178 <HAL_RCC_OscConfig+0x474>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d106      	bne.n	8002fee <HAL_RCC_OscConfig+0x2ea>
 8002fe0:	4b64      	ldr	r3, [pc, #400]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe4:	4a63      	ldr	r2, [pc, #396]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fec:	e01c      	b.n	8003028 <HAL_RCC_OscConfig+0x324>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b05      	cmp	r3, #5
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0x30c>
 8002ff6:	4b5f      	ldr	r3, [pc, #380]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffa:	4a5e      	ldr	r2, [pc, #376]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	6713      	str	r3, [r2, #112]	@ 0x70
 8003002:	4b5c      	ldr	r3, [pc, #368]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003006:	4a5b      	ldr	r2, [pc, #364]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6713      	str	r3, [r2, #112]	@ 0x70
 800300e:	e00b      	b.n	8003028 <HAL_RCC_OscConfig+0x324>
 8003010:	4b58      	ldr	r3, [pc, #352]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003014:	4a57      	ldr	r2, [pc, #348]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	6713      	str	r3, [r2, #112]	@ 0x70
 800301c:	4b55      	ldr	r3, [pc, #340]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003020:	4a54      	ldr	r2, [pc, #336]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003022:	f023 0304 	bic.w	r3, r3, #4
 8003026:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d015      	beq.n	800305c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003030:	f7fe f91c 	bl	800126c <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003036:	e00a      	b.n	800304e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003038:	f7fe f918 	bl	800126c <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e0cb      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304e:	4b49      	ldr	r3, [pc, #292]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0ee      	beq.n	8003038 <HAL_RCC_OscConfig+0x334>
 800305a:	e014      	b.n	8003086 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305c:	f7fe f906 	bl	800126c <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003062:	e00a      	b.n	800307a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003064:	f7fe f902 	bl	800126c <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e0b5      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307a:	4b3e      	ldr	r3, [pc, #248]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1ee      	bne.n	8003064 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003086:	7dfb      	ldrb	r3, [r7, #23]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d105      	bne.n	8003098 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308c:	4b39      	ldr	r3, [pc, #228]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	4a38      	ldr	r2, [pc, #224]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003092:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003096:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80a1 	beq.w	80031e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a2:	4b34      	ldr	r3, [pc, #208]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d05c      	beq.n	8003168 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d141      	bne.n	800313a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	4b31      	ldr	r3, [pc, #196]	@ (800317c <HAL_RCC_OscConfig+0x478>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe f8d6 	bl	800126c <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fe f8d2 	bl	800126c <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e087      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	4b27      	ldr	r3, [pc, #156]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69da      	ldr	r2, [r3, #28]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	019b      	lsls	r3, r3, #6
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	3b01      	subs	r3, #1
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	061b      	lsls	r3, r3, #24
 8003106:	491b      	ldr	r1, [pc, #108]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310c:	4b1b      	ldr	r3, [pc, #108]	@ (800317c <HAL_RCC_OscConfig+0x478>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fe f8ab 	bl	800126c <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311a:	f7fe f8a7 	bl	800126c <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e05c      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312c:	4b11      	ldr	r3, [pc, #68]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x416>
 8003138:	e054      	b.n	80031e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	4b10      	ldr	r3, [pc, #64]	@ (800317c <HAL_RCC_OscConfig+0x478>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe f894 	bl	800126c <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe f890 	bl	800126c <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e045      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315a:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x444>
 8003166:	e03d      	b.n	80031e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e038      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
 8003174:	40023800 	.word	0x40023800
 8003178:	40007000 	.word	0x40007000
 800317c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003180:	4b1b      	ldr	r3, [pc, #108]	@ (80031f0 <HAL_RCC_OscConfig+0x4ec>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d028      	beq.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d121      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d11a      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031b0:	4013      	ands	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d111      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	3b01      	subs	r3, #1
 80031ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d107      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800

080031f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0cc      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003208:	4b68      	ldr	r3, [pc, #416]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d90c      	bls.n	8003230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b65      	ldr	r3, [pc, #404]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b63      	ldr	r3, [pc, #396]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0b8      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003248:	4b59      	ldr	r3, [pc, #356]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a58      	ldr	r2, [pc, #352]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003252:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003260:	4b53      	ldr	r3, [pc, #332]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a52      	ldr	r2, [pc, #328]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800326a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b50      	ldr	r3, [pc, #320]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	494d      	ldr	r1, [pc, #308]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d044      	beq.n	8003314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b47      	ldr	r3, [pc, #284]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d119      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e07f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d003      	beq.n	80032b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b2:	4b3f      	ldr	r3, [pc, #252]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e06f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c2:	4b3b      	ldr	r3, [pc, #236]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e067      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d2:	4b37      	ldr	r3, [pc, #220]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f023 0203 	bic.w	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4934      	ldr	r1, [pc, #208]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e4:	f7fd ffc2 	bl	800126c <HAL_GetTick>
 80032e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ec:	f7fd ffbe 	bl	800126c <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e04f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	4b2b      	ldr	r3, [pc, #172]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 020c 	and.w	r2, r3, #12
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	429a      	cmp	r2, r3
 8003312:	d1eb      	bne.n	80032ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003314:	4b25      	ldr	r3, [pc, #148]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d20c      	bcs.n	800333c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b22      	ldr	r3, [pc, #136]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b20      	ldr	r3, [pc, #128]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e032      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003348:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4916      	ldr	r1, [pc, #88]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003366:	4b12      	ldr	r3, [pc, #72]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	490e      	ldr	r1, [pc, #56]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800337a:	f000 f821 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 800337e:	4602      	mov	r2, r0
 8003380:	4b0b      	ldr	r3, [pc, #44]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	490a      	ldr	r1, [pc, #40]	@ (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	5ccb      	ldrb	r3, [r1, r3]
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	4a09      	ldr	r2, [pc, #36]	@ (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003396:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <HAL_RCC_ClockConfig+0x1c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7fd ff22 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023c00 	.word	0x40023c00
 80033b0:	40023800 	.word	0x40023800
 80033b4:	08008504 	.word	0x08008504
 80033b8:	20000078 	.word	0x20000078
 80033bc:	2000007c 	.word	0x2000007c

080033c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c4:	b090      	sub	sp, #64	@ 0x40
 80033c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d8:	4b59      	ldr	r3, [pc, #356]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x180>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d00d      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x40>
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	f200 80a1 	bhi.w	800352c <HAL_RCC_GetSysClockFreq+0x16c>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x34>
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_GetSysClockFreq+0x3a>
 80033f2:	e09b      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f4:	4b53      	ldr	r3, [pc, #332]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x184>)
 80033f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033f8:	e09b      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033fa:	4b53      	ldr	r3, [pc, #332]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x188>)
 80033fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033fe:	e098      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003400:	4b4f      	ldr	r3, [pc, #316]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x180>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003408:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800340a:	4b4d      	ldr	r3, [pc, #308]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x180>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d028      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003416:	4b4a      	ldr	r3, [pc, #296]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x180>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	099b      	lsrs	r3, r3, #6
 800341c:	2200      	movs	r2, #0
 800341e:	623b      	str	r3, [r7, #32]
 8003420:	627a      	str	r2, [r7, #36]	@ 0x24
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003428:	2100      	movs	r1, #0
 800342a:	4b47      	ldr	r3, [pc, #284]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x188>)
 800342c:	fb03 f201 	mul.w	r2, r3, r1
 8003430:	2300      	movs	r3, #0
 8003432:	fb00 f303 	mul.w	r3, r0, r3
 8003436:	4413      	add	r3, r2
 8003438:	4a43      	ldr	r2, [pc, #268]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x188>)
 800343a:	fba0 1202 	umull	r1, r2, r0, r2
 800343e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003440:	460a      	mov	r2, r1
 8003442:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003444:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003446:	4413      	add	r3, r2
 8003448:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800344a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800344c:	2200      	movs	r2, #0
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	61fa      	str	r2, [r7, #28]
 8003452:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003456:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800345a:	f7fc ff11 	bl	8000280 <__aeabi_uldivmod>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4613      	mov	r3, r2
 8003464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003466:	e053      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003468:	4b35      	ldr	r3, [pc, #212]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x180>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	099b      	lsrs	r3, r3, #6
 800346e:	2200      	movs	r2, #0
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	617a      	str	r2, [r7, #20]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800347a:	f04f 0b00 	mov.w	fp, #0
 800347e:	4652      	mov	r2, sl
 8003480:	465b      	mov	r3, fp
 8003482:	f04f 0000 	mov.w	r0, #0
 8003486:	f04f 0100 	mov.w	r1, #0
 800348a:	0159      	lsls	r1, r3, #5
 800348c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003490:	0150      	lsls	r0, r2, #5
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	ebb2 080a 	subs.w	r8, r2, sl
 800349a:	eb63 090b 	sbc.w	r9, r3, fp
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034b2:	ebb2 0408 	subs.w	r4, r2, r8
 80034b6:	eb63 0509 	sbc.w	r5, r3, r9
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	00eb      	lsls	r3, r5, #3
 80034c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c8:	00e2      	lsls	r2, r4, #3
 80034ca:	4614      	mov	r4, r2
 80034cc:	461d      	mov	r5, r3
 80034ce:	eb14 030a 	adds.w	r3, r4, sl
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	eb45 030b 	adc.w	r3, r5, fp
 80034d8:	607b      	str	r3, [r7, #4]
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034e6:	4629      	mov	r1, r5
 80034e8:	028b      	lsls	r3, r1, #10
 80034ea:	4621      	mov	r1, r4
 80034ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034f0:	4621      	mov	r1, r4
 80034f2:	028a      	lsls	r2, r1, #10
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034fa:	2200      	movs	r2, #0
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	60fa      	str	r2, [r7, #12]
 8003500:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003504:	f7fc febc 	bl	8000280 <__aeabi_uldivmod>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4613      	mov	r3, r2
 800350e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003510:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x180>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	3301      	adds	r3, #1
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003520:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800352a:	e002      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4b05      	ldr	r3, [pc, #20]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x184>)
 800352e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003534:	4618      	mov	r0, r3
 8003536:	3740      	adds	r7, #64	@ 0x40
 8003538:	46bd      	mov	sp, r7
 800353a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800
 8003544:	00f42400 	.word	0x00f42400
 8003548:	017d7840 	.word	0x017d7840

0800354c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003550:	4b03      	ldr	r3, [pc, #12]	@ (8003560 <HAL_RCC_GetHCLKFreq+0x14>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000078 	.word	0x20000078

08003564 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003564:	b084      	sub	sp, #16
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	f107 001c 	add.w	r0, r7, #28
 8003572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003576:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800357a:	2b01      	cmp	r3, #1
 800357c:	d123      	bne.n	80035c6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003582:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d105      	bne.n	80035ba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f001 fae8 	bl	8004b90 <USB_CoreReset>
 80035c0:	4603      	mov	r3, r0
 80035c2:	73fb      	strb	r3, [r7, #15]
 80035c4:	e01b      	b.n	80035fe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f001 fadc 	bl	8004b90 <USB_CoreReset>
 80035d8:	4603      	mov	r3, r0
 80035da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80035dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d106      	bne.n	80035f2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80035f0:	e005      	b.n	80035fe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80035fe:	7fbb      	ldrb	r3, [r7, #30]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d10b      	bne.n	800361c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f043 0206 	orr.w	r2, r3, #6
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f043 0220 	orr.w	r2, r3, #32
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003628:	b004      	add	sp, #16
 800362a:	4770      	bx	lr

0800362c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d165      	bne.n	800370c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4a41      	ldr	r2, [pc, #260]	@ (8003748 <USB_SetTurnaroundTime+0x11c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d906      	bls.n	8003656 <USB_SetTurnaroundTime+0x2a>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4a40      	ldr	r2, [pc, #256]	@ (800374c <USB_SetTurnaroundTime+0x120>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d202      	bcs.n	8003656 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003650:	230f      	movs	r3, #15
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	e062      	b.n	800371c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4a3c      	ldr	r2, [pc, #240]	@ (800374c <USB_SetTurnaroundTime+0x120>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d306      	bcc.n	800366c <USB_SetTurnaroundTime+0x40>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	4a3b      	ldr	r2, [pc, #236]	@ (8003750 <USB_SetTurnaroundTime+0x124>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d202      	bcs.n	800366c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003666:	230e      	movs	r3, #14
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	e057      	b.n	800371c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4a38      	ldr	r2, [pc, #224]	@ (8003750 <USB_SetTurnaroundTime+0x124>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d306      	bcc.n	8003682 <USB_SetTurnaroundTime+0x56>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4a37      	ldr	r2, [pc, #220]	@ (8003754 <USB_SetTurnaroundTime+0x128>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d202      	bcs.n	8003682 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800367c:	230d      	movs	r3, #13
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	e04c      	b.n	800371c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4a33      	ldr	r2, [pc, #204]	@ (8003754 <USB_SetTurnaroundTime+0x128>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d306      	bcc.n	8003698 <USB_SetTurnaroundTime+0x6c>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4a32      	ldr	r2, [pc, #200]	@ (8003758 <USB_SetTurnaroundTime+0x12c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d802      	bhi.n	8003698 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003692:	230c      	movs	r3, #12
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e041      	b.n	800371c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4a2f      	ldr	r2, [pc, #188]	@ (8003758 <USB_SetTurnaroundTime+0x12c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d906      	bls.n	80036ae <USB_SetTurnaroundTime+0x82>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4a2e      	ldr	r2, [pc, #184]	@ (800375c <USB_SetTurnaroundTime+0x130>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d802      	bhi.n	80036ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80036a8:	230b      	movs	r3, #11
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	e036      	b.n	800371c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4a2a      	ldr	r2, [pc, #168]	@ (800375c <USB_SetTurnaroundTime+0x130>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d906      	bls.n	80036c4 <USB_SetTurnaroundTime+0x98>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	4a29      	ldr	r2, [pc, #164]	@ (8003760 <USB_SetTurnaroundTime+0x134>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d802      	bhi.n	80036c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80036be:	230a      	movs	r3, #10
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	e02b      	b.n	800371c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4a26      	ldr	r2, [pc, #152]	@ (8003760 <USB_SetTurnaroundTime+0x134>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d906      	bls.n	80036da <USB_SetTurnaroundTime+0xae>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4a25      	ldr	r2, [pc, #148]	@ (8003764 <USB_SetTurnaroundTime+0x138>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d202      	bcs.n	80036da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80036d4:	2309      	movs	r3, #9
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	e020      	b.n	800371c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4a21      	ldr	r2, [pc, #132]	@ (8003764 <USB_SetTurnaroundTime+0x138>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d306      	bcc.n	80036f0 <USB_SetTurnaroundTime+0xc4>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4a20      	ldr	r2, [pc, #128]	@ (8003768 <USB_SetTurnaroundTime+0x13c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d802      	bhi.n	80036f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80036ea:	2308      	movs	r3, #8
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	e015      	b.n	800371c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003768 <USB_SetTurnaroundTime+0x13c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d906      	bls.n	8003706 <USB_SetTurnaroundTime+0xda>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4a1c      	ldr	r2, [pc, #112]	@ (800376c <USB_SetTurnaroundTime+0x140>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d202      	bcs.n	8003706 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003700:	2307      	movs	r3, #7
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e00a      	b.n	800371c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003706:	2306      	movs	r3, #6
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	e007      	b.n	800371c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003712:	2309      	movs	r3, #9
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e001      	b.n	800371c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003718:	2309      	movs	r3, #9
 800371a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	029b      	lsls	r3, r3, #10
 8003730:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	00d8acbf 	.word	0x00d8acbf
 800374c:	00e4e1c0 	.word	0x00e4e1c0
 8003750:	00f42400 	.word	0x00f42400
 8003754:	01067380 	.word	0x01067380
 8003758:	011a499f 	.word	0x011a499f
 800375c:	01312cff 	.word	0x01312cff
 8003760:	014ca43f 	.word	0x014ca43f
 8003764:	016e3600 	.word	0x016e3600
 8003768:	01a6ab1f 	.word	0x01a6ab1f
 800376c:	01e84800 	.word	0x01e84800

08003770 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f043 0201 	orr.w	r2, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f023 0201 	bic.w	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d115      	bne.n	8003802 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80037e2:	200a      	movs	r0, #10
 80037e4:	f7fd fd4e 	bl	8001284 <HAL_Delay>
      ms += 10U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	330a      	adds	r3, #10
 80037ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f001 f93f 	bl	8004a72 <USB_GetMode>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d01e      	beq.n	8003838 <USB_SetCurrentMode+0x84>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80037fe:	d9f0      	bls.n	80037e2 <USB_SetCurrentMode+0x2e>
 8003800:	e01a      	b.n	8003838 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d115      	bne.n	8003834 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003814:	200a      	movs	r0, #10
 8003816:	f7fd fd35 	bl	8001284 <HAL_Delay>
      ms += 10U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	330a      	adds	r3, #10
 800381e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f001 f926 	bl	8004a72 <USB_GetMode>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <USB_SetCurrentMode+0x84>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003830:	d9f0      	bls.n	8003814 <USB_SetCurrentMode+0x60>
 8003832:	e001      	b.n	8003838 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e005      	b.n	8003844 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2bc8      	cmp	r3, #200	@ 0xc8
 800383c:	d101      	bne.n	8003842 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800384c:	b084      	sub	sp, #16
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800385a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	e009      	b.n	8003880 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	3340      	adds	r3, #64	@ 0x40
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	2200      	movs	r2, #0
 8003878:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	3301      	adds	r3, #1
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	2b0e      	cmp	r3, #14
 8003884:	d9f2      	bls.n	800386c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003886:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800388a:	2b00      	cmp	r3, #0
 800388c:	d11c      	bne.n	80038c8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038be:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80038c6:	e00b      	b.n	80038e0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038cc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80038e6:	461a      	mov	r2, r3
 80038e8:	2300      	movs	r3, #0
 80038ea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038ec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d10d      	bne.n	8003910 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d104      	bne.n	8003906 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038fc:	2100      	movs	r1, #0
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f968 	bl	8003bd4 <USB_SetDevSpeed>
 8003904:	e008      	b.n	8003918 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003906:	2101      	movs	r1, #1
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f963 	bl	8003bd4 <USB_SetDevSpeed>
 800390e:	e003      	b.n	8003918 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003910:	2103      	movs	r1, #3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f95e 	bl	8003bd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003918:	2110      	movs	r1, #16
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f8fa 	bl	8003b14 <USB_FlushTxFifo>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f924 	bl	8003b78 <USB_FlushRxFifo>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003940:	461a      	mov	r2, r3
 8003942:	2300      	movs	r3, #0
 8003944:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800394c:	461a      	mov	r2, r3
 800394e:	2300      	movs	r3, #0
 8003950:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003958:	461a      	mov	r2, r3
 800395a:	2300      	movs	r3, #0
 800395c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	e043      	b.n	80039ec <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003976:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800397a:	d118      	bne.n	80039ae <USB_DevInit+0x162>
    {
      if (i == 0U)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800398e:	461a      	mov	r2, r3
 8003990:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e013      	b.n	80039c0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a4:	461a      	mov	r2, r3
 80039a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	e008      	b.n	80039c0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ba:	461a      	mov	r2, r3
 80039bc:	2300      	movs	r3, #0
 80039be:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039cc:	461a      	mov	r2, r3
 80039ce:	2300      	movs	r3, #0
 80039d0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039de:	461a      	mov	r2, r3
 80039e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	3301      	adds	r3, #1
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039f0:	461a      	mov	r2, r3
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d3b5      	bcc.n	8003964 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	e043      	b.n	8003a86 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a14:	d118      	bne.n	8003a48 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e013      	b.n	8003a5a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e008      	b.n	8003a5a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a54:	461a      	mov	r2, r3
 8003a56:	2300      	movs	r3, #0
 8003a58:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a66:	461a      	mov	r2, r3
 8003a68:	2300      	movs	r3, #0
 8003a6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	3301      	adds	r3, #1
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d3b5      	bcc.n	80039fe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003aa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003aa4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003ab2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ab4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d105      	bne.n	8003ac8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f043 0210 	orr.w	r2, r3, #16
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	4b10      	ldr	r3, [pc, #64]	@ (8003b10 <USB_DevInit+0x2c4>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ad4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f043 0208 	orr.w	r2, r3, #8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ae8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d107      	bne.n	8003b00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003af8:	f043 0304 	orr.w	r3, r3, #4
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b0c:	b004      	add	sp, #16
 8003b0e:	4770      	bx	lr
 8003b10:	803c3800 	.word	0x803c3800

08003b14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	3301      	adds	r3, #1
 8003b26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b2e:	d901      	bls.n	8003b34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e01b      	b.n	8003b6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	daf2      	bge.n	8003b22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	019b      	lsls	r3, r3, #6
 8003b44:	f043 0220 	orr.w	r2, r3, #32
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b58:	d901      	bls.n	8003b5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e006      	b.n	8003b6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d0f0      	beq.n	8003b4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3301      	adds	r3, #1
 8003b88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b90:	d901      	bls.n	8003b96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e018      	b.n	8003bc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	daf2      	bge.n	8003b84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2210      	movs	r2, #16
 8003ba6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	3301      	adds	r3, #1
 8003bac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bb4:	d901      	bls.n	8003bba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e006      	b.n	8003bc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b10      	cmp	r3, #16
 8003bc4:	d0f0      	beq.n	8003ba8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	68f9      	ldr	r1, [r7, #12]
 8003bf0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b087      	sub	sp, #28
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 0306 	and.w	r3, r3, #6
 8003c1e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d102      	bne.n	8003c2c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c26:	2300      	movs	r3, #0
 8003c28:	75fb      	strb	r3, [r7, #23]
 8003c2a:	e00a      	b.n	8003c42 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d002      	beq.n	8003c38 <USB_GetDevSpeed+0x32>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b06      	cmp	r3, #6
 8003c36:	d102      	bne.n	8003c3e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	75fb      	strb	r3, [r7, #23]
 8003c3c:	e001      	b.n	8003c42 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c3e:	230f      	movs	r3, #15
 8003c40:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	785b      	ldrb	r3, [r3, #1]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d13a      	bne.n	8003ce2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	68f9      	ldr	r1, [r7, #12]
 8003c86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d155      	bne.n	8003d50 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	791b      	ldrb	r3, [r3, #4]
 8003cbe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cc0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	059b      	lsls	r3, r3, #22
 8003cc6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	0151      	lsls	r1, r2, #5
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	440a      	add	r2, r1
 8003cd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003cd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	e036      	b.n	8003d50 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	68f9      	ldr	r1, [r7, #12]
 8003cfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d11a      	bne.n	8003d50 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	791b      	ldrb	r3, [r3, #4]
 8003d34:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d36:	430b      	orrs	r3, r1
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d4e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	785b      	ldrb	r3, [r3, #1]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d161      	bne.n	8003e40 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d92:	d11f      	bne.n	8003dd4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	0151      	lsls	r1, r2, #5
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	440a      	add	r2, r1
 8003daa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003db2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	0151      	lsls	r1, r2, #5
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	440a      	add	r2, r1
 8003dca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003dd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	2101      	movs	r1, #1
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	68f9      	ldr	r1, [r7, #12]
 8003df0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003df4:	4013      	ands	r3, r2
 8003df6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	2101      	movs	r1, #1
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	0159      	lsls	r1, r3, #5
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	440b      	add	r3, r1
 8003e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e36:	4619      	mov	r1, r3
 8003e38:	4b35      	ldr	r3, [pc, #212]	@ (8003f10 <USB_DeactivateEndpoint+0x1b0>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	600b      	str	r3, [r1, #0]
 8003e3e:	e060      	b.n	8003f02 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e56:	d11f      	bne.n	8003e98 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	0151      	lsls	r1, r2, #5
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	440a      	add	r2, r1
 8003e6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e76:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	0151      	lsls	r1, r2, #5
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	440a      	add	r2, r1
 8003e8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	68f9      	ldr	r1, [r7, #12]
 8003eb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003eb8:	4013      	ands	r3, r2
 8003eba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ec2:	69da      	ldr	r2, [r3, #28]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	2101      	movs	r1, #1
 8003ece:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed2:	041b      	lsls	r3, r3, #16
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	68f9      	ldr	r1, [r7, #12]
 8003ed8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003edc:	4013      	ands	r3, r2
 8003ede:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	0159      	lsls	r1, r3, #5
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	440b      	add	r3, r1
 8003ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003efa:	4619      	mov	r1, r3
 8003efc:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <USB_DeactivateEndpoint+0x1b4>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	ec337800 	.word	0xec337800
 8003f14:	eff37800 	.word	0xeff37800

08003f18 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	@ 0x28
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	785b      	ldrb	r3, [r3, #1]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	f040 817f 	bne.w	8004238 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d132      	bne.n	8003fa8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	0151      	lsls	r1, r2, #5
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	440a      	add	r2, r1
 8003f58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f5c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003f60:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003f64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	0151      	lsls	r1, r2, #5
 8003f78:	69fa      	ldr	r2, [r7, #28]
 8003f7a:	440a      	add	r2, r1
 8003f7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	0151      	lsls	r1, r2, #5
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	440a      	add	r2, r1
 8003f9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fa0:	0cdb      	lsrs	r3, r3, #19
 8003fa2:	04db      	lsls	r3, r3, #19
 8003fa4:	6113      	str	r3, [r2, #16]
 8003fa6:	e097      	b.n	80040d8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	0151      	lsls	r1, r2, #5
 8003fba:	69fa      	ldr	r2, [r7, #28]
 8003fbc:	440a      	add	r2, r1
 8003fbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fc2:	0cdb      	lsrs	r3, r3, #19
 8003fc4:	04db      	lsls	r3, r3, #19
 8003fc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	0151      	lsls	r1, r2, #5
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	440a      	add	r2, r1
 8003fde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fe2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003fe6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003fea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d11a      	bne.n	8004028 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d903      	bls.n	8004006 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	0151      	lsls	r1, r2, #5
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	440a      	add	r2, r1
 800401c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004020:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004024:	6113      	str	r3, [r2, #16]
 8004026:	e044      	b.n	80040b2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	4413      	add	r3, r2
 8004032:	1e5a      	subs	r2, r3, #1
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	fbb2 f3f3 	udiv	r3, r2, r3
 800403c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	8afb      	ldrh	r3, [r7, #22]
 800404e:	04d9      	lsls	r1, r3, #19
 8004050:	4ba4      	ldr	r3, [pc, #656]	@ (80042e4 <USB_EPStartXfer+0x3cc>)
 8004052:	400b      	ands	r3, r1
 8004054:	69b9      	ldr	r1, [r7, #24]
 8004056:	0148      	lsls	r0, r1, #5
 8004058:	69f9      	ldr	r1, [r7, #28]
 800405a:	4401      	add	r1, r0
 800405c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004060:	4313      	orrs	r3, r2
 8004062:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	791b      	ldrb	r3, [r3, #4]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d122      	bne.n	80040b2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	0151      	lsls	r1, r2, #5
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	440a      	add	r2, r1
 8004082:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004086:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800408a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	8afb      	ldrh	r3, [r7, #22]
 800409c:	075b      	lsls	r3, r3, #29
 800409e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80040a2:	69b9      	ldr	r1, [r7, #24]
 80040a4:	0148      	lsls	r0, r1, #5
 80040a6:	69f9      	ldr	r1, [r7, #28]
 80040a8:	4401      	add	r1, r0
 80040aa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80040ae:	4313      	orrs	r3, r2
 80040b0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c8:	69b9      	ldr	r1, [r7, #24]
 80040ca:	0148      	lsls	r0, r1, #5
 80040cc:	69f9      	ldr	r1, [r7, #28]
 80040ce:	4401      	add	r1, r0
 80040d0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80040d4:	4313      	orrs	r3, r2
 80040d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d14b      	bne.n	8004176 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040f2:	461a      	mov	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	791b      	ldrb	r3, [r3, #4]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d128      	bne.n	8004154 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410e:	2b00      	cmp	r3, #0
 8004110:	d110      	bne.n	8004134 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	0151      	lsls	r1, r2, #5
 8004124:	69fa      	ldr	r2, [r7, #28]
 8004126:	440a      	add	r2, r1
 8004128:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800412c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e00f      	b.n	8004154 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	0151      	lsls	r1, r2, #5
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	440a      	add	r2, r1
 800414a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800414e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004152:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	0151      	lsls	r1, r2, #5
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	440a      	add	r2, r1
 800416a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800416e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	e166      	b.n	8004444 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	0151      	lsls	r1, r2, #5
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	440a      	add	r2, r1
 800418c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004190:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004194:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	791b      	ldrb	r3, [r3, #4]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d015      	beq.n	80041ca <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 814e 	beq.w	8004444 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	2101      	movs	r1, #1
 80041ba:	fa01 f303 	lsl.w	r3, r1, r3
 80041be:	69f9      	ldr	r1, [r7, #28]
 80041c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041c4:	4313      	orrs	r3, r2
 80041c6:	634b      	str	r3, [r1, #52]	@ 0x34
 80041c8:	e13c      	b.n	8004444 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d110      	bne.n	80041fc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	0151      	lsls	r1, r2, #5
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	440a      	add	r2, r1
 80041f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e00f      	b.n	800421c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	0151      	lsls	r1, r2, #5
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	440a      	add	r2, r1
 8004212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800421a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	68d9      	ldr	r1, [r3, #12]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	781a      	ldrb	r2, [r3, #0]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	b298      	uxth	r0, r3
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	4603      	mov	r3, r0
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f9b9 	bl	80045a8 <USB_WritePacket>
 8004236:	e105      	b.n	8004444 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	0151      	lsls	r1, r2, #5
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	440a      	add	r2, r1
 800424e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004252:	0cdb      	lsrs	r3, r3, #19
 8004254:	04db      	lsls	r3, r3, #19
 8004256:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	0151      	lsls	r1, r2, #5
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	440a      	add	r2, r1
 800426e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004272:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004276:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800427a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d132      	bne.n	80042e8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b0:	69b9      	ldr	r1, [r7, #24]
 80042b2:	0148      	lsls	r0, r1, #5
 80042b4:	69f9      	ldr	r1, [r7, #28]
 80042b6:	4401      	add	r1, r0
 80042b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80042bc:	4313      	orrs	r3, r2
 80042be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	0151      	lsls	r1, r2, #5
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	440a      	add	r2, r1
 80042d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042de:	6113      	str	r3, [r2, #16]
 80042e0:	e062      	b.n	80043a8 <USB_EPStartXfer+0x490>
 80042e2:	bf00      	nop
 80042e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d123      	bne.n	8004338 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004306:	69b9      	ldr	r1, [r7, #24]
 8004308:	0148      	lsls	r0, r1, #5
 800430a:	69f9      	ldr	r1, [r7, #28]
 800430c:	4401      	add	r1, r0
 800430e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004312:	4313      	orrs	r3, r2
 8004314:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	0151      	lsls	r1, r2, #5
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	440a      	add	r2, r1
 800432c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004330:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004334:	6113      	str	r3, [r2, #16]
 8004336:	e037      	b.n	80043a8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4413      	add	r3, r2
 8004342:	1e5a      	subs	r2, r3, #1
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	fbb2 f3f3 	udiv	r3, r2, r3
 800434c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	8afa      	ldrh	r2, [r7, #22]
 8004354:	fb03 f202 	mul.w	r2, r3, r2
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	8afb      	ldrh	r3, [r7, #22]
 800436c:	04d9      	lsls	r1, r3, #19
 800436e:	4b38      	ldr	r3, [pc, #224]	@ (8004450 <USB_EPStartXfer+0x538>)
 8004370:	400b      	ands	r3, r1
 8004372:	69b9      	ldr	r1, [r7, #24]
 8004374:	0148      	lsls	r0, r1, #5
 8004376:	69f9      	ldr	r1, [r7, #28]
 8004378:	4401      	add	r1, r0
 800437a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800437e:	4313      	orrs	r3, r2
 8004380:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004398:	69b9      	ldr	r1, [r7, #24]
 800439a:	0148      	lsls	r0, r1, #5
 800439c:	69f9      	ldr	r1, [r7, #28]
 800439e:	4401      	add	r1, r0
 80043a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043a4:	4313      	orrs	r3, r2
 80043a6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d10d      	bne.n	80043ca <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	68d9      	ldr	r1, [r3, #12]
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c6:	460a      	mov	r2, r1
 80043c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	791b      	ldrb	r3, [r3, #4]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d128      	bne.n	8004424 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d110      	bne.n	8004404 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	0151      	lsls	r1, r2, #5
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	440a      	add	r2, r1
 80043f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e00f      	b.n	8004424 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	0151      	lsls	r1, r2, #5
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	440a      	add	r2, r1
 800441a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800441e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004422:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	0151      	lsls	r1, r2, #5
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	440a      	add	r2, r1
 800443a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800443e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004442:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3720      	adds	r7, #32
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	1ff80000 	.word	0x1ff80000

08004454 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	785b      	ldrb	r3, [r3, #1]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d14a      	bne.n	8004508 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004486:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800448a:	f040 8086 	bne.w	800459a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	7812      	ldrb	r2, [r2, #0]
 80044a2:	0151      	lsls	r1, r2, #5
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	440a      	add	r2, r1
 80044a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80044b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	7812      	ldrb	r2, [r2, #0]
 80044c6:	0151      	lsls	r1, r2, #5
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	440a      	add	r2, r1
 80044cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3301      	adds	r3, #1
 80044da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f242 7210 	movw	r2, #10000	@ 0x2710
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d902      	bls.n	80044ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
          break;
 80044ea:	e056      	b.n	800459a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004500:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004504:	d0e7      	beq.n	80044d6 <USB_EPStopXfer+0x82>
 8004506:	e048      	b.n	800459a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800451c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004520:	d13b      	bne.n	800459a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	7812      	ldrb	r2, [r2, #0]
 8004536:	0151      	lsls	r1, r2, #5
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	440a      	add	r2, r1
 800453c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004540:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004544:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	7812      	ldrb	r2, [r2, #0]
 800455a:	0151      	lsls	r1, r2, #5
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	440a      	add	r2, r1
 8004560:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004564:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004568:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3301      	adds	r3, #1
 800456e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004576:	4293      	cmp	r3, r2
 8004578:	d902      	bls.n	8004580 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	75fb      	strb	r3, [r7, #23]
          break;
 800457e:	e00c      	b.n	800459a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004594:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004598:	d0e7      	beq.n	800456a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800459a:	7dfb      	ldrb	r3, [r7, #23]
}
 800459c:	4618      	mov	r0, r3
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b089      	sub	sp, #36	@ 0x24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	4611      	mov	r1, r2
 80045b4:	461a      	mov	r2, r3
 80045b6:	460b      	mov	r3, r1
 80045b8:	71fb      	strb	r3, [r7, #7]
 80045ba:	4613      	mov	r3, r2
 80045bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80045c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d123      	bne.n	8004616 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80045ce:	88bb      	ldrh	r3, [r7, #4]
 80045d0:	3303      	adds	r3, #3
 80045d2:	089b      	lsrs	r3, r3, #2
 80045d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	e018      	b.n	800460e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	031a      	lsls	r2, r3, #12
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045e8:	461a      	mov	r2, r3
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	3301      	adds	r3, #1
 80045f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3301      	adds	r3, #1
 80045fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	3301      	adds	r3, #1
 8004600:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	3301      	adds	r3, #1
 8004606:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	3301      	adds	r3, #1
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	429a      	cmp	r2, r3
 8004614:	d3e2      	bcc.n	80045dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3724      	adds	r7, #36	@ 0x24
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004624:	b480      	push	{r7}
 8004626:	b08b      	sub	sp, #44	@ 0x2c
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	4613      	mov	r3, r2
 8004630:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800463a:	88fb      	ldrh	r3, [r7, #6]
 800463c:	089b      	lsrs	r3, r3, #2
 800463e:	b29b      	uxth	r3, r3
 8004640:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004642:	88fb      	ldrh	r3, [r7, #6]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800464a:	2300      	movs	r3, #0
 800464c:	623b      	str	r3, [r7, #32]
 800464e:	e014      	b.n	800467a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	601a      	str	r2, [r3, #0]
    pDest++;
 800465c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465e:	3301      	adds	r3, #1
 8004660:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	3301      	adds	r3, #1
 8004666:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466a:	3301      	adds	r3, #1
 800466c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	3301      	adds	r3, #1
 8004672:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	3301      	adds	r3, #1
 8004678:	623b      	str	r3, [r7, #32]
 800467a:	6a3a      	ldr	r2, [r7, #32]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	429a      	cmp	r2, r3
 8004680:	d3e6      	bcc.n	8004650 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004682:	8bfb      	ldrh	r3, [r7, #30]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01e      	beq.n	80046c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004692:	461a      	mov	r2, r3
 8004694:	f107 0310 	add.w	r3, r7, #16
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	701a      	strb	r2, [r3, #0]
      i++;
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	3301      	adds	r3, #1
 80046b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	3301      	adds	r3, #1
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80046ba:	8bfb      	ldrh	r3, [r7, #30]
 80046bc:	3b01      	subs	r3, #1
 80046be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80046c0:	8bfb      	ldrh	r3, [r7, #30]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1ea      	bne.n	800469c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	372c      	adds	r7, #44	@ 0x2c
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	785b      	ldrb	r3, [r3, #1]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d12c      	bne.n	800474a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	db12      	blt.n	8004728 <USB_EPSetStall+0x54>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00f      	beq.n	8004728 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	0151      	lsls	r1, r2, #5
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	440a      	add	r2, r1
 800471e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004722:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004726:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	0151      	lsls	r1, r2, #5
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	440a      	add	r2, r1
 800473e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004742:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	e02b      	b.n	80047a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	db12      	blt.n	8004782 <USB_EPSetStall+0xae>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00f      	beq.n	8004782 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	0151      	lsls	r1, r2, #5
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	440a      	add	r2, r1
 8004778:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800477c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004780:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	0151      	lsls	r1, r2, #5
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	440a      	add	r2, r1
 8004798:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800479c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80047a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d128      	bne.n	800481e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	0151      	lsls	r1, r2, #5
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	440a      	add	r2, r1
 80047e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80047ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	791b      	ldrb	r3, [r3, #4]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d003      	beq.n	80047fc <USB_EPClearStall+0x4c>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	791b      	ldrb	r3, [r3, #4]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d138      	bne.n	800486e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	0151      	lsls	r1, r2, #5
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	440a      	add	r2, r1
 8004812:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	e027      	b.n	800486e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	440a      	add	r2, r1
 8004834:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004838:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800483c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	791b      	ldrb	r3, [r3, #4]
 8004842:	2b03      	cmp	r3, #3
 8004844:	d003      	beq.n	800484e <USB_EPClearStall+0x9e>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	791b      	ldrb	r3, [r3, #4]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d10f      	bne.n	800486e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	0151      	lsls	r1, r2, #5
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	440a      	add	r2, r1
 8004864:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800486c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800489a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800489e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80048b0:	68f9      	ldr	r1, [r7, #12]
 80048b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80048e2:	f023 0303 	bic.w	r3, r3, #3
 80048e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048f6:	f023 0302 	bic.w	r3, r3, #2
 80048fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004924:	f023 0303 	bic.w	r3, r3, #3
 8004928:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004938:	f043 0302 	orr.w	r3, r3, #2
 800493c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4013      	ands	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004964:	68fb      	ldr	r3, [r7, #12]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004972:	b480      	push	{r7}
 8004974:	b085      	sub	sp, #20
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	4013      	ands	r3, r2
 8004994:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	0c1b      	lsrs	r3, r3, #16
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b085      	sub	sp, #20
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	4013      	ands	r3, r2
 80049c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	b29b      	uxth	r3, r3
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	460b      	mov	r3, r1
 80049e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80049ea:	78fb      	ldrb	r3, [r7, #3]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	4013      	ands	r3, r2
 8004a06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a08:	68bb      	ldr	r3, [r7, #8]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b087      	sub	sp, #28
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	fa22 f303 	lsr.w	r3, r2, r3
 8004a46:	01db      	lsls	r3, r3, #7
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4013      	ands	r3, r2
 8004a62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a64:	68bb      	ldr	r3, [r7, #8]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004aa8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004aac:	f023 0307 	bic.w	r3, r3, #7
 8004ab0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	460b      	mov	r3, r1
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	333c      	adds	r3, #60	@ 0x3c
 8004aea:	3304      	adds	r3, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	4a26      	ldr	r2, [pc, #152]	@ (8004b8c <USB_EP0_OutStart+0xb8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d90a      	bls.n	8004b0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b08:	d101      	bne.n	8004b0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e037      	b.n	8004b7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b14:	461a      	mov	r2, r3
 8004b16:	2300      	movs	r3, #0
 8004b18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b3c:	f043 0318 	orr.w	r3, r3, #24
 8004b40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b50:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004b54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004b56:	7afb      	ldrb	r3, [r7, #11]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d10f      	bne.n	8004b7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b62:	461a      	mov	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b76:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004b7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	4f54300a 	.word	0x4f54300a

08004b90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ba8:	d901      	bls.n	8004bae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e022      	b.n	8004bf4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	daf2      	bge.n	8004b9c <USB_CoreReset+0xc>

  count = 10U;
 8004bb6:	230a      	movs	r3, #10
 8004bb8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004bba:	e002      	b.n	8004bc2 <USB_CoreReset+0x32>
  {
    count--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1f9      	bne.n	8004bbc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	f043 0201 	orr.w	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004be0:	d901      	bls.n	8004be6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e006      	b.n	8004bf4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d0f0      	beq.n	8004bd4 <USB_CoreReset+0x44>

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004c0c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004c10:	f002 fc56 	bl	80074c0 <USBD_static_malloc>
 8004c14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d109      	bne.n	8004c30 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	32b0      	adds	r2, #176	@ 0xb0
 8004c26:	2100      	movs	r1, #0
 8004c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e0d4      	b.n	8004dda <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004c30:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004c34:	2100      	movs	r1, #0
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f002 fe90 	bl	800795c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	32b0      	adds	r2, #176	@ 0xb0
 8004c46:	68f9      	ldr	r1, [r7, #12]
 8004c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	32b0      	adds	r2, #176	@ 0xb0
 8004c56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	7c1b      	ldrb	r3, [r3, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d138      	bne.n	8004cda <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004c68:	4b5e      	ldr	r3, [pc, #376]	@ (8004de4 <USBD_CDC_Init+0x1e4>)
 8004c6a:	7819      	ldrb	r1, [r3, #0]
 8004c6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c70:	2202      	movs	r2, #2
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f002 fb01 	bl	800727a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004c78:	4b5a      	ldr	r3, [pc, #360]	@ (8004de4 <USBD_CDC_Init+0x1e4>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	f003 020f 	and.w	r2, r3, #15
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	3323      	adds	r3, #35	@ 0x23
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004c92:	4b55      	ldr	r3, [pc, #340]	@ (8004de8 <USBD_CDC_Init+0x1e8>)
 8004c94:	7819      	ldrb	r1, [r3, #0]
 8004c96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f002 faec 	bl	800727a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004ca2:	4b51      	ldr	r3, [pc, #324]	@ (8004de8 <USBD_CDC_Init+0x1e8>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	f003 020f 	and.w	r2, r3, #15
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004cba:	2201      	movs	r2, #1
 8004cbc:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004cbe:	4b4b      	ldr	r3, [pc, #300]	@ (8004dec <USBD_CDC_Init+0x1ec>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	f003 020f 	and.w	r2, r3, #15
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	331c      	adds	r3, #28
 8004cd4:	2210      	movs	r2, #16
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	e035      	b.n	8004d46 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004cda:	4b42      	ldr	r3, [pc, #264]	@ (8004de4 <USBD_CDC_Init+0x1e4>)
 8004cdc:	7819      	ldrb	r1, [r3, #0]
 8004cde:	2340      	movs	r3, #64	@ 0x40
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f002 fac9 	bl	800727a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8004de4 <USBD_CDC_Init+0x1e4>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	f003 020f 	and.w	r2, r3, #15
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	3323      	adds	r3, #35	@ 0x23
 8004cfe:	2201      	movs	r2, #1
 8004d00:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004d02:	4b39      	ldr	r3, [pc, #228]	@ (8004de8 <USBD_CDC_Init+0x1e8>)
 8004d04:	7819      	ldrb	r1, [r3, #0]
 8004d06:	2340      	movs	r3, #64	@ 0x40
 8004d08:	2202      	movs	r2, #2
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f002 fab5 	bl	800727a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004d10:	4b35      	ldr	r3, [pc, #212]	@ (8004de8 <USBD_CDC_Init+0x1e8>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	f003 020f 	and.w	r2, r3, #15
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004d28:	2201      	movs	r2, #1
 8004d2a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8004dec <USBD_CDC_Init+0x1ec>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	f003 020f 	and.w	r2, r3, #15
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	331c      	adds	r3, #28
 8004d42:	2210      	movs	r2, #16
 8004d44:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d46:	4b29      	ldr	r3, [pc, #164]	@ (8004dec <USBD_CDC_Init+0x1ec>)
 8004d48:	7819      	ldrb	r1, [r3, #0]
 8004d4a:	2308      	movs	r3, #8
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f002 fa93 	bl	800727a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004d54:	4b25      	ldr	r3, [pc, #148]	@ (8004dec <USBD_CDC_Init+0x1ec>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	f003 020f 	and.w	r2, r3, #15
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	3323      	adds	r3, #35	@ 0x23
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	33b0      	adds	r3, #176	@ 0xb0
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004da4:	2302      	movs	r3, #2
 8004da6:	e018      	b.n	8004dda <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	7c1b      	ldrb	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004db0:	4b0d      	ldr	r3, [pc, #52]	@ (8004de8 <USBD_CDC_Init+0x1e8>)
 8004db2:	7819      	ldrb	r1, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004dba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f002 fb4a 	bl	8007458 <USBD_LL_PrepareReceive>
 8004dc4:	e008      	b.n	8004dd8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004dc6:	4b08      	ldr	r3, [pc, #32]	@ (8004de8 <USBD_CDC_Init+0x1e8>)
 8004dc8:	7819      	ldrb	r1, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004dd0:	2340      	movs	r3, #64	@ 0x40
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f002 fb40 	bl	8007458 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	2000010b 	.word	0x2000010b
 8004de8:	2000010c 	.word	0x2000010c
 8004dec:	2000010d 	.word	0x2000010d

08004df0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8004ee8 <USBD_CDC_DeInit+0xf8>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	4619      	mov	r1, r3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f002 fa5f 	bl	80072c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004e08:	4b37      	ldr	r3, [pc, #220]	@ (8004ee8 <USBD_CDC_DeInit+0xf8>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	f003 020f 	and.w	r2, r3, #15
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3323      	adds	r3, #35	@ 0x23
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004e22:	4b32      	ldr	r3, [pc, #200]	@ (8004eec <USBD_CDC_DeInit+0xfc>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	4619      	mov	r1, r3
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f002 fa4c 	bl	80072c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8004eec <USBD_CDC_DeInit+0xfc>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	f003 020f 	and.w	r2, r3, #15
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004e4a:	4b29      	ldr	r3, [pc, #164]	@ (8004ef0 <USBD_CDC_DeInit+0x100>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f002 fa38 	bl	80072c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004e56:	4b26      	ldr	r3, [pc, #152]	@ (8004ef0 <USBD_CDC_DeInit+0x100>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	f003 020f 	and.w	r2, r3, #15
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	3323      	adds	r3, #35	@ 0x23
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004e70:	4b1f      	ldr	r3, [pc, #124]	@ (8004ef0 <USBD_CDC_DeInit+0x100>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	f003 020f 	and.w	r2, r3, #15
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	331c      	adds	r3, #28
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	32b0      	adds	r2, #176	@ 0xb0
 8004e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01f      	beq.n	8004edc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	33b0      	adds	r3, #176	@ 0xb0
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	32b0      	adds	r2, #176	@ 0xb0
 8004eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f002 fb0c 	bl	80074dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	32b0      	adds	r2, #176	@ 0xb0
 8004ece:	2100      	movs	r1, #0
 8004ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	2000010b 	.word	0x2000010b
 8004eec:	2000010c 	.word	0x2000010c
 8004ef0:	2000010d 	.word	0x2000010d

08004ef4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	32b0      	adds	r2, #176	@ 0xb0
 8004f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e0bf      	b.n	80050a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d050      	beq.n	8004fd2 <USBD_CDC_Setup+0xde>
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	f040 80af 	bne.w	8005094 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	88db      	ldrh	r3, [r3, #6]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d03a      	beq.n	8004fb4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b25b      	sxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	da1b      	bge.n	8004f80 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	33b0      	adds	r3, #176	@ 0xb0
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004f5e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	88d2      	ldrh	r2, [r2, #6]
 8004f64:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	88db      	ldrh	r3, [r3, #6]
 8004f6a:	2b07      	cmp	r3, #7
 8004f6c:	bf28      	it	cs
 8004f6e:	2307      	movcs	r3, #7
 8004f70:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	89fa      	ldrh	r2, [r7, #14]
 8004f76:	4619      	mov	r1, r3
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f001 fd69 	bl	8006a50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004f7e:	e090      	b.n	80050a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	785a      	ldrb	r2, [r3, #1]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	88db      	ldrh	r3, [r3, #6]
 8004f8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004f90:	d803      	bhi.n	8004f9a <USBD_CDC_Setup+0xa6>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	88db      	ldrh	r3, [r3, #6]
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	e000      	b.n	8004f9c <USBD_CDC_Setup+0xa8>
 8004f9a:	2240      	movs	r2, #64	@ 0x40
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004fa2:	6939      	ldr	r1, [r7, #16]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004faa:	461a      	mov	r2, r3
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f001 fd7e 	bl	8006aae <USBD_CtlPrepareRx>
      break;
 8004fb2:	e076      	b.n	80050a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	33b0      	adds	r3, #176	@ 0xb0
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	7850      	ldrb	r0, [r2, #1]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	6839      	ldr	r1, [r7, #0]
 8004fce:	4798      	blx	r3
      break;
 8004fd0:	e067      	b.n	80050a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	785b      	ldrb	r3, [r3, #1]
 8004fd6:	2b0b      	cmp	r3, #11
 8004fd8:	d851      	bhi.n	800507e <USBD_CDC_Setup+0x18a>
 8004fda:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe0 <USBD_CDC_Setup+0xec>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08005011 	.word	0x08005011
 8004fe4:	0800508d 	.word	0x0800508d
 8004fe8:	0800507f 	.word	0x0800507f
 8004fec:	0800507f 	.word	0x0800507f
 8004ff0:	0800507f 	.word	0x0800507f
 8004ff4:	0800507f 	.word	0x0800507f
 8004ff8:	0800507f 	.word	0x0800507f
 8004ffc:	0800507f 	.word	0x0800507f
 8005000:	0800507f 	.word	0x0800507f
 8005004:	0800507f 	.word	0x0800507f
 8005008:	0800503b 	.word	0x0800503b
 800500c:	08005065 	.word	0x08005065
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b03      	cmp	r3, #3
 800501a:	d107      	bne.n	800502c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800501c:	f107 030a 	add.w	r3, r7, #10
 8005020:	2202      	movs	r2, #2
 8005022:	4619      	mov	r1, r3
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f001 fd13 	bl	8006a50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800502a:	e032      	b.n	8005092 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800502c:	6839      	ldr	r1, [r7, #0]
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f001 fc91 	bl	8006956 <USBD_CtlError>
            ret = USBD_FAIL;
 8005034:	2303      	movs	r3, #3
 8005036:	75fb      	strb	r3, [r7, #23]
          break;
 8005038:	e02b      	b.n	8005092 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b03      	cmp	r3, #3
 8005044:	d107      	bne.n	8005056 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005046:	f107 030d 	add.w	r3, r7, #13
 800504a:	2201      	movs	r2, #1
 800504c:	4619      	mov	r1, r3
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f001 fcfe 	bl	8006a50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005054:	e01d      	b.n	8005092 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005056:	6839      	ldr	r1, [r7, #0]
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f001 fc7c 	bl	8006956 <USBD_CtlError>
            ret = USBD_FAIL;
 800505e:	2303      	movs	r3, #3
 8005060:	75fb      	strb	r3, [r7, #23]
          break;
 8005062:	e016      	b.n	8005092 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b03      	cmp	r3, #3
 800506e:	d00f      	beq.n	8005090 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005070:	6839      	ldr	r1, [r7, #0]
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f001 fc6f 	bl	8006956 <USBD_CtlError>
            ret = USBD_FAIL;
 8005078:	2303      	movs	r3, #3
 800507a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800507c:	e008      	b.n	8005090 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800507e:	6839      	ldr	r1, [r7, #0]
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f001 fc68 	bl	8006956 <USBD_CtlError>
          ret = USBD_FAIL;
 8005086:	2303      	movs	r3, #3
 8005088:	75fb      	strb	r3, [r7, #23]
          break;
 800508a:	e002      	b.n	8005092 <USBD_CDC_Setup+0x19e>
          break;
 800508c:	bf00      	nop
 800508e:	e008      	b.n	80050a2 <USBD_CDC_Setup+0x1ae>
          break;
 8005090:	bf00      	nop
      }
      break;
 8005092:	e006      	b.n	80050a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005094:	6839      	ldr	r1, [r7, #0]
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f001 fc5d 	bl	8006956 <USBD_CtlError>
      ret = USBD_FAIL;
 800509c:	2303      	movs	r3, #3
 800509e:	75fb      	strb	r3, [r7, #23]
      break;
 80050a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80050a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80050be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	32b0      	adds	r2, #176	@ 0xb0
 80050ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e065      	b.n	80051a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	32b0      	adds	r2, #176	@ 0xb0
 80050e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80050e6:	78fb      	ldrb	r3, [r7, #3]
 80050e8:	f003 020f 	and.w	r2, r3, #15
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	3314      	adds	r3, #20
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d02f      	beq.n	8005160 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005100:	78fb      	ldrb	r3, [r7, #3]
 8005102:	f003 020f 	and.w	r2, r3, #15
 8005106:	6879      	ldr	r1, [r7, #4]
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	3314      	adds	r3, #20
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	78fb      	ldrb	r3, [r7, #3]
 8005118:	f003 010f 	and.w	r1, r3, #15
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	460b      	mov	r3, r1
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	440b      	add	r3, r1
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4403      	add	r3, r0
 8005128:	331c      	adds	r3, #28
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005136:	2b00      	cmp	r3, #0
 8005138:	d112      	bne.n	8005160 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	f003 020f 	and.w	r2, r3, #15
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	3314      	adds	r3, #20
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005152:	78f9      	ldrb	r1, [r7, #3]
 8005154:	2300      	movs	r3, #0
 8005156:	2200      	movs	r2, #0
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f002 f95c 	bl	8007416 <USBD_LL_Transmit>
 800515e:	e01f      	b.n	80051a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2200      	movs	r2, #0
 8005164:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	33b0      	adds	r3, #176	@ 0xb0
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d010      	beq.n	80051a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	33b0      	adds	r3, #176	@ 0xb0
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800519c:	78fa      	ldrb	r2, [r7, #3]
 800519e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	460b      	mov	r3, r1
 80051b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	32b0      	adds	r2, #176	@ 0xb0
 80051c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	32b0      	adds	r2, #176	@ 0xb0
 80051d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80051d8:	2303      	movs	r3, #3
 80051da:	e01a      	b.n	8005212 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f002 f95a 	bl	800749a <USBD_LL_GetRxDataSize>
 80051e6:	4602      	mov	r2, r0
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	33b0      	adds	r3, #176	@ 0xb0
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800520c:	4611      	mov	r1, r2
 800520e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	32b0      	adds	r2, #176	@ 0xb0
 800522c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005230:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005238:	2303      	movs	r3, #3
 800523a:	e024      	b.n	8005286 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	33b0      	adds	r3, #176	@ 0xb0
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d019      	beq.n	8005284 <USBD_CDC_EP0_RxReady+0x6a>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005256:	2bff      	cmp	r3, #255	@ 0xff
 8005258:	d014      	beq.n	8005284 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	33b0      	adds	r3, #176	@ 0xb0
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005272:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800527a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	22ff      	movs	r2, #255	@ 0xff
 8005280:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005298:	2182      	movs	r1, #130	@ 0x82
 800529a:	4818      	ldr	r0, [pc, #96]	@ (80052fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800529c:	f000 fd22 	bl	8005ce4 <USBD_GetEpDesc>
 80052a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80052a2:	2101      	movs	r1, #1
 80052a4:	4815      	ldr	r0, [pc, #84]	@ (80052fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80052a6:	f000 fd1d 	bl	8005ce4 <USBD_GetEpDesc>
 80052aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80052ac:	2181      	movs	r1, #129	@ 0x81
 80052ae:	4813      	ldr	r0, [pc, #76]	@ (80052fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80052b0:	f000 fd18 	bl	8005ce4 <USBD_GetEpDesc>
 80052b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2210      	movs	r2, #16
 80052c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d006      	beq.n	80052d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052d0:	711a      	strb	r2, [r3, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d006      	beq.n	80052ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052e4:	711a      	strb	r2, [r3, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2243      	movs	r2, #67	@ 0x43
 80052ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80052f0:	4b02      	ldr	r3, [pc, #8]	@ (80052fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	200000c8 	.word	0x200000c8

08005300 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005308:	2182      	movs	r1, #130	@ 0x82
 800530a:	4818      	ldr	r0, [pc, #96]	@ (800536c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800530c:	f000 fcea 	bl	8005ce4 <USBD_GetEpDesc>
 8005310:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005312:	2101      	movs	r1, #1
 8005314:	4815      	ldr	r0, [pc, #84]	@ (800536c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005316:	f000 fce5 	bl	8005ce4 <USBD_GetEpDesc>
 800531a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800531c:	2181      	movs	r1, #129	@ 0x81
 800531e:	4813      	ldr	r0, [pc, #76]	@ (800536c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005320:	f000 fce0 	bl	8005ce4 <USBD_GetEpDesc>
 8005324:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2210      	movs	r2, #16
 8005330:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d006      	beq.n	8005346 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2200      	movs	r2, #0
 800533c:	711a      	strb	r2, [r3, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f042 0202 	orr.w	r2, r2, #2
 8005344:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d006      	beq.n	800535a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	711a      	strb	r2, [r3, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f042 0202 	orr.w	r2, r2, #2
 8005358:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2243      	movs	r2, #67	@ 0x43
 800535e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005360:	4b02      	ldr	r3, [pc, #8]	@ (800536c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	200000c8 	.word	0x200000c8

08005370 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005378:	2182      	movs	r1, #130	@ 0x82
 800537a:	4818      	ldr	r0, [pc, #96]	@ (80053dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800537c:	f000 fcb2 	bl	8005ce4 <USBD_GetEpDesc>
 8005380:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005382:	2101      	movs	r1, #1
 8005384:	4815      	ldr	r0, [pc, #84]	@ (80053dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005386:	f000 fcad 	bl	8005ce4 <USBD_GetEpDesc>
 800538a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800538c:	2181      	movs	r1, #129	@ 0x81
 800538e:	4813      	ldr	r0, [pc, #76]	@ (80053dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005390:	f000 fca8 	bl	8005ce4 <USBD_GetEpDesc>
 8005394:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2210      	movs	r2, #16
 80053a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d006      	beq.n	80053b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053b0:	711a      	strb	r2, [r3, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d006      	beq.n	80053ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053c4:	711a      	strb	r2, [r3, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2243      	movs	r2, #67	@ 0x43
 80053ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80053d0:	4b02      	ldr	r3, [pc, #8]	@ (80053dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	200000c8 	.word	0x200000c8

080053e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	220a      	movs	r2, #10
 80053ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80053ee:	4b03      	ldr	r3, [pc, #12]	@ (80053fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	20000084 	.word	0x20000084

08005400 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005410:	2303      	movs	r3, #3
 8005412:	e009      	b.n	8005428 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	33b0      	adds	r3, #176	@ 0xb0
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	32b0      	adds	r2, #176	@ 0xb0
 800544a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800544e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005456:	2303      	movs	r3, #3
 8005458:	e008      	b.n	800546c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	371c      	adds	r7, #28
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	32b0      	adds	r2, #176	@ 0xb0
 800548c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005490:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005498:	2303      	movs	r3, #3
 800549a:	e004      	b.n	80054a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
	...

080054b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	32b0      	adds	r2, #176	@ 0xb0
 80054c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	32b0      	adds	r2, #176	@ 0xb0
 80054d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80054de:	2303      	movs	r3, #3
 80054e0:	e018      	b.n	8005514 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	7c1b      	ldrb	r3, [r3, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10a      	bne.n	8005500 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054ea:	4b0c      	ldr	r3, [pc, #48]	@ (800551c <USBD_CDC_ReceivePacket+0x68>)
 80054ec:	7819      	ldrb	r1, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80054f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f001 ffad 	bl	8007458 <USBD_LL_PrepareReceive>
 80054fe:	e008      	b.n	8005512 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005500:	4b06      	ldr	r3, [pc, #24]	@ (800551c <USBD_CDC_ReceivePacket+0x68>)
 8005502:	7819      	ldrb	r1, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800550a:	2340      	movs	r3, #64	@ 0x40
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f001 ffa3 	bl	8007458 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	2000010c 	.word	0x2000010c

08005520 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	4613      	mov	r3, r2
 800552c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005534:	2303      	movs	r3, #3
 8005536:	e01f      	b.n	8005578 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	79fa      	ldrb	r2, [r7, #7]
 800556a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f001 fe1d 	bl	80071ac <USBD_LL_Init>
 8005572:	4603      	mov	r3, r0
 8005574:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005576:	7dfb      	ldrb	r3, [r7, #23]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005594:	2303      	movs	r3, #3
 8005596:	e025      	b.n	80055e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	32ae      	adds	r2, #174	@ 0xae
 80055aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00f      	beq.n	80055d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	32ae      	adds	r2, #174	@ 0xae
 80055be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c4:	f107 020e 	add.w	r2, r7, #14
 80055c8:	4610      	mov	r0, r2
 80055ca:	4798      	blx	r3
 80055cc:	4602      	mov	r2, r0
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f001 fe25 	bl	8007244 <USBD_LL_Start>
 80055fa:	4603      	mov	r3, r0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800560c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800560e:	4618      	mov	r0, r3
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	460b      	mov	r3, r1
 8005624:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d009      	beq.n	8005648 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	78fa      	ldrb	r2, [r7, #3]
 800563e:	4611      	mov	r1, r2
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	4798      	blx	r3
 8005644:	4603      	mov	r3, r0
 8005646:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005648:	7bfb      	ldrb	r3, [r7, #15]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	460b      	mov	r3, r1
 800565c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	78fa      	ldrb	r2, [r7, #3]
 800566c:	4611      	mov	r1, r2
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	4798      	blx	r3
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005678:	2303      	movs	r3, #3
 800567a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800567c:	7bfb      	ldrb	r3, [r7, #15]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f001 f922 	bl	80068e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80056ac:	461a      	mov	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d01a      	beq.n	80056f8 <USBD_LL_SetupStage+0x72>
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d822      	bhi.n	800570c <USBD_LL_SetupStage+0x86>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <USBD_LL_SetupStage+0x4a>
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d00a      	beq.n	80056e4 <USBD_LL_SetupStage+0x5e>
 80056ce:	e01d      	b.n	800570c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80056d6:	4619      	mov	r1, r3
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fb77 	bl	8005dcc <USBD_StdDevReq>
 80056de:	4603      	mov	r3, r0
 80056e0:	73fb      	strb	r3, [r7, #15]
      break;
 80056e2:	e020      	b.n	8005726 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fbdf 	bl	8005eb0 <USBD_StdItfReq>
 80056f2:	4603      	mov	r3, r0
 80056f4:	73fb      	strb	r3, [r7, #15]
      break;
 80056f6:	e016      	b.n	8005726 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fc41 	bl	8005f88 <USBD_StdEPReq>
 8005706:	4603      	mov	r3, r0
 8005708:	73fb      	strb	r3, [r7, #15]
      break;
 800570a:	e00c      	b.n	8005726 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005712:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005716:	b2db      	uxtb	r3, r3
 8005718:	4619      	mov	r1, r3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f001 fdf2 	bl	8007304 <USBD_LL_StallEP>
 8005720:	4603      	mov	r3, r0
 8005722:	73fb      	strb	r3, [r7, #15]
      break;
 8005724:	bf00      	nop
  }

  return ret;
 8005726:	7bfb      	ldrb	r3, [r7, #15]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	460b      	mov	r3, r1
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005742:	7afb      	ldrb	r3, [r7, #11]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d177      	bne.n	8005838 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800574e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005756:	2b03      	cmp	r3, #3
 8005758:	f040 80a1 	bne.w	800589e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	8992      	ldrh	r2, [r2, #12]
 8005764:	4293      	cmp	r3, r2
 8005766:	d91c      	bls.n	80057a2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	8992      	ldrh	r2, [r2, #12]
 8005770:	1a9a      	subs	r2, r3, r2
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	8992      	ldrh	r2, [r2, #12]
 800577e:	441a      	add	r2, r3
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	6919      	ldr	r1, [r3, #16]
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	899b      	ldrh	r3, [r3, #12]
 800578c:	461a      	mov	r2, r3
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	4293      	cmp	r3, r2
 8005794:	bf38      	it	cc
 8005796:	4613      	movcc	r3, r2
 8005798:	461a      	mov	r2, r3
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f001 f9a8 	bl	8006af0 <USBD_CtlContinueRx>
 80057a0:	e07d      	b.n	800589e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80057a8:	f003 031f 	and.w	r3, r3, #31
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d014      	beq.n	80057da <USBD_LL_DataOutStage+0xaa>
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d81d      	bhi.n	80057f0 <USBD_LL_DataOutStage+0xc0>
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <USBD_LL_DataOutStage+0x8e>
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d003      	beq.n	80057c4 <USBD_LL_DataOutStage+0x94>
 80057bc:	e018      	b.n	80057f0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	75bb      	strb	r3, [r7, #22]
            break;
 80057c2:	e018      	b.n	80057f6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	4619      	mov	r1, r3
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fa6e 	bl	8005cb0 <USBD_CoreFindIF>
 80057d4:	4603      	mov	r3, r0
 80057d6:	75bb      	strb	r3, [r7, #22]
            break;
 80057d8:	e00d      	b.n	80057f6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	4619      	mov	r1, r3
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fa70 	bl	8005cca <USBD_CoreFindEP>
 80057ea:	4603      	mov	r3, r0
 80057ec:	75bb      	strb	r3, [r7, #22]
            break;
 80057ee:	e002      	b.n	80057f6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	75bb      	strb	r3, [r7, #22]
            break;
 80057f4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80057f6:	7dbb      	ldrb	r3, [r7, #22]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d119      	bne.n	8005830 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b03      	cmp	r3, #3
 8005806:	d113      	bne.n	8005830 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005808:	7dba      	ldrb	r2, [r7, #22]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	32ae      	adds	r2, #174	@ 0xae
 800580e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00b      	beq.n	8005830 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8005818:	7dba      	ldrb	r2, [r7, #22]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005820:	7dba      	ldrb	r2, [r7, #22]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	32ae      	adds	r2, #174	@ 0xae
 8005826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f001 f96e 	bl	8006b12 <USBD_CtlSendStatus>
 8005836:	e032      	b.n	800589e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005838:	7afb      	ldrb	r3, [r7, #11]
 800583a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800583e:	b2db      	uxtb	r3, r3
 8005840:	4619      	mov	r1, r3
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fa41 	bl	8005cca <USBD_CoreFindEP>
 8005848:	4603      	mov	r3, r0
 800584a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800584c:	7dbb      	ldrb	r3, [r7, #22]
 800584e:	2bff      	cmp	r3, #255	@ 0xff
 8005850:	d025      	beq.n	800589e <USBD_LL_DataOutStage+0x16e>
 8005852:	7dbb      	ldrb	r3, [r7, #22]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d122      	bne.n	800589e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b03      	cmp	r3, #3
 8005862:	d117      	bne.n	8005894 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005864:	7dba      	ldrb	r2, [r7, #22]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	32ae      	adds	r2, #174	@ 0xae
 800586a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00f      	beq.n	8005894 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8005874:	7dba      	ldrb	r2, [r7, #22]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800587c:	7dba      	ldrb	r2, [r7, #22]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	32ae      	adds	r2, #174	@ 0xae
 8005882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	7afa      	ldrb	r2, [r7, #11]
 800588a:	4611      	mov	r1, r2
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	4798      	blx	r3
 8005890:	4603      	mov	r3, r0
 8005892:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005894:	7dfb      	ldrb	r3, [r7, #23]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	e000      	b.n	80058a0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	460b      	mov	r3, r1
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80058b6:	7afb      	ldrb	r3, [r7, #11]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d178      	bne.n	80059ae <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3314      	adds	r3, #20
 80058c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d163      	bne.n	8005994 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	8992      	ldrh	r2, [r2, #12]
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d91c      	bls.n	8005912 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	8992      	ldrh	r2, [r2, #12]
 80058e0:	1a9a      	subs	r2, r3, r2
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	8992      	ldrh	r2, [r2, #12]
 80058ee:	441a      	add	r2, r3
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	6919      	ldr	r1, [r3, #16]
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	461a      	mov	r2, r3
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f001 f8c4 	bl	8006a8c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005904:	2300      	movs	r3, #0
 8005906:	2200      	movs	r2, #0
 8005908:	2100      	movs	r1, #0
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f001 fda4 	bl	8007458 <USBD_LL_PrepareReceive>
 8005910:	e040      	b.n	8005994 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	899b      	ldrh	r3, [r3, #12]
 8005916:	461a      	mov	r2, r3
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	429a      	cmp	r2, r3
 800591e:	d11c      	bne.n	800595a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005928:	4293      	cmp	r3, r2
 800592a:	d316      	bcc.n	800595a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005936:	429a      	cmp	r2, r3
 8005938:	d20f      	bcs.n	800595a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800593a:	2200      	movs	r2, #0
 800593c:	2100      	movs	r1, #0
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f001 f8a4 	bl	8006a8c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800594c:	2300      	movs	r3, #0
 800594e:	2200      	movs	r2, #0
 8005950:	2100      	movs	r1, #0
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f001 fd80 	bl	8007458 <USBD_LL_PrepareReceive>
 8005958:	e01c      	b.n	8005994 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b03      	cmp	r3, #3
 8005964:	d10f      	bne.n	8005986 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005986:	2180      	movs	r1, #128	@ 0x80
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f001 fcbb 	bl	8007304 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f001 f8d2 	bl	8006b38 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d03a      	beq.n	8005a14 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f7ff fe30 	bl	8005604 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80059ac:	e032      	b.n	8005a14 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80059ae:	7afb      	ldrb	r3, [r7, #11]
 80059b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	4619      	mov	r1, r3
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 f986 	bl	8005cca <USBD_CoreFindEP>
 80059be:	4603      	mov	r3, r0
 80059c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059c2:	7dfb      	ldrb	r3, [r7, #23]
 80059c4:	2bff      	cmp	r3, #255	@ 0xff
 80059c6:	d025      	beq.n	8005a14 <USBD_LL_DataInStage+0x16c>
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d122      	bne.n	8005a14 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d11c      	bne.n	8005a14 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80059da:	7dfa      	ldrb	r2, [r7, #23]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	32ae      	adds	r2, #174	@ 0xae
 80059e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d014      	beq.n	8005a14 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80059ea:	7dfa      	ldrb	r2, [r7, #23]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80059f2:	7dfa      	ldrb	r2, [r7, #23]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	32ae      	adds	r2, #174	@ 0xae
 80059f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	7afa      	ldrb	r2, [r7, #11]
 8005a00:	4611      	mov	r1, r2
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	4798      	blx	r3
 8005a06:	4603      	mov	r3, r0
 8005a08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005a0a:	7dbb      	ldrb	r3, [r7, #22]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8005a10:	7dbb      	ldrb	r3, [r7, #22]
 8005a12:	e000      	b.n	8005a16 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d014      	beq.n	8005a84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00e      	beq.n	8005a84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6852      	ldr	r2, [r2, #4]
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	4611      	mov	r1, r2
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	4798      	blx	r3
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005a80:	2303      	movs	r3, #3
 8005a82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a84:	2340      	movs	r3, #64	@ 0x40
 8005a86:	2200      	movs	r2, #0
 8005a88:	2100      	movs	r1, #0
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f001 fbf5 	bl	800727a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2240      	movs	r2, #64	@ 0x40
 8005a9c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005aa0:	2340      	movs	r3, #64	@ 0x40
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2180      	movs	r1, #128	@ 0x80
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f001 fbe7 	bl	800727a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2240      	movs	r2, #64	@ 0x40
 8005ab8:	841a      	strh	r2, [r3, #32]

  return ret;
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	78fa      	ldrb	r2, [r7, #3]
 8005ad4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d006      	beq.n	8005b06 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2204      	movs	r2, #4
 8005b0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d106      	bne.n	8005b3e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d110      	bne.n	8005b82 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00b      	beq.n	8005b82 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d005      	beq.n	8005b82 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	32ae      	adds	r2, #174	@ 0xae
 8005ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e01c      	b.n	8005be8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d115      	bne.n	8005be6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	32ae      	adds	r2, #174	@ 0xae
 8005bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00b      	beq.n	8005be6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	32ae      	adds	r2, #174	@ 0xae
 8005bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	78fa      	ldrb	r2, [r7, #3]
 8005be0:	4611      	mov	r1, r2
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	32ae      	adds	r2, #174	@ 0xae
 8005c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e01c      	b.n	8005c4c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d115      	bne.n	8005c4a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	32ae      	adds	r2, #174	@ 0xae
 8005c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00b      	beq.n	8005c4a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	32ae      	adds	r2, #174	@ 0xae
 8005c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c42:	78fa      	ldrb	r2, [r7, #3]
 8005c44:	4611      	mov	r1, r2
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00e      	beq.n	8005ca6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6852      	ldr	r2, [r2, #4]
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	4611      	mov	r1, r2
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	4798      	blx	r3
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005cbc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005cd6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	885b      	ldrh	r3, [r3, #2]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	7812      	ldrb	r2, [r2, #0]
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d91f      	bls.n	8005d4a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005d10:	e013      	b.n	8005d3a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005d12:	f107 030a 	add.w	r3, r7, #10
 8005d16:	4619      	mov	r1, r3
 8005d18:	6978      	ldr	r0, [r7, #20]
 8005d1a:	f000 f81b 	bl	8005d54 <USBD_GetNextDesc>
 8005d1e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	2b05      	cmp	r3, #5
 8005d26:	d108      	bne.n	8005d3a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	789b      	ldrb	r3, [r3, #2]
 8005d30:	78fa      	ldrb	r2, [r7, #3]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d008      	beq.n	8005d48 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	885b      	ldrh	r3, [r3, #2]
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	897b      	ldrh	r3, [r7, #10]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d8e5      	bhi.n	8005d12 <USBD_GetEpDesc+0x2e>
 8005d46:	e000      	b.n	8005d4a <USBD_GetEpDesc+0x66>
          break;
 8005d48:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005d4a:	693b      	ldr	r3, [r7, #16]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	7812      	ldrb	r2, [r2, #0]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	3301      	adds	r3, #1
 8005da2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005daa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	b21a      	sxth	r2, r3
 8005db2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	b21b      	sxth	r3, r3
 8005dba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005dbc:	89fb      	ldrh	r3, [r7, #14]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
	...

08005dcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005de2:	2b40      	cmp	r3, #64	@ 0x40
 8005de4:	d005      	beq.n	8005df2 <USBD_StdDevReq+0x26>
 8005de6:	2b40      	cmp	r3, #64	@ 0x40
 8005de8:	d857      	bhi.n	8005e9a <USBD_StdDevReq+0xce>
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00f      	beq.n	8005e0e <USBD_StdDevReq+0x42>
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	d153      	bne.n	8005e9a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	32ae      	adds	r2, #174	@ 0xae
 8005dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	6839      	ldr	r1, [r7, #0]
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	4798      	blx	r3
 8005e08:	4603      	mov	r3, r0
 8005e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e0c:	e04a      	b.n	8005ea4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	785b      	ldrb	r3, [r3, #1]
 8005e12:	2b09      	cmp	r3, #9
 8005e14:	d83b      	bhi.n	8005e8e <USBD_StdDevReq+0xc2>
 8005e16:	a201      	add	r2, pc, #4	@ (adr r2, 8005e1c <USBD_StdDevReq+0x50>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e71 	.word	0x08005e71
 8005e20:	08005e85 	.word	0x08005e85
 8005e24:	08005e8f 	.word	0x08005e8f
 8005e28:	08005e7b 	.word	0x08005e7b
 8005e2c:	08005e8f 	.word	0x08005e8f
 8005e30:	08005e4f 	.word	0x08005e4f
 8005e34:	08005e45 	.word	0x08005e45
 8005e38:	08005e8f 	.word	0x08005e8f
 8005e3c:	08005e67 	.word	0x08005e67
 8005e40:	08005e59 	.word	0x08005e59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fa3e 	bl	80062c8 <USBD_GetDescriptor>
          break;
 8005e4c:	e024      	b.n	8005e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e4e:	6839      	ldr	r1, [r7, #0]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fba3 	bl	800659c <USBD_SetAddress>
          break;
 8005e56:	e01f      	b.n	8005e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005e58:	6839      	ldr	r1, [r7, #0]
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fbe2 	bl	8006624 <USBD_SetConfig>
 8005e60:	4603      	mov	r3, r0
 8005e62:	73fb      	strb	r3, [r7, #15]
          break;
 8005e64:	e018      	b.n	8005e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e66:	6839      	ldr	r1, [r7, #0]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fc85 	bl	8006778 <USBD_GetConfig>
          break;
 8005e6e:	e013      	b.n	8005e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fcb6 	bl	80067e4 <USBD_GetStatus>
          break;
 8005e78:	e00e      	b.n	8005e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e7a:	6839      	ldr	r1, [r7, #0]
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fce5 	bl	800684c <USBD_SetFeature>
          break;
 8005e82:	e009      	b.n	8005e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fd09 	bl	800689e <USBD_ClrFeature>
          break;
 8005e8c:	e004      	b.n	8005e98 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005e8e:	6839      	ldr	r1, [r7, #0]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fd60 	bl	8006956 <USBD_CtlError>
          break;
 8005e96:	bf00      	nop
      }
      break;
 8005e98:	e004      	b.n	8005ea4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fd5a 	bl	8006956 <USBD_CtlError>
      break;
 8005ea2:	bf00      	nop
  }

  return ret;
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop

08005eb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ec6:	2b40      	cmp	r3, #64	@ 0x40
 8005ec8:	d005      	beq.n	8005ed6 <USBD_StdItfReq+0x26>
 8005eca:	2b40      	cmp	r3, #64	@ 0x40
 8005ecc:	d852      	bhi.n	8005f74 <USBD_StdItfReq+0xc4>
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <USBD_StdItfReq+0x26>
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	d14e      	bne.n	8005f74 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d840      	bhi.n	8005f66 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	889b      	ldrh	r3, [r3, #4]
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d836      	bhi.n	8005f5c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	889b      	ldrh	r3, [r3, #4]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff feda 	bl	8005cb0 <USBD_CoreFindIF>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f00:	7bbb      	ldrb	r3, [r7, #14]
 8005f02:	2bff      	cmp	r3, #255	@ 0xff
 8005f04:	d01d      	beq.n	8005f42 <USBD_StdItfReq+0x92>
 8005f06:	7bbb      	ldrb	r3, [r7, #14]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d11a      	bne.n	8005f42 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005f0c:	7bba      	ldrb	r2, [r7, #14]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	32ae      	adds	r2, #174	@ 0xae
 8005f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00f      	beq.n	8005f3c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005f1c:	7bba      	ldrb	r2, [r7, #14]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005f24:	7bba      	ldrb	r2, [r7, #14]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	32ae      	adds	r2, #174	@ 0xae
 8005f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	6839      	ldr	r1, [r7, #0]
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	4798      	blx	r3
 8005f36:	4603      	mov	r3, r0
 8005f38:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f3a:	e004      	b.n	8005f46 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f40:	e001      	b.n	8005f46 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005f42:	2303      	movs	r3, #3
 8005f44:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	88db      	ldrh	r3, [r3, #6]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d110      	bne.n	8005f70 <USBD_StdItfReq+0xc0>
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10d      	bne.n	8005f70 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fddc 	bl	8006b12 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f5a:	e009      	b.n	8005f70 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fcf9 	bl	8006956 <USBD_CtlError>
          break;
 8005f64:	e004      	b.n	8005f70 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fcf4 	bl	8006956 <USBD_CtlError>
          break;
 8005f6e:	e000      	b.n	8005f72 <USBD_StdItfReq+0xc2>
          break;
 8005f70:	bf00      	nop
      }
      break;
 8005f72:	e004      	b.n	8005f7e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005f74:	6839      	ldr	r1, [r7, #0]
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fced 	bl	8006956 <USBD_CtlError>
      break;
 8005f7c:	bf00      	nop
  }

  return ret;
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	889b      	ldrh	r3, [r3, #4]
 8005f9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005fa4:	2b40      	cmp	r3, #64	@ 0x40
 8005fa6:	d007      	beq.n	8005fb8 <USBD_StdEPReq+0x30>
 8005fa8:	2b40      	cmp	r3, #64	@ 0x40
 8005faa:	f200 8181 	bhi.w	80062b0 <USBD_StdEPReq+0x328>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d02a      	beq.n	8006008 <USBD_StdEPReq+0x80>
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	f040 817c 	bne.w	80062b0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005fb8:	7bbb      	ldrb	r3, [r7, #14]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff fe84 	bl	8005cca <USBD_CoreFindEP>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fc6:	7b7b      	ldrb	r3, [r7, #13]
 8005fc8:	2bff      	cmp	r3, #255	@ 0xff
 8005fca:	f000 8176 	beq.w	80062ba <USBD_StdEPReq+0x332>
 8005fce:	7b7b      	ldrb	r3, [r7, #13]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f040 8172 	bne.w	80062ba <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8005fd6:	7b7a      	ldrb	r2, [r7, #13]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005fde:	7b7a      	ldrb	r2, [r7, #13]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	32ae      	adds	r2, #174	@ 0xae
 8005fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 8165 	beq.w	80062ba <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005ff0:	7b7a      	ldrb	r2, [r7, #13]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	32ae      	adds	r2, #174	@ 0xae
 8005ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	4798      	blx	r3
 8006002:	4603      	mov	r3, r0
 8006004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006006:	e158      	b.n	80062ba <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	785b      	ldrb	r3, [r3, #1]
 800600c:	2b03      	cmp	r3, #3
 800600e:	d008      	beq.n	8006022 <USBD_StdEPReq+0x9a>
 8006010:	2b03      	cmp	r3, #3
 8006012:	f300 8147 	bgt.w	80062a4 <USBD_StdEPReq+0x31c>
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 809b 	beq.w	8006152 <USBD_StdEPReq+0x1ca>
 800601c:	2b01      	cmp	r3, #1
 800601e:	d03c      	beq.n	800609a <USBD_StdEPReq+0x112>
 8006020:	e140      	b.n	80062a4 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d002      	beq.n	8006034 <USBD_StdEPReq+0xac>
 800602e:	2b03      	cmp	r3, #3
 8006030:	d016      	beq.n	8006060 <USBD_StdEPReq+0xd8>
 8006032:	e02c      	b.n	800608e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006034:	7bbb      	ldrb	r3, [r7, #14]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00d      	beq.n	8006056 <USBD_StdEPReq+0xce>
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	2b80      	cmp	r3, #128	@ 0x80
 800603e:	d00a      	beq.n	8006056 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006040:	7bbb      	ldrb	r3, [r7, #14]
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 f95d 	bl	8007304 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800604a:	2180      	movs	r1, #128	@ 0x80
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 f959 	bl	8007304 <USBD_LL_StallEP>
 8006052:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006054:	e020      	b.n	8006098 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fc7c 	bl	8006956 <USBD_CtlError>
              break;
 800605e:	e01b      	b.n	8006098 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	885b      	ldrh	r3, [r3, #2]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10e      	bne.n	8006086 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006068:	7bbb      	ldrb	r3, [r7, #14]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00b      	beq.n	8006086 <USBD_StdEPReq+0xfe>
 800606e:	7bbb      	ldrb	r3, [r7, #14]
 8006070:	2b80      	cmp	r3, #128	@ 0x80
 8006072:	d008      	beq.n	8006086 <USBD_StdEPReq+0xfe>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	88db      	ldrh	r3, [r3, #6]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d104      	bne.n	8006086 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800607c:	7bbb      	ldrb	r3, [r7, #14]
 800607e:	4619      	mov	r1, r3
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 f93f 	bl	8007304 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fd43 	bl	8006b12 <USBD_CtlSendStatus>

              break;
 800608c:	e004      	b.n	8006098 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800608e:	6839      	ldr	r1, [r7, #0]
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fc60 	bl	8006956 <USBD_CtlError>
              break;
 8006096:	bf00      	nop
          }
          break;
 8006098:	e109      	b.n	80062ae <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d002      	beq.n	80060ac <USBD_StdEPReq+0x124>
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d016      	beq.n	80060d8 <USBD_StdEPReq+0x150>
 80060aa:	e04b      	b.n	8006144 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060ac:	7bbb      	ldrb	r3, [r7, #14]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00d      	beq.n	80060ce <USBD_StdEPReq+0x146>
 80060b2:	7bbb      	ldrb	r3, [r7, #14]
 80060b4:	2b80      	cmp	r3, #128	@ 0x80
 80060b6:	d00a      	beq.n	80060ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060b8:	7bbb      	ldrb	r3, [r7, #14]
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 f921 	bl	8007304 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060c2:	2180      	movs	r1, #128	@ 0x80
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 f91d 	bl	8007304 <USBD_LL_StallEP>
 80060ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060cc:	e040      	b.n	8006150 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fc40 	bl	8006956 <USBD_CtlError>
              break;
 80060d6:	e03b      	b.n	8006150 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	885b      	ldrh	r3, [r3, #2]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d136      	bne.n	800614e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80060e0:	7bbb      	ldrb	r3, [r7, #14]
 80060e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d004      	beq.n	80060f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80060ea:	7bbb      	ldrb	r3, [r7, #14]
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f001 f927 	bl	8007342 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fd0c 	bl	8006b12 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80060fa:	7bbb      	ldrb	r3, [r7, #14]
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff fde3 	bl	8005cca <USBD_CoreFindEP>
 8006104:	4603      	mov	r3, r0
 8006106:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006108:	7b7b      	ldrb	r3, [r7, #13]
 800610a:	2bff      	cmp	r3, #255	@ 0xff
 800610c:	d01f      	beq.n	800614e <USBD_StdEPReq+0x1c6>
 800610e:	7b7b      	ldrb	r3, [r7, #13]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d11c      	bne.n	800614e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006114:	7b7a      	ldrb	r2, [r7, #13]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800611c:	7b7a      	ldrb	r2, [r7, #13]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	32ae      	adds	r2, #174	@ 0xae
 8006122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d010      	beq.n	800614e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800612c:	7b7a      	ldrb	r2, [r7, #13]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	32ae      	adds	r2, #174	@ 0xae
 8006132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	4798      	blx	r3
 800613e:	4603      	mov	r3, r0
 8006140:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006142:	e004      	b.n	800614e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006144:	6839      	ldr	r1, [r7, #0]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fc05 	bl	8006956 <USBD_CtlError>
              break;
 800614c:	e000      	b.n	8006150 <USBD_StdEPReq+0x1c8>
              break;
 800614e:	bf00      	nop
          }
          break;
 8006150:	e0ad      	b.n	80062ae <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d002      	beq.n	8006164 <USBD_StdEPReq+0x1dc>
 800615e:	2b03      	cmp	r3, #3
 8006160:	d033      	beq.n	80061ca <USBD_StdEPReq+0x242>
 8006162:	e099      	b.n	8006298 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006164:	7bbb      	ldrb	r3, [r7, #14]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d007      	beq.n	800617a <USBD_StdEPReq+0x1f2>
 800616a:	7bbb      	ldrb	r3, [r7, #14]
 800616c:	2b80      	cmp	r3, #128	@ 0x80
 800616e:	d004      	beq.n	800617a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fbef 	bl	8006956 <USBD_CtlError>
                break;
 8006178:	e093      	b.n	80062a2 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800617a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800617e:	2b00      	cmp	r3, #0
 8006180:	da0b      	bge.n	800619a <USBD_StdEPReq+0x212>
 8006182:	7bbb      	ldrb	r3, [r7, #14]
 8006184:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	3310      	adds	r3, #16
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	4413      	add	r3, r2
 8006196:	3304      	adds	r3, #4
 8006198:	e00b      	b.n	80061b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800619a:	7bbb      	ldrb	r3, [r7, #14]
 800619c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	4413      	add	r3, r2
 80061b0:	3304      	adds	r3, #4
 80061b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2200      	movs	r2, #0
 80061b8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	330e      	adds	r3, #14
 80061be:	2202      	movs	r2, #2
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fc44 	bl	8006a50 <USBD_CtlSendData>
              break;
 80061c8:	e06b      	b.n	80062a2 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80061ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	da11      	bge.n	80061f6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061d2:	7bbb      	ldrb	r3, [r7, #14]
 80061d4:	f003 020f 	and.w	r2, r3, #15
 80061d8:	6879      	ldr	r1, [r7, #4]
 80061da:	4613      	mov	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	440b      	add	r3, r1
 80061e4:	3323      	adds	r3, #35	@ 0x23
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d117      	bne.n	800621c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fbb1 	bl	8006956 <USBD_CtlError>
                  break;
 80061f4:	e055      	b.n	80062a2 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061f6:	7bbb      	ldrb	r3, [r7, #14]
 80061f8:	f003 020f 	and.w	r2, r3, #15
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	4613      	mov	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	440b      	add	r3, r1
 8006208:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d104      	bne.n	800621c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fb9e 	bl	8006956 <USBD_CtlError>
                  break;
 800621a:	e042      	b.n	80062a2 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800621c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006220:	2b00      	cmp	r3, #0
 8006222:	da0b      	bge.n	800623c <USBD_StdEPReq+0x2b4>
 8006224:	7bbb      	ldrb	r3, [r7, #14]
 8006226:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	3310      	adds	r3, #16
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	4413      	add	r3, r2
 8006238:	3304      	adds	r3, #4
 800623a:	e00b      	b.n	8006254 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800623c:	7bbb      	ldrb	r3, [r7, #14]
 800623e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	4413      	add	r3, r2
 8006252:	3304      	adds	r3, #4
 8006254:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006256:	7bbb      	ldrb	r3, [r7, #14]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <USBD_StdEPReq+0x2da>
 800625c:	7bbb      	ldrb	r3, [r7, #14]
 800625e:	2b80      	cmp	r3, #128	@ 0x80
 8006260:	d103      	bne.n	800626a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2200      	movs	r2, #0
 8006266:	739a      	strb	r2, [r3, #14]
 8006268:	e00e      	b.n	8006288 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800626a:	7bbb      	ldrb	r3, [r7, #14]
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f001 f886 	bl	8007380 <USBD_LL_IsStallEP>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2201      	movs	r2, #1
 800627e:	739a      	strb	r2, [r3, #14]
 8006280:	e002      	b.n	8006288 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2200      	movs	r2, #0
 8006286:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	330e      	adds	r3, #14
 800628c:	2202      	movs	r2, #2
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fbdd 	bl	8006a50 <USBD_CtlSendData>
              break;
 8006296:	e004      	b.n	80062a2 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fb5b 	bl	8006956 <USBD_CtlError>
              break;
 80062a0:	bf00      	nop
          }
          break;
 80062a2:	e004      	b.n	80062ae <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80062a4:	6839      	ldr	r1, [r7, #0]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fb55 	bl	8006956 <USBD_CtlError>
          break;
 80062ac:	bf00      	nop
      }
      break;
 80062ae:	e005      	b.n	80062bc <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80062b0:	6839      	ldr	r1, [r7, #0]
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fb4f 	bl	8006956 <USBD_CtlError>
      break;
 80062b8:	e000      	b.n	80062bc <USBD_StdEPReq+0x334>
      break;
 80062ba:	bf00      	nop
  }

  return ret;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	885b      	ldrh	r3, [r3, #2]
 80062e2:	0a1b      	lsrs	r3, r3, #8
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	2b06      	cmp	r3, #6
 80062ea:	f200 8128 	bhi.w	800653e <USBD_GetDescriptor+0x276>
 80062ee:	a201      	add	r2, pc, #4	@ (adr r2, 80062f4 <USBD_GetDescriptor+0x2c>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	08006311 	.word	0x08006311
 80062f8:	08006329 	.word	0x08006329
 80062fc:	08006369 	.word	0x08006369
 8006300:	0800653f 	.word	0x0800653f
 8006304:	0800653f 	.word	0x0800653f
 8006308:	080064df 	.word	0x080064df
 800630c:	0800650b 	.word	0x0800650b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	7c12      	ldrb	r2, [r2, #16]
 800631c:	f107 0108 	add.w	r1, r7, #8
 8006320:	4610      	mov	r0, r2
 8006322:	4798      	blx	r3
 8006324:	60f8      	str	r0, [r7, #12]
      break;
 8006326:	e112      	b.n	800654e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	7c1b      	ldrb	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10d      	bne.n	800634c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006338:	f107 0208 	add.w	r2, r7, #8
 800633c:	4610      	mov	r0, r2
 800633e:	4798      	blx	r3
 8006340:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3301      	adds	r3, #1
 8006346:	2202      	movs	r2, #2
 8006348:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800634a:	e100      	b.n	800654e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006354:	f107 0208 	add.w	r2, r7, #8
 8006358:	4610      	mov	r0, r2
 800635a:	4798      	blx	r3
 800635c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3301      	adds	r3, #1
 8006362:	2202      	movs	r2, #2
 8006364:	701a      	strb	r2, [r3, #0]
      break;
 8006366:	e0f2      	b.n	800654e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	885b      	ldrh	r3, [r3, #2]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b05      	cmp	r3, #5
 8006370:	f200 80ac 	bhi.w	80064cc <USBD_GetDescriptor+0x204>
 8006374:	a201      	add	r2, pc, #4	@ (adr r2, 800637c <USBD_GetDescriptor+0xb4>)
 8006376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637a:	bf00      	nop
 800637c:	08006395 	.word	0x08006395
 8006380:	080063c9 	.word	0x080063c9
 8006384:	080063fd 	.word	0x080063fd
 8006388:	08006431 	.word	0x08006431
 800638c:	08006465 	.word	0x08006465
 8006390:	08006499 	.word	0x08006499
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00b      	beq.n	80063b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	7c12      	ldrb	r2, [r2, #16]
 80063ac:	f107 0108 	add.w	r1, r7, #8
 80063b0:	4610      	mov	r0, r2
 80063b2:	4798      	blx	r3
 80063b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063b6:	e091      	b.n	80064dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 facb 	bl	8006956 <USBD_CtlError>
            err++;
 80063c0:	7afb      	ldrb	r3, [r7, #11]
 80063c2:	3301      	adds	r3, #1
 80063c4:	72fb      	strb	r3, [r7, #11]
          break;
 80063c6:	e089      	b.n	80064dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00b      	beq.n	80063ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	7c12      	ldrb	r2, [r2, #16]
 80063e0:	f107 0108 	add.w	r1, r7, #8
 80063e4:	4610      	mov	r0, r2
 80063e6:	4798      	blx	r3
 80063e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ea:	e077      	b.n	80064dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fab1 	bl	8006956 <USBD_CtlError>
            err++;
 80063f4:	7afb      	ldrb	r3, [r7, #11]
 80063f6:	3301      	adds	r3, #1
 80063f8:	72fb      	strb	r3, [r7, #11]
          break;
 80063fa:	e06f      	b.n	80064dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00b      	beq.n	8006420 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	7c12      	ldrb	r2, [r2, #16]
 8006414:	f107 0108 	add.w	r1, r7, #8
 8006418:	4610      	mov	r0, r2
 800641a:	4798      	blx	r3
 800641c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800641e:	e05d      	b.n	80064dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006420:	6839      	ldr	r1, [r7, #0]
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fa97 	bl	8006956 <USBD_CtlError>
            err++;
 8006428:	7afb      	ldrb	r3, [r7, #11]
 800642a:	3301      	adds	r3, #1
 800642c:	72fb      	strb	r3, [r7, #11]
          break;
 800642e:	e055      	b.n	80064dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	7c12      	ldrb	r2, [r2, #16]
 8006448:	f107 0108 	add.w	r1, r7, #8
 800644c:	4610      	mov	r0, r2
 800644e:	4798      	blx	r3
 8006450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006452:	e043      	b.n	80064dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fa7d 	bl	8006956 <USBD_CtlError>
            err++;
 800645c:	7afb      	ldrb	r3, [r7, #11]
 800645e:	3301      	adds	r3, #1
 8006460:	72fb      	strb	r3, [r7, #11]
          break;
 8006462:	e03b      	b.n	80064dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00b      	beq.n	8006488 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	7c12      	ldrb	r2, [r2, #16]
 800647c:	f107 0108 	add.w	r1, r7, #8
 8006480:	4610      	mov	r0, r2
 8006482:	4798      	blx	r3
 8006484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006486:	e029      	b.n	80064dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa63 	bl	8006956 <USBD_CtlError>
            err++;
 8006490:	7afb      	ldrb	r3, [r7, #11]
 8006492:	3301      	adds	r3, #1
 8006494:	72fb      	strb	r3, [r7, #11]
          break;
 8006496:	e021      	b.n	80064dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00b      	beq.n	80064bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	7c12      	ldrb	r2, [r2, #16]
 80064b0:	f107 0108 	add.w	r1, r7, #8
 80064b4:	4610      	mov	r0, r2
 80064b6:	4798      	blx	r3
 80064b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ba:	e00f      	b.n	80064dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fa49 	bl	8006956 <USBD_CtlError>
            err++;
 80064c4:	7afb      	ldrb	r3, [r7, #11]
 80064c6:	3301      	adds	r3, #1
 80064c8:	72fb      	strb	r3, [r7, #11]
          break;
 80064ca:	e007      	b.n	80064dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa41 	bl	8006956 <USBD_CtlError>
          err++;
 80064d4:	7afb      	ldrb	r3, [r7, #11]
 80064d6:	3301      	adds	r3, #1
 80064d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80064da:	bf00      	nop
      }
      break;
 80064dc:	e037      	b.n	800654e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	7c1b      	ldrb	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d109      	bne.n	80064fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ee:	f107 0208 	add.w	r2, r7, #8
 80064f2:	4610      	mov	r0, r2
 80064f4:	4798      	blx	r3
 80064f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064f8:	e029      	b.n	800654e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fa2a 	bl	8006956 <USBD_CtlError>
        err++;
 8006502:	7afb      	ldrb	r3, [r7, #11]
 8006504:	3301      	adds	r3, #1
 8006506:	72fb      	strb	r3, [r7, #11]
      break;
 8006508:	e021      	b.n	800654e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	7c1b      	ldrb	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10d      	bne.n	800652e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800651a:	f107 0208 	add.w	r2, r7, #8
 800651e:	4610      	mov	r0, r2
 8006520:	4798      	blx	r3
 8006522:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3301      	adds	r3, #1
 8006528:	2207      	movs	r2, #7
 800652a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800652c:	e00f      	b.n	800654e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fa10 	bl	8006956 <USBD_CtlError>
        err++;
 8006536:	7afb      	ldrb	r3, [r7, #11]
 8006538:	3301      	adds	r3, #1
 800653a:	72fb      	strb	r3, [r7, #11]
      break;
 800653c:	e007      	b.n	800654e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fa08 	bl	8006956 <USBD_CtlError>
      err++;
 8006546:	7afb      	ldrb	r3, [r7, #11]
 8006548:	3301      	adds	r3, #1
 800654a:	72fb      	strb	r3, [r7, #11]
      break;
 800654c:	bf00      	nop
  }

  if (err != 0U)
 800654e:	7afb      	ldrb	r3, [r7, #11]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d11e      	bne.n	8006592 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	88db      	ldrh	r3, [r3, #6]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d016      	beq.n	800658a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800655c:	893b      	ldrh	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00e      	beq.n	8006580 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	88da      	ldrh	r2, [r3, #6]
 8006566:	893b      	ldrh	r3, [r7, #8]
 8006568:	4293      	cmp	r3, r2
 800656a:	bf28      	it	cs
 800656c:	4613      	movcs	r3, r2
 800656e:	b29b      	uxth	r3, r3
 8006570:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006572:	893b      	ldrh	r3, [r7, #8]
 8006574:	461a      	mov	r2, r3
 8006576:	68f9      	ldr	r1, [r7, #12]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fa69 	bl	8006a50 <USBD_CtlSendData>
 800657e:	e009      	b.n	8006594 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f9e7 	bl	8006956 <USBD_CtlError>
 8006588:	e004      	b.n	8006594 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fac1 	bl	8006b12 <USBD_CtlSendStatus>
 8006590:	e000      	b.n	8006594 <USBD_GetDescriptor+0x2cc>
    return;
 8006592:	bf00      	nop
  }
}
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop

0800659c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	889b      	ldrh	r3, [r3, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d131      	bne.n	8006612 <USBD_SetAddress+0x76>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	88db      	ldrh	r3, [r3, #6]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d12d      	bne.n	8006612 <USBD_SetAddress+0x76>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	885b      	ldrh	r3, [r3, #2]
 80065ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80065bc:	d829      	bhi.n	8006612 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	885b      	ldrh	r3, [r3, #2]
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d104      	bne.n	80065e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f9bc 	bl	8006956 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065de:	e01d      	b.n	800661c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	7bfa      	ldrb	r2, [r7, #15]
 80065e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fef3 	bl	80073d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fa8d 	bl	8006b12 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d004      	beq.n	8006608 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2202      	movs	r2, #2
 8006602:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006606:	e009      	b.n	800661c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006610:	e004      	b.n	800661c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f99e 	bl	8006956 <USBD_CtlError>
  }
}
 800661a:	bf00      	nop
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	885b      	ldrh	r3, [r3, #2]
 8006636:	b2da      	uxtb	r2, r3
 8006638:	4b4e      	ldr	r3, [pc, #312]	@ (8006774 <USBD_SetConfig+0x150>)
 800663a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800663c:	4b4d      	ldr	r3, [pc, #308]	@ (8006774 <USBD_SetConfig+0x150>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d905      	bls.n	8006650 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f985 	bl	8006956 <USBD_CtlError>
    return USBD_FAIL;
 800664c:	2303      	movs	r3, #3
 800664e:	e08c      	b.n	800676a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d002      	beq.n	8006662 <USBD_SetConfig+0x3e>
 800665c:	2b03      	cmp	r3, #3
 800665e:	d029      	beq.n	80066b4 <USBD_SetConfig+0x90>
 8006660:	e075      	b.n	800674e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006662:	4b44      	ldr	r3, [pc, #272]	@ (8006774 <USBD_SetConfig+0x150>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d020      	beq.n	80066ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800666a:	4b42      	ldr	r3, [pc, #264]	@ (8006774 <USBD_SetConfig+0x150>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006674:	4b3f      	ldr	r3, [pc, #252]	@ (8006774 <USBD_SetConfig+0x150>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7fe ffcd 	bl	800561a <USBD_SetClassConfig>
 8006680:	4603      	mov	r3, r0
 8006682:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d008      	beq.n	800669c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f962 	bl	8006956 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2202      	movs	r2, #2
 8006696:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800669a:	e065      	b.n	8006768 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fa38 	bl	8006b12 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2203      	movs	r2, #3
 80066a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80066aa:	e05d      	b.n	8006768 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fa30 	bl	8006b12 <USBD_CtlSendStatus>
      break;
 80066b2:	e059      	b.n	8006768 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80066b4:	4b2f      	ldr	r3, [pc, #188]	@ (8006774 <USBD_SetConfig+0x150>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d112      	bne.n	80066e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2202      	movs	r2, #2
 80066c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80066c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006774 <USBD_SetConfig+0x150>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	461a      	mov	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066ce:	4b29      	ldr	r3, [pc, #164]	@ (8006774 <USBD_SetConfig+0x150>)
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7fe ffbc 	bl	8005652 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fa19 	bl	8006b12 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066e0:	e042      	b.n	8006768 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80066e2:	4b24      	ldr	r3, [pc, #144]	@ (8006774 <USBD_SetConfig+0x150>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d02a      	beq.n	8006746 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7fe ffaa 	bl	8005652 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80066fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006774 <USBD_SetConfig+0x150>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006708:	4b1a      	ldr	r3, [pc, #104]	@ (8006774 <USBD_SetConfig+0x150>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7fe ff83 	bl	800561a <USBD_SetClassConfig>
 8006714:	4603      	mov	r3, r0
 8006716:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00f      	beq.n	800673e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f918 	bl	8006956 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fe ff8f 	bl	8005652 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800673c:	e014      	b.n	8006768 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f9e7 	bl	8006b12 <USBD_CtlSendStatus>
      break;
 8006744:	e010      	b.n	8006768 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f9e3 	bl	8006b12 <USBD_CtlSendStatus>
      break;
 800674c:	e00c      	b.n	8006768 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f900 	bl	8006956 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006756:	4b07      	ldr	r3, [pc, #28]	@ (8006774 <USBD_SetConfig+0x150>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7fe ff78 	bl	8005652 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006762:	2303      	movs	r3, #3
 8006764:	73fb      	strb	r3, [r7, #15]
      break;
 8006766:	bf00      	nop
  }

  return ret;
 8006768:	7bfb      	ldrb	r3, [r7, #15]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	200003c8 	.word	0x200003c8

08006778 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	88db      	ldrh	r3, [r3, #6]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d004      	beq.n	8006794 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f8e2 	bl	8006956 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006792:	e023      	b.n	80067dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	dc02      	bgt.n	80067a6 <USBD_GetConfig+0x2e>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dc03      	bgt.n	80067ac <USBD_GetConfig+0x34>
 80067a4:	e015      	b.n	80067d2 <USBD_GetConfig+0x5a>
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d00b      	beq.n	80067c2 <USBD_GetConfig+0x4a>
 80067aa:	e012      	b.n	80067d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3308      	adds	r3, #8
 80067b6:	2201      	movs	r2, #1
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f948 	bl	8006a50 <USBD_CtlSendData>
        break;
 80067c0:	e00c      	b.n	80067dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3304      	adds	r3, #4
 80067c6:	2201      	movs	r2, #1
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f940 	bl	8006a50 <USBD_CtlSendData>
        break;
 80067d0:	e004      	b.n	80067dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f8be 	bl	8006956 <USBD_CtlError>
        break;
 80067da:	bf00      	nop
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	3b01      	subs	r3, #1
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d81e      	bhi.n	800683a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	88db      	ldrh	r3, [r3, #6]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d004      	beq.n	800680e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f8a5 	bl	8006956 <USBD_CtlError>
        break;
 800680c:	e01a      	b.n	8006844 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f043 0202 	orr.w	r2, r3, #2
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	330c      	adds	r3, #12
 800682e:	2202      	movs	r2, #2
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f90c 	bl	8006a50 <USBD_CtlSendData>
      break;
 8006838:	e004      	b.n	8006844 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f88a 	bl	8006956 <USBD_CtlError>
      break;
 8006842:	bf00      	nop
  }
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	885b      	ldrh	r3, [r3, #2]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d107      	bne.n	800686e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f953 	bl	8006b12 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800686c:	e013      	b.n	8006896 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	885b      	ldrh	r3, [r3, #2]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d10b      	bne.n	800688e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	889b      	ldrh	r3, [r3, #4]
 800687a:	0a1b      	lsrs	r3, r3, #8
 800687c:	b29b      	uxth	r3, r3
 800687e:	b2da      	uxtb	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f943 	bl	8006b12 <USBD_CtlSendStatus>
}
 800688c:	e003      	b.n	8006896 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f860 	bl	8006956 <USBD_CtlError>
}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d80b      	bhi.n	80068ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	885b      	ldrh	r3, [r3, #2]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d10c      	bne.n	80068d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f923 	bl	8006b12 <USBD_CtlSendStatus>
      }
      break;
 80068cc:	e004      	b.n	80068d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f840 	bl	8006956 <USBD_CtlError>
      break;
 80068d6:	e000      	b.n	80068da <USBD_ClrFeature+0x3c>
      break;
 80068d8:	bf00      	nop
  }
}
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	781a      	ldrb	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3301      	adds	r3, #1
 80068fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	781a      	ldrb	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3301      	adds	r3, #1
 800690a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f7ff fa3d 	bl	8005d8c <SWAPBYTE>
 8006912:	4603      	mov	r3, r0
 8006914:	461a      	mov	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3301      	adds	r3, #1
 800691e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3301      	adds	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7ff fa30 	bl	8005d8c <SWAPBYTE>
 800692c:	4603      	mov	r3, r0
 800692e:	461a      	mov	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3301      	adds	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3301      	adds	r3, #1
 800693e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f7ff fa23 	bl	8005d8c <SWAPBYTE>
 8006946:	4603      	mov	r3, r0
 8006948:	461a      	mov	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	80da      	strh	r2, [r3, #6]
}
 800694e:	bf00      	nop
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006960:	2180      	movs	r1, #128	@ 0x80
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fcce 	bl	8007304 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006968:	2100      	movs	r1, #0
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fcca 	bl	8007304 <USBD_LL_StallEP>
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d042      	beq.n	8006a14 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006992:	6938      	ldr	r0, [r7, #16]
 8006994:	f000 f842 	bl	8006a1c <USBD_GetLen>
 8006998:	4603      	mov	r3, r0
 800699a:	3301      	adds	r3, #1
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069a2:	d808      	bhi.n	80069b6 <USBD_GetString+0x3e>
 80069a4:	6938      	ldr	r0, [r7, #16]
 80069a6:	f000 f839 	bl	8006a1c <USBD_GetLen>
 80069aa:	4603      	mov	r3, r0
 80069ac:	3301      	adds	r3, #1
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	e001      	b.n	80069ba <USBD_GetString+0x42>
 80069b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	4413      	add	r3, r2
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	7812      	ldrb	r2, [r2, #0]
 80069c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
 80069cc:	3301      	adds	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80069d0:	7dfb      	ldrb	r3, [r7, #23]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	4413      	add	r3, r2
 80069d6:	2203      	movs	r2, #3
 80069d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80069da:	7dfb      	ldrb	r3, [r7, #23]
 80069dc:	3301      	adds	r3, #1
 80069de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80069e0:	e013      	b.n	8006a0a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	4413      	add	r3, r2
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	7812      	ldrb	r2, [r2, #0]
 80069ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	3301      	adds	r3, #1
 80069f2:	613b      	str	r3, [r7, #16]
    idx++;
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	3301      	adds	r3, #1
 80069f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	4413      	add	r3, r2
 8006a00:	2200      	movs	r2, #0
 8006a02:	701a      	strb	r2, [r3, #0]
    idx++;
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	3301      	adds	r3, #1
 8006a08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e7      	bne.n	80069e2 <USBD_GetString+0x6a>
 8006a12:	e000      	b.n	8006a16 <USBD_GetString+0x9e>
    return;
 8006a14:	bf00      	nop
  }
}
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006a2c:	e005      	b.n	8006a3a <USBD_GetLen+0x1e>
  {
    len++;
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	3301      	adds	r3, #1
 8006a32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	3301      	adds	r3, #1
 8006a38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1f5      	bne.n	8006a2e <USBD_GetLen+0x12>
  }

  return len;
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 fcca 	bl	8007416 <USBD_LL_Transmit>

  return USBD_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fcb9 	bl	8007416 <USBD_LL_Transmit>

  return USBD_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2203      	movs	r2, #3
 8006abe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	2100      	movs	r1, #0
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 fcb9 	bl	8007458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	2100      	movs	r1, #0
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 fca8 	bl	8007458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b082      	sub	sp, #8
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2204      	movs	r2, #4
 8006b1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b22:	2300      	movs	r3, #0
 8006b24:	2200      	movs	r2, #0
 8006b26:	2100      	movs	r1, #0
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fc74 	bl	8007416 <USBD_LL_Transmit>

  return USBD_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2205      	movs	r2, #5
 8006b44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b48:	2300      	movs	r3, #0
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fc82 	bl	8007458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b64:	2200      	movs	r2, #0
 8006b66:	4912      	ldr	r1, [pc, #72]	@ (8006bb0 <MX_USB_DEVICE_Init+0x50>)
 8006b68:	4812      	ldr	r0, [pc, #72]	@ (8006bb4 <MX_USB_DEVICE_Init+0x54>)
 8006b6a:	f7fe fcd9 	bl	8005520 <USBD_Init>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b74:	f7fa f9cc 	bl	8000f10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b78:	490f      	ldr	r1, [pc, #60]	@ (8006bb8 <MX_USB_DEVICE_Init+0x58>)
 8006b7a:	480e      	ldr	r0, [pc, #56]	@ (8006bb4 <MX_USB_DEVICE_Init+0x54>)
 8006b7c:	f7fe fd00 	bl	8005580 <USBD_RegisterClass>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b86:	f7fa f9c3 	bl	8000f10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b8a:	490c      	ldr	r1, [pc, #48]	@ (8006bbc <MX_USB_DEVICE_Init+0x5c>)
 8006b8c:	4809      	ldr	r0, [pc, #36]	@ (8006bb4 <MX_USB_DEVICE_Init+0x54>)
 8006b8e:	f7fe fc37 	bl	8005400 <USBD_CDC_RegisterInterface>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006b98:	f7fa f9ba 	bl	8000f10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b9c:	4805      	ldr	r0, [pc, #20]	@ (8006bb4 <MX_USB_DEVICE_Init+0x54>)
 8006b9e:	f7fe fd25 	bl	80055ec <USBD_Start>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ba8:	f7fa f9b2 	bl	8000f10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006bac:	bf00      	nop
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20000124 	.word	0x20000124
 8006bb4:	200003cc 	.word	0x200003cc
 8006bb8:	20000090 	.word	0x20000090
 8006bbc:	20000110 	.word	0x20000110

08006bc0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	4905      	ldr	r1, [pc, #20]	@ (8006bdc <CDC_Init_FS+0x1c>)
 8006bc8:	4805      	ldr	r0, [pc, #20]	@ (8006be0 <CDC_Init_FS+0x20>)
 8006bca:	f7fe fc33 	bl	8005434 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006bce:	4905      	ldr	r1, [pc, #20]	@ (8006be4 <CDC_Init_FS+0x24>)
 8006bd0:	4803      	ldr	r0, [pc, #12]	@ (8006be0 <CDC_Init_FS+0x20>)
 8006bd2:	f7fe fc51 	bl	8005478 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006bd6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20000ea8 	.word	0x20000ea8
 8006be0:	200003cc 	.word	0x200003cc
 8006be4:	200006a8 	.word	0x200006a8

08006be8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006bec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	6039      	str	r1, [r7, #0]
 8006c02:	71fb      	strb	r3, [r7, #7]
 8006c04:	4613      	mov	r3, r2
 8006c06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006c08:	79fb      	ldrb	r3, [r7, #7]
 8006c0a:	2b23      	cmp	r3, #35	@ 0x23
 8006c0c:	d84a      	bhi.n	8006ca4 <CDC_Control_FS+0xac>
 8006c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c14 <CDC_Control_FS+0x1c>)
 8006c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c14:	08006ca5 	.word	0x08006ca5
 8006c18:	08006ca5 	.word	0x08006ca5
 8006c1c:	08006ca5 	.word	0x08006ca5
 8006c20:	08006ca5 	.word	0x08006ca5
 8006c24:	08006ca5 	.word	0x08006ca5
 8006c28:	08006ca5 	.word	0x08006ca5
 8006c2c:	08006ca5 	.word	0x08006ca5
 8006c30:	08006ca5 	.word	0x08006ca5
 8006c34:	08006ca5 	.word	0x08006ca5
 8006c38:	08006ca5 	.word	0x08006ca5
 8006c3c:	08006ca5 	.word	0x08006ca5
 8006c40:	08006ca5 	.word	0x08006ca5
 8006c44:	08006ca5 	.word	0x08006ca5
 8006c48:	08006ca5 	.word	0x08006ca5
 8006c4c:	08006ca5 	.word	0x08006ca5
 8006c50:	08006ca5 	.word	0x08006ca5
 8006c54:	08006ca5 	.word	0x08006ca5
 8006c58:	08006ca5 	.word	0x08006ca5
 8006c5c:	08006ca5 	.word	0x08006ca5
 8006c60:	08006ca5 	.word	0x08006ca5
 8006c64:	08006ca5 	.word	0x08006ca5
 8006c68:	08006ca5 	.word	0x08006ca5
 8006c6c:	08006ca5 	.word	0x08006ca5
 8006c70:	08006ca5 	.word	0x08006ca5
 8006c74:	08006ca5 	.word	0x08006ca5
 8006c78:	08006ca5 	.word	0x08006ca5
 8006c7c:	08006ca5 	.word	0x08006ca5
 8006c80:	08006ca5 	.word	0x08006ca5
 8006c84:	08006ca5 	.word	0x08006ca5
 8006c88:	08006ca5 	.word	0x08006ca5
 8006c8c:	08006ca5 	.word	0x08006ca5
 8006c90:	08006ca5 	.word	0x08006ca5
 8006c94:	08006ca5 	.word	0x08006ca5
 8006c98:	08006ca5 	.word	0x08006ca5
 8006c9c:	08006ca5 	.word	0x08006ca5
 8006ca0:	08006ca5 	.word	0x08006ca5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ca4:	bf00      	nop
  }

  return (USBD_OK);
 8006ca6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006cbe:	6879      	ldr	r1, [r7, #4]
 8006cc0:	4805      	ldr	r0, [pc, #20]	@ (8006cd8 <CDC_Receive_FS+0x24>)
 8006cc2:	f7fe fbd9 	bl	8005478 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006cc6:	4804      	ldr	r0, [pc, #16]	@ (8006cd8 <CDC_Receive_FS+0x24>)
 8006cc8:	f7fe fbf4 	bl	80054b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006ccc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	200003cc 	.word	0x200003cc

08006cdc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	371c      	adds	r7, #28
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
	...

08006d00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	4603      	mov	r3, r0
 8006d08:	6039      	str	r1, [r7, #0]
 8006d0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2212      	movs	r2, #18
 8006d10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d12:	4b03      	ldr	r3, [pc, #12]	@ (8006d20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	20000140 	.word	0x20000140

08006d24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	6039      	str	r1, [r7, #0]
 8006d2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2204      	movs	r2, #4
 8006d34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d36:	4b03      	ldr	r3, [pc, #12]	@ (8006d44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	20000154 	.word	0x20000154

08006d48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	6039      	str	r1, [r7, #0]
 8006d52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d54:	79fb      	ldrb	r3, [r7, #7]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d105      	bne.n	8006d66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	4907      	ldr	r1, [pc, #28]	@ (8006d7c <USBD_FS_ProductStrDescriptor+0x34>)
 8006d5e:	4808      	ldr	r0, [pc, #32]	@ (8006d80 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d60:	f7ff fe0a 	bl	8006978 <USBD_GetString>
 8006d64:	e004      	b.n	8006d70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	4904      	ldr	r1, [pc, #16]	@ (8006d7c <USBD_FS_ProductStrDescriptor+0x34>)
 8006d6a:	4805      	ldr	r0, [pc, #20]	@ (8006d80 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d6c:	f7ff fe04 	bl	8006978 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d70:	4b02      	ldr	r3, [pc, #8]	@ (8006d7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	200016a8 	.word	0x200016a8
 8006d80:	080084bc 	.word	0x080084bc

08006d84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	6039      	str	r1, [r7, #0]
 8006d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d90:	683a      	ldr	r2, [r7, #0]
 8006d92:	4904      	ldr	r1, [pc, #16]	@ (8006da4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006d94:	4804      	ldr	r0, [pc, #16]	@ (8006da8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d96:	f7ff fdef 	bl	8006978 <USBD_GetString>
  return USBD_StrDesc;
 8006d9a:	4b02      	ldr	r3, [pc, #8]	@ (8006da4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	200016a8 	.word	0x200016a8
 8006da8:	080084d4 	.word	0x080084d4

08006dac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	4603      	mov	r3, r0
 8006db4:	6039      	str	r1, [r7, #0]
 8006db6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	221a      	movs	r2, #26
 8006dbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006dbe:	f000 f843 	bl	8006e48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006dc2:	4b02      	ldr	r3, [pc, #8]	@ (8006dcc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	20000158 	.word	0x20000158

08006dd0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	6039      	str	r1, [r7, #0]
 8006dda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d105      	bne.n	8006dee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	4907      	ldr	r1, [pc, #28]	@ (8006e04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006de6:	4808      	ldr	r0, [pc, #32]	@ (8006e08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006de8:	f7ff fdc6 	bl	8006978 <USBD_GetString>
 8006dec:	e004      	b.n	8006df8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	4904      	ldr	r1, [pc, #16]	@ (8006e04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006df2:	4805      	ldr	r0, [pc, #20]	@ (8006e08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006df4:	f7ff fdc0 	bl	8006978 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006df8:	4b02      	ldr	r3, [pc, #8]	@ (8006e04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	200016a8 	.word	0x200016a8
 8006e08:	080084e8 	.word	0x080084e8

08006e0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	4603      	mov	r3, r0
 8006e14:	6039      	str	r1, [r7, #0]
 8006e16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d105      	bne.n	8006e2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	4907      	ldr	r1, [pc, #28]	@ (8006e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e22:	4808      	ldr	r0, [pc, #32]	@ (8006e44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e24:	f7ff fda8 	bl	8006978 <USBD_GetString>
 8006e28:	e004      	b.n	8006e34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	4904      	ldr	r1, [pc, #16]	@ (8006e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e2e:	4805      	ldr	r0, [pc, #20]	@ (8006e44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e30:	f7ff fda2 	bl	8006978 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e34:	4b02      	ldr	r3, [pc, #8]	@ (8006e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	200016a8 	.word	0x200016a8
 8006e44:	080084f4 	.word	0x080084f4

08006e48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8006e8c <Get_SerialNum+0x44>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e54:	4b0e      	ldr	r3, [pc, #56]	@ (8006e90 <Get_SerialNum+0x48>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e94 <Get_SerialNum+0x4c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4413      	add	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d009      	beq.n	8006e82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e6e:	2208      	movs	r2, #8
 8006e70:	4909      	ldr	r1, [pc, #36]	@ (8006e98 <Get_SerialNum+0x50>)
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 f814 	bl	8006ea0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e78:	2204      	movs	r2, #4
 8006e7a:	4908      	ldr	r1, [pc, #32]	@ (8006e9c <Get_SerialNum+0x54>)
 8006e7c:	68b8      	ldr	r0, [r7, #8]
 8006e7e:	f000 f80f 	bl	8006ea0 <IntToUnicode>
  }
}
 8006e82:	bf00      	nop
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	1fff7a10 	.word	0x1fff7a10
 8006e90:	1fff7a14 	.word	0x1fff7a14
 8006e94:	1fff7a18 	.word	0x1fff7a18
 8006e98:	2000015a 	.word	0x2000015a
 8006e9c:	2000016a 	.word	0x2000016a

08006ea0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	75fb      	strb	r3, [r7, #23]
 8006eb6:	e027      	b.n	8006f08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	0f1b      	lsrs	r3, r3, #28
 8006ebc:	2b09      	cmp	r3, #9
 8006ebe:	d80b      	bhi.n	8006ed8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	0f1b      	lsrs	r3, r3, #28
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	4619      	mov	r1, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	440b      	add	r3, r1
 8006ed0:	3230      	adds	r2, #48	@ 0x30
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]
 8006ed6:	e00a      	b.n	8006eee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	0f1b      	lsrs	r3, r3, #28
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	440b      	add	r3, r1
 8006ee8:	3237      	adds	r2, #55	@ 0x37
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	3301      	adds	r3, #1
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	4413      	add	r3, r2
 8006efe:	2200      	movs	r2, #0
 8006f00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
 8006f04:	3301      	adds	r3, #1
 8006f06:	75fb      	strb	r3, [r7, #23]
 8006f08:	7dfa      	ldrb	r2, [r7, #23]
 8006f0a:	79fb      	ldrb	r3, [r7, #7]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d3d3      	bcc.n	8006eb8 <IntToUnicode+0x18>
  }
}
 8006f10:	bf00      	nop
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
	...

08006f20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08a      	sub	sp, #40	@ 0x28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f28:	f107 0314 	add.w	r3, r7, #20
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	605a      	str	r2, [r3, #4]
 8006f32:	609a      	str	r2, [r3, #8]
 8006f34:	60da      	str	r2, [r3, #12]
 8006f36:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f40:	d13a      	bne.n	8006fb8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f42:	2300      	movs	r3, #0
 8006f44:	613b      	str	r3, [r7, #16]
 8006f46:	4b1e      	ldr	r3, [pc, #120]	@ (8006fc0 <HAL_PCD_MspInit+0xa0>)
 8006f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc0 <HAL_PCD_MspInit+0xa0>)
 8006f4c:	f043 0301 	orr.w	r3, r3, #1
 8006f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f52:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc0 <HAL_PCD_MspInit+0xa0>)
 8006f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	613b      	str	r3, [r7, #16]
 8006f5c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006f5e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f64:	2302      	movs	r3, #2
 8006f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f70:	230a      	movs	r3, #10
 8006f72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f74:	f107 0314 	add.w	r3, r7, #20
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4812      	ldr	r0, [pc, #72]	@ (8006fc4 <HAL_PCD_MspInit+0xa4>)
 8006f7c:	f7fa fab8 	bl	80014f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f80:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc0 <HAL_PCD_MspInit+0xa0>)
 8006f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f84:	4a0e      	ldr	r2, [pc, #56]	@ (8006fc0 <HAL_PCD_MspInit+0xa0>)
 8006f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f8a:	6353      	str	r3, [r2, #52]	@ 0x34
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc0 <HAL_PCD_MspInit+0xa0>)
 8006f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f94:	4a0a      	ldr	r2, [pc, #40]	@ (8006fc0 <HAL_PCD_MspInit+0xa0>)
 8006f96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8006f9c:	4b08      	ldr	r3, [pc, #32]	@ (8006fc0 <HAL_PCD_MspInit+0xa0>)
 8006f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2100      	movs	r1, #0
 8006fac:	2043      	movs	r0, #67	@ 0x43
 8006fae:	f7fa fa68 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006fb2:	2043      	movs	r0, #67	@ 0x43
 8006fb4:	f7fa fa81 	bl	80014ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006fb8:	bf00      	nop
 8006fba:	3728      	adds	r7, #40	@ 0x28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	40023800 	.word	0x40023800
 8006fc4:	40020000 	.word	0x40020000

08006fc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4610      	mov	r0, r2
 8006fe0:	f7fe fb51 	bl	8005686 <USBD_LL_SetupStage>
}
 8006fe4:	bf00      	nop
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006ffe:	78fa      	ldrb	r2, [r7, #3]
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	4613      	mov	r3, r2
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	78fb      	ldrb	r3, [r7, #3]
 8007014:	4619      	mov	r1, r3
 8007016:	f7fe fb8b 	bl	8005730 <USBD_LL_DataOutStage>
}
 800701a:	bf00      	nop
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	460b      	mov	r3, r1
 800702c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007034:	78fa      	ldrb	r2, [r7, #3]
 8007036:	6879      	ldr	r1, [r7, #4]
 8007038:	4613      	mov	r3, r2
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	440b      	add	r3, r1
 8007042:	3320      	adds	r3, #32
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	78fb      	ldrb	r3, [r7, #3]
 8007048:	4619      	mov	r1, r3
 800704a:	f7fe fc2d 	bl	80058a8 <USBD_LL_DataInStage>
}
 800704e:	bf00      	nop
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007064:	4618      	mov	r0, r3
 8007066:	f7fe fd71 	bl	8005b4c <USBD_LL_SOF>
}
 800706a:	bf00      	nop
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800707a:	2301      	movs	r3, #1
 800707c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	79db      	ldrb	r3, [r3, #7]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d102      	bne.n	800708c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]
 800708a:	e008      	b.n	800709e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	79db      	ldrb	r3, [r3, #7]
 8007090:	2b02      	cmp	r3, #2
 8007092:	d102      	bne.n	800709a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007094:	2301      	movs	r3, #1
 8007096:	73fb      	strb	r3, [r7, #15]
 8007098:	e001      	b.n	800709e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800709a:	f7f9 ff39 	bl	8000f10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070a4:	7bfa      	ldrb	r2, [r7, #15]
 80070a6:	4611      	mov	r1, r2
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fe fd0b 	bl	8005ac4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe fcb2 	bl	8005a1e <USBD_LL_Reset>
}
 80070ba:	bf00      	nop
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fe fd06 	bl	8005ae4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6812      	ldr	r2, [r2, #0]
 80070e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80070ea:	f043 0301 	orr.w	r3, r3, #1
 80070ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	7adb      	ldrb	r3, [r3, #11]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d005      	beq.n	8007104 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070f8:	4b04      	ldr	r3, [pc, #16]	@ (800710c <HAL_PCD_SuspendCallback+0x48>)
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	4a03      	ldr	r2, [pc, #12]	@ (800710c <HAL_PCD_SuspendCallback+0x48>)
 80070fe:	f043 0306 	orr.w	r3, r3, #6
 8007102:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007104:	bf00      	nop
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	e000ed00 	.word	0xe000ed00

08007110 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe fcfc 	bl	8005b1c <USBD_LL_Resume>
}
 8007124:	bf00      	nop
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800713e:	78fa      	ldrb	r2, [r7, #3]
 8007140:	4611      	mov	r1, r2
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fd54 	bl	8005bf0 <USBD_LL_IsoOUTIncomplete>
}
 8007148:	bf00      	nop
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007162:	78fa      	ldrb	r2, [r7, #3]
 8007164:	4611      	mov	r1, r2
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe fd10 	bl	8005b8c <USBD_LL_IsoINIncomplete>
}
 800716c:	bf00      	nop
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe fd66 	bl	8005c54 <USBD_LL_DevConnected>
}
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe fd63 	bl	8005c6a <USBD_LL_DevDisconnected>
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d13c      	bne.n	8007236 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80071bc:	4a20      	ldr	r2, [pc, #128]	@ (8007240 <USBD_LL_Init+0x94>)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a1e      	ldr	r2, [pc, #120]	@ (8007240 <USBD_LL_Init+0x94>)
 80071c8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80071cc:	4b1c      	ldr	r3, [pc, #112]	@ (8007240 <USBD_LL_Init+0x94>)
 80071ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80071d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80071d4:	4b1a      	ldr	r3, [pc, #104]	@ (8007240 <USBD_LL_Init+0x94>)
 80071d6:	2204      	movs	r2, #4
 80071d8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80071da:	4b19      	ldr	r3, [pc, #100]	@ (8007240 <USBD_LL_Init+0x94>)
 80071dc:	2202      	movs	r2, #2
 80071de:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80071e0:	4b17      	ldr	r3, [pc, #92]	@ (8007240 <USBD_LL_Init+0x94>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80071e6:	4b16      	ldr	r3, [pc, #88]	@ (8007240 <USBD_LL_Init+0x94>)
 80071e8:	2202      	movs	r2, #2
 80071ea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80071ec:	4b14      	ldr	r3, [pc, #80]	@ (8007240 <USBD_LL_Init+0x94>)
 80071ee:	2200      	movs	r2, #0
 80071f0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80071f2:	4b13      	ldr	r3, [pc, #76]	@ (8007240 <USBD_LL_Init+0x94>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80071f8:	4b11      	ldr	r3, [pc, #68]	@ (8007240 <USBD_LL_Init+0x94>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80071fe:	4b10      	ldr	r3, [pc, #64]	@ (8007240 <USBD_LL_Init+0x94>)
 8007200:	2200      	movs	r2, #0
 8007202:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007204:	4b0e      	ldr	r3, [pc, #56]	@ (8007240 <USBD_LL_Init+0x94>)
 8007206:	2200      	movs	r2, #0
 8007208:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800720a:	480d      	ldr	r0, [pc, #52]	@ (8007240 <USBD_LL_Init+0x94>)
 800720c:	f7fa fb27 	bl	800185e <HAL_PCD_Init>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007216:	f7f9 fe7b 	bl	8000f10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800721a:	2180      	movs	r1, #128	@ 0x80
 800721c:	4808      	ldr	r0, [pc, #32]	@ (8007240 <USBD_LL_Init+0x94>)
 800721e:	f7fb fd54 	bl	8002cca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007222:	2240      	movs	r2, #64	@ 0x40
 8007224:	2100      	movs	r1, #0
 8007226:	4806      	ldr	r0, [pc, #24]	@ (8007240 <USBD_LL_Init+0x94>)
 8007228:	f7fb fd08 	bl	8002c3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800722c:	2280      	movs	r2, #128	@ 0x80
 800722e:	2101      	movs	r1, #1
 8007230:	4803      	ldr	r0, [pc, #12]	@ (8007240 <USBD_LL_Init+0x94>)
 8007232:	f7fb fd03 	bl	8002c3c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	200018a8 	.word	0x200018a8

08007244 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800725a:	4618      	mov	r0, r3
 800725c:	f7fa fc0e 	bl	8001a7c <HAL_PCD_Start>
 8007260:	4603      	mov	r3, r0
 8007262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	4618      	mov	r0, r3
 8007268:	f000 f942 	bl	80074f0 <USBD_Get_USB_Status>
 800726c:	4603      	mov	r3, r0
 800726e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007270:	7bbb      	ldrb	r3, [r7, #14]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	4608      	mov	r0, r1
 8007284:	4611      	mov	r1, r2
 8007286:	461a      	mov	r2, r3
 8007288:	4603      	mov	r3, r0
 800728a:	70fb      	strb	r3, [r7, #3]
 800728c:	460b      	mov	r3, r1
 800728e:	70bb      	strb	r3, [r7, #2]
 8007290:	4613      	mov	r3, r2
 8007292:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80072a2:	78bb      	ldrb	r3, [r7, #2]
 80072a4:	883a      	ldrh	r2, [r7, #0]
 80072a6:	78f9      	ldrb	r1, [r7, #3]
 80072a8:	f7fb f8e2 	bl	8002470 <HAL_PCD_EP_Open>
 80072ac:	4603      	mov	r3, r0
 80072ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 f91c 	bl	80074f0 <USBD_Get_USB_Status>
 80072b8:	4603      	mov	r3, r0
 80072ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	460b      	mov	r3, r1
 80072d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80072e0:	78fa      	ldrb	r2, [r7, #3]
 80072e2:	4611      	mov	r1, r2
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fb f92d 	bl	8002544 <HAL_PCD_EP_Close>
 80072ea:	4603      	mov	r3, r0
 80072ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 f8fd 	bl	80074f0 <USBD_Get_USB_Status>
 80072f6:	4603      	mov	r3, r0
 80072f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800731e:	78fa      	ldrb	r2, [r7, #3]
 8007320:	4611      	mov	r1, r2
 8007322:	4618      	mov	r0, r3
 8007324:	f7fb f9e5 	bl	80026f2 <HAL_PCD_EP_SetStall>
 8007328:	4603      	mov	r3, r0
 800732a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	4618      	mov	r0, r3
 8007330:	f000 f8de 	bl	80074f0 <USBD_Get_USB_Status>
 8007334:	4603      	mov	r3, r0
 8007336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007338:	7bbb      	ldrb	r3, [r7, #14]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800735c:	78fa      	ldrb	r2, [r7, #3]
 800735e:	4611      	mov	r1, r2
 8007360:	4618      	mov	r0, r3
 8007362:	f7fb fa29 	bl	80027b8 <HAL_PCD_EP_ClrStall>
 8007366:	4603      	mov	r3, r0
 8007368:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	4618      	mov	r0, r3
 800736e:	f000 f8bf 	bl	80074f0 <USBD_Get_USB_Status>
 8007372:	4603      	mov	r3, r0
 8007374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007376:	7bbb      	ldrb	r3, [r7, #14]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007392:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007398:	2b00      	cmp	r3, #0
 800739a:	da0b      	bge.n	80073b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800739c:	78fb      	ldrb	r3, [r7, #3]
 800739e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073a2:	68f9      	ldr	r1, [r7, #12]
 80073a4:	4613      	mov	r3, r2
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	4413      	add	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	440b      	add	r3, r1
 80073ae:	3316      	adds	r3, #22
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	e00b      	b.n	80073cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073ba:	68f9      	ldr	r1, [r7, #12]
 80073bc:	4613      	mov	r3, r2
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	4413      	add	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	440b      	add	r3, r1
 80073c6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80073ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073f2:	78fa      	ldrb	r2, [r7, #3]
 80073f4:	4611      	mov	r1, r2
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fb f816 	bl	8002428 <HAL_PCD_SetAddress>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 f874 	bl	80074f0 <USBD_Get_USB_Status>
 8007408:	4603      	mov	r3, r0
 800740a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800740c:	7bbb      	ldrb	r3, [r7, #14]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b086      	sub	sp, #24
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	603b      	str	r3, [r7, #0]
 8007422:	460b      	mov	r3, r1
 8007424:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007434:	7af9      	ldrb	r1, [r7, #11]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	f7fb f920 	bl	800267e <HAL_PCD_EP_Transmit>
 800743e:	4603      	mov	r3, r0
 8007440:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007442:	7dfb      	ldrb	r3, [r7, #23]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 f853 	bl	80074f0 <USBD_Get_USB_Status>
 800744a:	4603      	mov	r3, r0
 800744c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800744e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	460b      	mov	r3, r1
 8007466:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007468:	2300      	movs	r3, #0
 800746a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007476:	7af9      	ldrb	r1, [r7, #11]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	f7fb f8ac 	bl	80025d8 <HAL_PCD_EP_Receive>
 8007480:	4603      	mov	r3, r0
 8007482:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	4618      	mov	r0, r3
 8007488:	f000 f832 	bl	80074f0 <USBD_Get_USB_Status>
 800748c:	4603      	mov	r3, r0
 800748e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007490:	7dbb      	ldrb	r3, [r7, #22]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b082      	sub	sp, #8
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	460b      	mov	r3, r1
 80074a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074ac:	78fa      	ldrb	r2, [r7, #3]
 80074ae:	4611      	mov	r1, r2
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fb f8cc 	bl	800264e <HAL_PCD_EP_GetRxCount>
 80074b6:	4603      	mov	r3, r0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80074c8:	4b03      	ldr	r3, [pc, #12]	@ (80074d8 <USBD_static_malloc+0x18>)
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	20001d8c 	.word	0x20001d8c

080074dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]

}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	4603      	mov	r3, r0
 80074f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80074fe:	79fb      	ldrb	r3, [r7, #7]
 8007500:	2b03      	cmp	r3, #3
 8007502:	d817      	bhi.n	8007534 <USBD_Get_USB_Status+0x44>
 8007504:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <USBD_Get_USB_Status+0x1c>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	0800751d 	.word	0x0800751d
 8007510:	08007523 	.word	0x08007523
 8007514:	08007529 	.word	0x08007529
 8007518:	0800752f 	.word	0x0800752f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	73fb      	strb	r3, [r7, #15]
    break;
 8007520:	e00b      	b.n	800753a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007522:	2303      	movs	r3, #3
 8007524:	73fb      	strb	r3, [r7, #15]
    break;
 8007526:	e008      	b.n	800753a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007528:	2301      	movs	r3, #1
 800752a:	73fb      	strb	r3, [r7, #15]
    break;
 800752c:	e005      	b.n	800753a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800752e:	2303      	movs	r3, #3
 8007530:	73fb      	strb	r3, [r7, #15]
    break;
 8007532:	e002      	b.n	800753a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007534:	2303      	movs	r3, #3
 8007536:	73fb      	strb	r3, [r7, #15]
    break;
 8007538:	bf00      	nop
  }
  return usb_status;
 800753a:	7bfb      	ldrb	r3, [r7, #15]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <std>:
 8007548:	2300      	movs	r3, #0
 800754a:	b510      	push	{r4, lr}
 800754c:	4604      	mov	r4, r0
 800754e:	e9c0 3300 	strd	r3, r3, [r0]
 8007552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007556:	6083      	str	r3, [r0, #8]
 8007558:	8181      	strh	r1, [r0, #12]
 800755a:	6643      	str	r3, [r0, #100]	@ 0x64
 800755c:	81c2      	strh	r2, [r0, #14]
 800755e:	6183      	str	r3, [r0, #24]
 8007560:	4619      	mov	r1, r3
 8007562:	2208      	movs	r2, #8
 8007564:	305c      	adds	r0, #92	@ 0x5c
 8007566:	f000 f9f9 	bl	800795c <memset>
 800756a:	4b0d      	ldr	r3, [pc, #52]	@ (80075a0 <std+0x58>)
 800756c:	6263      	str	r3, [r4, #36]	@ 0x24
 800756e:	4b0d      	ldr	r3, [pc, #52]	@ (80075a4 <std+0x5c>)
 8007570:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007572:	4b0d      	ldr	r3, [pc, #52]	@ (80075a8 <std+0x60>)
 8007574:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007576:	4b0d      	ldr	r3, [pc, #52]	@ (80075ac <std+0x64>)
 8007578:	6323      	str	r3, [r4, #48]	@ 0x30
 800757a:	4b0d      	ldr	r3, [pc, #52]	@ (80075b0 <std+0x68>)
 800757c:	6224      	str	r4, [r4, #32]
 800757e:	429c      	cmp	r4, r3
 8007580:	d006      	beq.n	8007590 <std+0x48>
 8007582:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007586:	4294      	cmp	r4, r2
 8007588:	d002      	beq.n	8007590 <std+0x48>
 800758a:	33d0      	adds	r3, #208	@ 0xd0
 800758c:	429c      	cmp	r4, r3
 800758e:	d105      	bne.n	800759c <std+0x54>
 8007590:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007598:	f000 ba58 	b.w	8007a4c <__retarget_lock_init_recursive>
 800759c:	bd10      	pop	{r4, pc}
 800759e:	bf00      	nop
 80075a0:	080077ad 	.word	0x080077ad
 80075a4:	080077cf 	.word	0x080077cf
 80075a8:	08007807 	.word	0x08007807
 80075ac:	0800782b 	.word	0x0800782b
 80075b0:	20001fac 	.word	0x20001fac

080075b4 <stdio_exit_handler>:
 80075b4:	4a02      	ldr	r2, [pc, #8]	@ (80075c0 <stdio_exit_handler+0xc>)
 80075b6:	4903      	ldr	r1, [pc, #12]	@ (80075c4 <stdio_exit_handler+0x10>)
 80075b8:	4803      	ldr	r0, [pc, #12]	@ (80075c8 <stdio_exit_handler+0x14>)
 80075ba:	f000 b869 	b.w	8007690 <_fwalk_sglue>
 80075be:	bf00      	nop
 80075c0:	20000174 	.word	0x20000174
 80075c4:	080082e9 	.word	0x080082e9
 80075c8:	20000184 	.word	0x20000184

080075cc <cleanup_stdio>:
 80075cc:	6841      	ldr	r1, [r0, #4]
 80075ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007600 <cleanup_stdio+0x34>)
 80075d0:	4299      	cmp	r1, r3
 80075d2:	b510      	push	{r4, lr}
 80075d4:	4604      	mov	r4, r0
 80075d6:	d001      	beq.n	80075dc <cleanup_stdio+0x10>
 80075d8:	f000 fe86 	bl	80082e8 <_fflush_r>
 80075dc:	68a1      	ldr	r1, [r4, #8]
 80075de:	4b09      	ldr	r3, [pc, #36]	@ (8007604 <cleanup_stdio+0x38>)
 80075e0:	4299      	cmp	r1, r3
 80075e2:	d002      	beq.n	80075ea <cleanup_stdio+0x1e>
 80075e4:	4620      	mov	r0, r4
 80075e6:	f000 fe7f 	bl	80082e8 <_fflush_r>
 80075ea:	68e1      	ldr	r1, [r4, #12]
 80075ec:	4b06      	ldr	r3, [pc, #24]	@ (8007608 <cleanup_stdio+0x3c>)
 80075ee:	4299      	cmp	r1, r3
 80075f0:	d004      	beq.n	80075fc <cleanup_stdio+0x30>
 80075f2:	4620      	mov	r0, r4
 80075f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f8:	f000 be76 	b.w	80082e8 <_fflush_r>
 80075fc:	bd10      	pop	{r4, pc}
 80075fe:	bf00      	nop
 8007600:	20001fac 	.word	0x20001fac
 8007604:	20002014 	.word	0x20002014
 8007608:	2000207c 	.word	0x2000207c

0800760c <global_stdio_init.part.0>:
 800760c:	b510      	push	{r4, lr}
 800760e:	4b0b      	ldr	r3, [pc, #44]	@ (800763c <global_stdio_init.part.0+0x30>)
 8007610:	4c0b      	ldr	r4, [pc, #44]	@ (8007640 <global_stdio_init.part.0+0x34>)
 8007612:	4a0c      	ldr	r2, [pc, #48]	@ (8007644 <global_stdio_init.part.0+0x38>)
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	4620      	mov	r0, r4
 8007618:	2200      	movs	r2, #0
 800761a:	2104      	movs	r1, #4
 800761c:	f7ff ff94 	bl	8007548 <std>
 8007620:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007624:	2201      	movs	r2, #1
 8007626:	2109      	movs	r1, #9
 8007628:	f7ff ff8e 	bl	8007548 <std>
 800762c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007630:	2202      	movs	r2, #2
 8007632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007636:	2112      	movs	r1, #18
 8007638:	f7ff bf86 	b.w	8007548 <std>
 800763c:	200020e4 	.word	0x200020e4
 8007640:	20001fac 	.word	0x20001fac
 8007644:	080075b5 	.word	0x080075b5

08007648 <__sfp_lock_acquire>:
 8007648:	4801      	ldr	r0, [pc, #4]	@ (8007650 <__sfp_lock_acquire+0x8>)
 800764a:	f000 ba00 	b.w	8007a4e <__retarget_lock_acquire_recursive>
 800764e:	bf00      	nop
 8007650:	200020ed 	.word	0x200020ed

08007654 <__sfp_lock_release>:
 8007654:	4801      	ldr	r0, [pc, #4]	@ (800765c <__sfp_lock_release+0x8>)
 8007656:	f000 b9fb 	b.w	8007a50 <__retarget_lock_release_recursive>
 800765a:	bf00      	nop
 800765c:	200020ed 	.word	0x200020ed

08007660 <__sinit>:
 8007660:	b510      	push	{r4, lr}
 8007662:	4604      	mov	r4, r0
 8007664:	f7ff fff0 	bl	8007648 <__sfp_lock_acquire>
 8007668:	6a23      	ldr	r3, [r4, #32]
 800766a:	b11b      	cbz	r3, 8007674 <__sinit+0x14>
 800766c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007670:	f7ff bff0 	b.w	8007654 <__sfp_lock_release>
 8007674:	4b04      	ldr	r3, [pc, #16]	@ (8007688 <__sinit+0x28>)
 8007676:	6223      	str	r3, [r4, #32]
 8007678:	4b04      	ldr	r3, [pc, #16]	@ (800768c <__sinit+0x2c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1f5      	bne.n	800766c <__sinit+0xc>
 8007680:	f7ff ffc4 	bl	800760c <global_stdio_init.part.0>
 8007684:	e7f2      	b.n	800766c <__sinit+0xc>
 8007686:	bf00      	nop
 8007688:	080075cd 	.word	0x080075cd
 800768c:	200020e4 	.word	0x200020e4

08007690 <_fwalk_sglue>:
 8007690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007694:	4607      	mov	r7, r0
 8007696:	4688      	mov	r8, r1
 8007698:	4614      	mov	r4, r2
 800769a:	2600      	movs	r6, #0
 800769c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076a0:	f1b9 0901 	subs.w	r9, r9, #1
 80076a4:	d505      	bpl.n	80076b2 <_fwalk_sglue+0x22>
 80076a6:	6824      	ldr	r4, [r4, #0]
 80076a8:	2c00      	cmp	r4, #0
 80076aa:	d1f7      	bne.n	800769c <_fwalk_sglue+0xc>
 80076ac:	4630      	mov	r0, r6
 80076ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076b2:	89ab      	ldrh	r3, [r5, #12]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d907      	bls.n	80076c8 <_fwalk_sglue+0x38>
 80076b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076bc:	3301      	adds	r3, #1
 80076be:	d003      	beq.n	80076c8 <_fwalk_sglue+0x38>
 80076c0:	4629      	mov	r1, r5
 80076c2:	4638      	mov	r0, r7
 80076c4:	47c0      	blx	r8
 80076c6:	4306      	orrs	r6, r0
 80076c8:	3568      	adds	r5, #104	@ 0x68
 80076ca:	e7e9      	b.n	80076a0 <_fwalk_sglue+0x10>

080076cc <iprintf>:
 80076cc:	b40f      	push	{r0, r1, r2, r3}
 80076ce:	b507      	push	{r0, r1, r2, lr}
 80076d0:	4906      	ldr	r1, [pc, #24]	@ (80076ec <iprintf+0x20>)
 80076d2:	ab04      	add	r3, sp, #16
 80076d4:	6808      	ldr	r0, [r1, #0]
 80076d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80076da:	6881      	ldr	r1, [r0, #8]
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	f000 fadb 	bl	8007c98 <_vfiprintf_r>
 80076e2:	b003      	add	sp, #12
 80076e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80076e8:	b004      	add	sp, #16
 80076ea:	4770      	bx	lr
 80076ec:	20000180 	.word	0x20000180

080076f0 <_puts_r>:
 80076f0:	6a03      	ldr	r3, [r0, #32]
 80076f2:	b570      	push	{r4, r5, r6, lr}
 80076f4:	6884      	ldr	r4, [r0, #8]
 80076f6:	4605      	mov	r5, r0
 80076f8:	460e      	mov	r6, r1
 80076fa:	b90b      	cbnz	r3, 8007700 <_puts_r+0x10>
 80076fc:	f7ff ffb0 	bl	8007660 <__sinit>
 8007700:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007702:	07db      	lsls	r3, r3, #31
 8007704:	d405      	bmi.n	8007712 <_puts_r+0x22>
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	0598      	lsls	r0, r3, #22
 800770a:	d402      	bmi.n	8007712 <_puts_r+0x22>
 800770c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800770e:	f000 f99e 	bl	8007a4e <__retarget_lock_acquire_recursive>
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	0719      	lsls	r1, r3, #28
 8007716:	d502      	bpl.n	800771e <_puts_r+0x2e>
 8007718:	6923      	ldr	r3, [r4, #16]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d135      	bne.n	800778a <_puts_r+0x9a>
 800771e:	4621      	mov	r1, r4
 8007720:	4628      	mov	r0, r5
 8007722:	f000 f8c5 	bl	80078b0 <__swsetup_r>
 8007726:	b380      	cbz	r0, 800778a <_puts_r+0x9a>
 8007728:	f04f 35ff 	mov.w	r5, #4294967295
 800772c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800772e:	07da      	lsls	r2, r3, #31
 8007730:	d405      	bmi.n	800773e <_puts_r+0x4e>
 8007732:	89a3      	ldrh	r3, [r4, #12]
 8007734:	059b      	lsls	r3, r3, #22
 8007736:	d402      	bmi.n	800773e <_puts_r+0x4e>
 8007738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800773a:	f000 f989 	bl	8007a50 <__retarget_lock_release_recursive>
 800773e:	4628      	mov	r0, r5
 8007740:	bd70      	pop	{r4, r5, r6, pc}
 8007742:	2b00      	cmp	r3, #0
 8007744:	da04      	bge.n	8007750 <_puts_r+0x60>
 8007746:	69a2      	ldr	r2, [r4, #24]
 8007748:	429a      	cmp	r2, r3
 800774a:	dc17      	bgt.n	800777c <_puts_r+0x8c>
 800774c:	290a      	cmp	r1, #10
 800774e:	d015      	beq.n	800777c <_puts_r+0x8c>
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	6022      	str	r2, [r4, #0]
 8007756:	7019      	strb	r1, [r3, #0]
 8007758:	68a3      	ldr	r3, [r4, #8]
 800775a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800775e:	3b01      	subs	r3, #1
 8007760:	60a3      	str	r3, [r4, #8]
 8007762:	2900      	cmp	r1, #0
 8007764:	d1ed      	bne.n	8007742 <_puts_r+0x52>
 8007766:	2b00      	cmp	r3, #0
 8007768:	da11      	bge.n	800778e <_puts_r+0x9e>
 800776a:	4622      	mov	r2, r4
 800776c:	210a      	movs	r1, #10
 800776e:	4628      	mov	r0, r5
 8007770:	f000 f85f 	bl	8007832 <__swbuf_r>
 8007774:	3001      	adds	r0, #1
 8007776:	d0d7      	beq.n	8007728 <_puts_r+0x38>
 8007778:	250a      	movs	r5, #10
 800777a:	e7d7      	b.n	800772c <_puts_r+0x3c>
 800777c:	4622      	mov	r2, r4
 800777e:	4628      	mov	r0, r5
 8007780:	f000 f857 	bl	8007832 <__swbuf_r>
 8007784:	3001      	adds	r0, #1
 8007786:	d1e7      	bne.n	8007758 <_puts_r+0x68>
 8007788:	e7ce      	b.n	8007728 <_puts_r+0x38>
 800778a:	3e01      	subs	r6, #1
 800778c:	e7e4      	b.n	8007758 <_puts_r+0x68>
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	6022      	str	r2, [r4, #0]
 8007794:	220a      	movs	r2, #10
 8007796:	701a      	strb	r2, [r3, #0]
 8007798:	e7ee      	b.n	8007778 <_puts_r+0x88>
	...

0800779c <puts>:
 800779c:	4b02      	ldr	r3, [pc, #8]	@ (80077a8 <puts+0xc>)
 800779e:	4601      	mov	r1, r0
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	f7ff bfa5 	b.w	80076f0 <_puts_r>
 80077a6:	bf00      	nop
 80077a8:	20000180 	.word	0x20000180

080077ac <__sread>:
 80077ac:	b510      	push	{r4, lr}
 80077ae:	460c      	mov	r4, r1
 80077b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b4:	f000 f8fc 	bl	80079b0 <_read_r>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	bfab      	itete	ge
 80077bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80077be:	89a3      	ldrhlt	r3, [r4, #12]
 80077c0:	181b      	addge	r3, r3, r0
 80077c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80077c6:	bfac      	ite	ge
 80077c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80077ca:	81a3      	strhlt	r3, [r4, #12]
 80077cc:	bd10      	pop	{r4, pc}

080077ce <__swrite>:
 80077ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077d2:	461f      	mov	r7, r3
 80077d4:	898b      	ldrh	r3, [r1, #12]
 80077d6:	05db      	lsls	r3, r3, #23
 80077d8:	4605      	mov	r5, r0
 80077da:	460c      	mov	r4, r1
 80077dc:	4616      	mov	r6, r2
 80077de:	d505      	bpl.n	80077ec <__swrite+0x1e>
 80077e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077e4:	2302      	movs	r3, #2
 80077e6:	2200      	movs	r2, #0
 80077e8:	f000 f8d0 	bl	800798c <_lseek_r>
 80077ec:	89a3      	ldrh	r3, [r4, #12]
 80077ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077f6:	81a3      	strh	r3, [r4, #12]
 80077f8:	4632      	mov	r2, r6
 80077fa:	463b      	mov	r3, r7
 80077fc:	4628      	mov	r0, r5
 80077fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007802:	f000 b8e7 	b.w	80079d4 <_write_r>

08007806 <__sseek>:
 8007806:	b510      	push	{r4, lr}
 8007808:	460c      	mov	r4, r1
 800780a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800780e:	f000 f8bd 	bl	800798c <_lseek_r>
 8007812:	1c43      	adds	r3, r0, #1
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	bf15      	itete	ne
 8007818:	6560      	strne	r0, [r4, #84]	@ 0x54
 800781a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800781e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007822:	81a3      	strheq	r3, [r4, #12]
 8007824:	bf18      	it	ne
 8007826:	81a3      	strhne	r3, [r4, #12]
 8007828:	bd10      	pop	{r4, pc}

0800782a <__sclose>:
 800782a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800782e:	f000 b89d 	b.w	800796c <_close_r>

08007832 <__swbuf_r>:
 8007832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007834:	460e      	mov	r6, r1
 8007836:	4614      	mov	r4, r2
 8007838:	4605      	mov	r5, r0
 800783a:	b118      	cbz	r0, 8007844 <__swbuf_r+0x12>
 800783c:	6a03      	ldr	r3, [r0, #32]
 800783e:	b90b      	cbnz	r3, 8007844 <__swbuf_r+0x12>
 8007840:	f7ff ff0e 	bl	8007660 <__sinit>
 8007844:	69a3      	ldr	r3, [r4, #24]
 8007846:	60a3      	str	r3, [r4, #8]
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	071a      	lsls	r2, r3, #28
 800784c:	d501      	bpl.n	8007852 <__swbuf_r+0x20>
 800784e:	6923      	ldr	r3, [r4, #16]
 8007850:	b943      	cbnz	r3, 8007864 <__swbuf_r+0x32>
 8007852:	4621      	mov	r1, r4
 8007854:	4628      	mov	r0, r5
 8007856:	f000 f82b 	bl	80078b0 <__swsetup_r>
 800785a:	b118      	cbz	r0, 8007864 <__swbuf_r+0x32>
 800785c:	f04f 37ff 	mov.w	r7, #4294967295
 8007860:	4638      	mov	r0, r7
 8007862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	6922      	ldr	r2, [r4, #16]
 8007868:	1a98      	subs	r0, r3, r2
 800786a:	6963      	ldr	r3, [r4, #20]
 800786c:	b2f6      	uxtb	r6, r6
 800786e:	4283      	cmp	r3, r0
 8007870:	4637      	mov	r7, r6
 8007872:	dc05      	bgt.n	8007880 <__swbuf_r+0x4e>
 8007874:	4621      	mov	r1, r4
 8007876:	4628      	mov	r0, r5
 8007878:	f000 fd36 	bl	80082e8 <_fflush_r>
 800787c:	2800      	cmp	r0, #0
 800787e:	d1ed      	bne.n	800785c <__swbuf_r+0x2a>
 8007880:	68a3      	ldr	r3, [r4, #8]
 8007882:	3b01      	subs	r3, #1
 8007884:	60a3      	str	r3, [r4, #8]
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	6022      	str	r2, [r4, #0]
 800788c:	701e      	strb	r6, [r3, #0]
 800788e:	6962      	ldr	r2, [r4, #20]
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	429a      	cmp	r2, r3
 8007894:	d004      	beq.n	80078a0 <__swbuf_r+0x6e>
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	07db      	lsls	r3, r3, #31
 800789a:	d5e1      	bpl.n	8007860 <__swbuf_r+0x2e>
 800789c:	2e0a      	cmp	r6, #10
 800789e:	d1df      	bne.n	8007860 <__swbuf_r+0x2e>
 80078a0:	4621      	mov	r1, r4
 80078a2:	4628      	mov	r0, r5
 80078a4:	f000 fd20 	bl	80082e8 <_fflush_r>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d0d9      	beq.n	8007860 <__swbuf_r+0x2e>
 80078ac:	e7d6      	b.n	800785c <__swbuf_r+0x2a>
	...

080078b0 <__swsetup_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	4b29      	ldr	r3, [pc, #164]	@ (8007958 <__swsetup_r+0xa8>)
 80078b4:	4605      	mov	r5, r0
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	460c      	mov	r4, r1
 80078ba:	b118      	cbz	r0, 80078c4 <__swsetup_r+0x14>
 80078bc:	6a03      	ldr	r3, [r0, #32]
 80078be:	b90b      	cbnz	r3, 80078c4 <__swsetup_r+0x14>
 80078c0:	f7ff fece 	bl	8007660 <__sinit>
 80078c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078c8:	0719      	lsls	r1, r3, #28
 80078ca:	d422      	bmi.n	8007912 <__swsetup_r+0x62>
 80078cc:	06da      	lsls	r2, r3, #27
 80078ce:	d407      	bmi.n	80078e0 <__swsetup_r+0x30>
 80078d0:	2209      	movs	r2, #9
 80078d2:	602a      	str	r2, [r5, #0]
 80078d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078d8:	81a3      	strh	r3, [r4, #12]
 80078da:	f04f 30ff 	mov.w	r0, #4294967295
 80078de:	e033      	b.n	8007948 <__swsetup_r+0x98>
 80078e0:	0758      	lsls	r0, r3, #29
 80078e2:	d512      	bpl.n	800790a <__swsetup_r+0x5a>
 80078e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078e6:	b141      	cbz	r1, 80078fa <__swsetup_r+0x4a>
 80078e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078ec:	4299      	cmp	r1, r3
 80078ee:	d002      	beq.n	80078f6 <__swsetup_r+0x46>
 80078f0:	4628      	mov	r0, r5
 80078f2:	f000 f8af 	bl	8007a54 <_free_r>
 80078f6:	2300      	movs	r3, #0
 80078f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007900:	81a3      	strh	r3, [r4, #12]
 8007902:	2300      	movs	r3, #0
 8007904:	6063      	str	r3, [r4, #4]
 8007906:	6923      	ldr	r3, [r4, #16]
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	89a3      	ldrh	r3, [r4, #12]
 800790c:	f043 0308 	orr.w	r3, r3, #8
 8007910:	81a3      	strh	r3, [r4, #12]
 8007912:	6923      	ldr	r3, [r4, #16]
 8007914:	b94b      	cbnz	r3, 800792a <__swsetup_r+0x7a>
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800791c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007920:	d003      	beq.n	800792a <__swsetup_r+0x7a>
 8007922:	4621      	mov	r1, r4
 8007924:	4628      	mov	r0, r5
 8007926:	f000 fd2d 	bl	8008384 <__smakebuf_r>
 800792a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792e:	f013 0201 	ands.w	r2, r3, #1
 8007932:	d00a      	beq.n	800794a <__swsetup_r+0x9a>
 8007934:	2200      	movs	r2, #0
 8007936:	60a2      	str	r2, [r4, #8]
 8007938:	6962      	ldr	r2, [r4, #20]
 800793a:	4252      	negs	r2, r2
 800793c:	61a2      	str	r2, [r4, #24]
 800793e:	6922      	ldr	r2, [r4, #16]
 8007940:	b942      	cbnz	r2, 8007954 <__swsetup_r+0xa4>
 8007942:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007946:	d1c5      	bne.n	80078d4 <__swsetup_r+0x24>
 8007948:	bd38      	pop	{r3, r4, r5, pc}
 800794a:	0799      	lsls	r1, r3, #30
 800794c:	bf58      	it	pl
 800794e:	6962      	ldrpl	r2, [r4, #20]
 8007950:	60a2      	str	r2, [r4, #8]
 8007952:	e7f4      	b.n	800793e <__swsetup_r+0x8e>
 8007954:	2000      	movs	r0, #0
 8007956:	e7f7      	b.n	8007948 <__swsetup_r+0x98>
 8007958:	20000180 	.word	0x20000180

0800795c <memset>:
 800795c:	4402      	add	r2, r0
 800795e:	4603      	mov	r3, r0
 8007960:	4293      	cmp	r3, r2
 8007962:	d100      	bne.n	8007966 <memset+0xa>
 8007964:	4770      	bx	lr
 8007966:	f803 1b01 	strb.w	r1, [r3], #1
 800796a:	e7f9      	b.n	8007960 <memset+0x4>

0800796c <_close_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4d06      	ldr	r5, [pc, #24]	@ (8007988 <_close_r+0x1c>)
 8007970:	2300      	movs	r3, #0
 8007972:	4604      	mov	r4, r0
 8007974:	4608      	mov	r0, r1
 8007976:	602b      	str	r3, [r5, #0]
 8007978:	f7f9 fb6b 	bl	8001052 <_close>
 800797c:	1c43      	adds	r3, r0, #1
 800797e:	d102      	bne.n	8007986 <_close_r+0x1a>
 8007980:	682b      	ldr	r3, [r5, #0]
 8007982:	b103      	cbz	r3, 8007986 <_close_r+0x1a>
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	bd38      	pop	{r3, r4, r5, pc}
 8007988:	200020e8 	.word	0x200020e8

0800798c <_lseek_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4d07      	ldr	r5, [pc, #28]	@ (80079ac <_lseek_r+0x20>)
 8007990:	4604      	mov	r4, r0
 8007992:	4608      	mov	r0, r1
 8007994:	4611      	mov	r1, r2
 8007996:	2200      	movs	r2, #0
 8007998:	602a      	str	r2, [r5, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	f7f9 fb80 	bl	80010a0 <_lseek>
 80079a0:	1c43      	adds	r3, r0, #1
 80079a2:	d102      	bne.n	80079aa <_lseek_r+0x1e>
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	b103      	cbz	r3, 80079aa <_lseek_r+0x1e>
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	bd38      	pop	{r3, r4, r5, pc}
 80079ac:	200020e8 	.word	0x200020e8

080079b0 <_read_r>:
 80079b0:	b538      	push	{r3, r4, r5, lr}
 80079b2:	4d07      	ldr	r5, [pc, #28]	@ (80079d0 <_read_r+0x20>)
 80079b4:	4604      	mov	r4, r0
 80079b6:	4608      	mov	r0, r1
 80079b8:	4611      	mov	r1, r2
 80079ba:	2200      	movs	r2, #0
 80079bc:	602a      	str	r2, [r5, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	f7f9 fb0e 	bl	8000fe0 <_read>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d102      	bne.n	80079ce <_read_r+0x1e>
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	b103      	cbz	r3, 80079ce <_read_r+0x1e>
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
 80079d0:	200020e8 	.word	0x200020e8

080079d4 <_write_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	4d07      	ldr	r5, [pc, #28]	@ (80079f4 <_write_r+0x20>)
 80079d8:	4604      	mov	r4, r0
 80079da:	4608      	mov	r0, r1
 80079dc:	4611      	mov	r1, r2
 80079de:	2200      	movs	r2, #0
 80079e0:	602a      	str	r2, [r5, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	f7f9 fb19 	bl	800101a <_write>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <_write_r+0x1e>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	b103      	cbz	r3, 80079f2 <_write_r+0x1e>
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	200020e8 	.word	0x200020e8

080079f8 <__errno>:
 80079f8:	4b01      	ldr	r3, [pc, #4]	@ (8007a00 <__errno+0x8>)
 80079fa:	6818      	ldr	r0, [r3, #0]
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	20000180 	.word	0x20000180

08007a04 <__libc_init_array>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	4d0d      	ldr	r5, [pc, #52]	@ (8007a3c <__libc_init_array+0x38>)
 8007a08:	4c0d      	ldr	r4, [pc, #52]	@ (8007a40 <__libc_init_array+0x3c>)
 8007a0a:	1b64      	subs	r4, r4, r5
 8007a0c:	10a4      	asrs	r4, r4, #2
 8007a0e:	2600      	movs	r6, #0
 8007a10:	42a6      	cmp	r6, r4
 8007a12:	d109      	bne.n	8007a28 <__libc_init_array+0x24>
 8007a14:	4d0b      	ldr	r5, [pc, #44]	@ (8007a44 <__libc_init_array+0x40>)
 8007a16:	4c0c      	ldr	r4, [pc, #48]	@ (8007a48 <__libc_init_array+0x44>)
 8007a18:	f000 fd22 	bl	8008460 <_init>
 8007a1c:	1b64      	subs	r4, r4, r5
 8007a1e:	10a4      	asrs	r4, r4, #2
 8007a20:	2600      	movs	r6, #0
 8007a22:	42a6      	cmp	r6, r4
 8007a24:	d105      	bne.n	8007a32 <__libc_init_array+0x2e>
 8007a26:	bd70      	pop	{r4, r5, r6, pc}
 8007a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a2c:	4798      	blx	r3
 8007a2e:	3601      	adds	r6, #1
 8007a30:	e7ee      	b.n	8007a10 <__libc_init_array+0xc>
 8007a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a36:	4798      	blx	r3
 8007a38:	3601      	adds	r6, #1
 8007a3a:	e7f2      	b.n	8007a22 <__libc_init_array+0x1e>
 8007a3c:	08008550 	.word	0x08008550
 8007a40:	08008550 	.word	0x08008550
 8007a44:	08008550 	.word	0x08008550
 8007a48:	08008554 	.word	0x08008554

08007a4c <__retarget_lock_init_recursive>:
 8007a4c:	4770      	bx	lr

08007a4e <__retarget_lock_acquire_recursive>:
 8007a4e:	4770      	bx	lr

08007a50 <__retarget_lock_release_recursive>:
 8007a50:	4770      	bx	lr
	...

08007a54 <_free_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4605      	mov	r5, r0
 8007a58:	2900      	cmp	r1, #0
 8007a5a:	d041      	beq.n	8007ae0 <_free_r+0x8c>
 8007a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a60:	1f0c      	subs	r4, r1, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bfb8      	it	lt
 8007a66:	18e4      	addlt	r4, r4, r3
 8007a68:	f000 f8e0 	bl	8007c2c <__malloc_lock>
 8007a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ae4 <_free_r+0x90>)
 8007a6e:	6813      	ldr	r3, [r2, #0]
 8007a70:	b933      	cbnz	r3, 8007a80 <_free_r+0x2c>
 8007a72:	6063      	str	r3, [r4, #4]
 8007a74:	6014      	str	r4, [r2, #0]
 8007a76:	4628      	mov	r0, r5
 8007a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a7c:	f000 b8dc 	b.w	8007c38 <__malloc_unlock>
 8007a80:	42a3      	cmp	r3, r4
 8007a82:	d908      	bls.n	8007a96 <_free_r+0x42>
 8007a84:	6820      	ldr	r0, [r4, #0]
 8007a86:	1821      	adds	r1, r4, r0
 8007a88:	428b      	cmp	r3, r1
 8007a8a:	bf01      	itttt	eq
 8007a8c:	6819      	ldreq	r1, [r3, #0]
 8007a8e:	685b      	ldreq	r3, [r3, #4]
 8007a90:	1809      	addeq	r1, r1, r0
 8007a92:	6021      	streq	r1, [r4, #0]
 8007a94:	e7ed      	b.n	8007a72 <_free_r+0x1e>
 8007a96:	461a      	mov	r2, r3
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	b10b      	cbz	r3, 8007aa0 <_free_r+0x4c>
 8007a9c:	42a3      	cmp	r3, r4
 8007a9e:	d9fa      	bls.n	8007a96 <_free_r+0x42>
 8007aa0:	6811      	ldr	r1, [r2, #0]
 8007aa2:	1850      	adds	r0, r2, r1
 8007aa4:	42a0      	cmp	r0, r4
 8007aa6:	d10b      	bne.n	8007ac0 <_free_r+0x6c>
 8007aa8:	6820      	ldr	r0, [r4, #0]
 8007aaa:	4401      	add	r1, r0
 8007aac:	1850      	adds	r0, r2, r1
 8007aae:	4283      	cmp	r3, r0
 8007ab0:	6011      	str	r1, [r2, #0]
 8007ab2:	d1e0      	bne.n	8007a76 <_free_r+0x22>
 8007ab4:	6818      	ldr	r0, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	6053      	str	r3, [r2, #4]
 8007aba:	4408      	add	r0, r1
 8007abc:	6010      	str	r0, [r2, #0]
 8007abe:	e7da      	b.n	8007a76 <_free_r+0x22>
 8007ac0:	d902      	bls.n	8007ac8 <_free_r+0x74>
 8007ac2:	230c      	movs	r3, #12
 8007ac4:	602b      	str	r3, [r5, #0]
 8007ac6:	e7d6      	b.n	8007a76 <_free_r+0x22>
 8007ac8:	6820      	ldr	r0, [r4, #0]
 8007aca:	1821      	adds	r1, r4, r0
 8007acc:	428b      	cmp	r3, r1
 8007ace:	bf04      	itt	eq
 8007ad0:	6819      	ldreq	r1, [r3, #0]
 8007ad2:	685b      	ldreq	r3, [r3, #4]
 8007ad4:	6063      	str	r3, [r4, #4]
 8007ad6:	bf04      	itt	eq
 8007ad8:	1809      	addeq	r1, r1, r0
 8007ada:	6021      	streq	r1, [r4, #0]
 8007adc:	6054      	str	r4, [r2, #4]
 8007ade:	e7ca      	b.n	8007a76 <_free_r+0x22>
 8007ae0:	bd38      	pop	{r3, r4, r5, pc}
 8007ae2:	bf00      	nop
 8007ae4:	200020f4 	.word	0x200020f4

08007ae8 <sbrk_aligned>:
 8007ae8:	b570      	push	{r4, r5, r6, lr}
 8007aea:	4e0f      	ldr	r6, [pc, #60]	@ (8007b28 <sbrk_aligned+0x40>)
 8007aec:	460c      	mov	r4, r1
 8007aee:	6831      	ldr	r1, [r6, #0]
 8007af0:	4605      	mov	r5, r0
 8007af2:	b911      	cbnz	r1, 8007afa <sbrk_aligned+0x12>
 8007af4:	f000 fca4 	bl	8008440 <_sbrk_r>
 8007af8:	6030      	str	r0, [r6, #0]
 8007afa:	4621      	mov	r1, r4
 8007afc:	4628      	mov	r0, r5
 8007afe:	f000 fc9f 	bl	8008440 <_sbrk_r>
 8007b02:	1c43      	adds	r3, r0, #1
 8007b04:	d103      	bne.n	8007b0e <sbrk_aligned+0x26>
 8007b06:	f04f 34ff 	mov.w	r4, #4294967295
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	bd70      	pop	{r4, r5, r6, pc}
 8007b0e:	1cc4      	adds	r4, r0, #3
 8007b10:	f024 0403 	bic.w	r4, r4, #3
 8007b14:	42a0      	cmp	r0, r4
 8007b16:	d0f8      	beq.n	8007b0a <sbrk_aligned+0x22>
 8007b18:	1a21      	subs	r1, r4, r0
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f000 fc90 	bl	8008440 <_sbrk_r>
 8007b20:	3001      	adds	r0, #1
 8007b22:	d1f2      	bne.n	8007b0a <sbrk_aligned+0x22>
 8007b24:	e7ef      	b.n	8007b06 <sbrk_aligned+0x1e>
 8007b26:	bf00      	nop
 8007b28:	200020f0 	.word	0x200020f0

08007b2c <_malloc_r>:
 8007b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b30:	1ccd      	adds	r5, r1, #3
 8007b32:	f025 0503 	bic.w	r5, r5, #3
 8007b36:	3508      	adds	r5, #8
 8007b38:	2d0c      	cmp	r5, #12
 8007b3a:	bf38      	it	cc
 8007b3c:	250c      	movcc	r5, #12
 8007b3e:	2d00      	cmp	r5, #0
 8007b40:	4606      	mov	r6, r0
 8007b42:	db01      	blt.n	8007b48 <_malloc_r+0x1c>
 8007b44:	42a9      	cmp	r1, r5
 8007b46:	d904      	bls.n	8007b52 <_malloc_r+0x26>
 8007b48:	230c      	movs	r3, #12
 8007b4a:	6033      	str	r3, [r6, #0]
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c28 <_malloc_r+0xfc>
 8007b56:	f000 f869 	bl	8007c2c <__malloc_lock>
 8007b5a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b5e:	461c      	mov	r4, r3
 8007b60:	bb44      	cbnz	r4, 8007bb4 <_malloc_r+0x88>
 8007b62:	4629      	mov	r1, r5
 8007b64:	4630      	mov	r0, r6
 8007b66:	f7ff ffbf 	bl	8007ae8 <sbrk_aligned>
 8007b6a:	1c43      	adds	r3, r0, #1
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	d158      	bne.n	8007c22 <_malloc_r+0xf6>
 8007b70:	f8d8 4000 	ldr.w	r4, [r8]
 8007b74:	4627      	mov	r7, r4
 8007b76:	2f00      	cmp	r7, #0
 8007b78:	d143      	bne.n	8007c02 <_malloc_r+0xd6>
 8007b7a:	2c00      	cmp	r4, #0
 8007b7c:	d04b      	beq.n	8007c16 <_malloc_r+0xea>
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	4639      	mov	r1, r7
 8007b82:	4630      	mov	r0, r6
 8007b84:	eb04 0903 	add.w	r9, r4, r3
 8007b88:	f000 fc5a 	bl	8008440 <_sbrk_r>
 8007b8c:	4581      	cmp	r9, r0
 8007b8e:	d142      	bne.n	8007c16 <_malloc_r+0xea>
 8007b90:	6821      	ldr	r1, [r4, #0]
 8007b92:	1a6d      	subs	r5, r5, r1
 8007b94:	4629      	mov	r1, r5
 8007b96:	4630      	mov	r0, r6
 8007b98:	f7ff ffa6 	bl	8007ae8 <sbrk_aligned>
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d03a      	beq.n	8007c16 <_malloc_r+0xea>
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	442b      	add	r3, r5
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	bb62      	cbnz	r2, 8007c08 <_malloc_r+0xdc>
 8007bae:	f8c8 7000 	str.w	r7, [r8]
 8007bb2:	e00f      	b.n	8007bd4 <_malloc_r+0xa8>
 8007bb4:	6822      	ldr	r2, [r4, #0]
 8007bb6:	1b52      	subs	r2, r2, r5
 8007bb8:	d420      	bmi.n	8007bfc <_malloc_r+0xd0>
 8007bba:	2a0b      	cmp	r2, #11
 8007bbc:	d917      	bls.n	8007bee <_malloc_r+0xc2>
 8007bbe:	1961      	adds	r1, r4, r5
 8007bc0:	42a3      	cmp	r3, r4
 8007bc2:	6025      	str	r5, [r4, #0]
 8007bc4:	bf18      	it	ne
 8007bc6:	6059      	strne	r1, [r3, #4]
 8007bc8:	6863      	ldr	r3, [r4, #4]
 8007bca:	bf08      	it	eq
 8007bcc:	f8c8 1000 	streq.w	r1, [r8]
 8007bd0:	5162      	str	r2, [r4, r5]
 8007bd2:	604b      	str	r3, [r1, #4]
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f000 f82f 	bl	8007c38 <__malloc_unlock>
 8007bda:	f104 000b 	add.w	r0, r4, #11
 8007bde:	1d23      	adds	r3, r4, #4
 8007be0:	f020 0007 	bic.w	r0, r0, #7
 8007be4:	1ac2      	subs	r2, r0, r3
 8007be6:	bf1c      	itt	ne
 8007be8:	1a1b      	subne	r3, r3, r0
 8007bea:	50a3      	strne	r3, [r4, r2]
 8007bec:	e7af      	b.n	8007b4e <_malloc_r+0x22>
 8007bee:	6862      	ldr	r2, [r4, #4]
 8007bf0:	42a3      	cmp	r3, r4
 8007bf2:	bf0c      	ite	eq
 8007bf4:	f8c8 2000 	streq.w	r2, [r8]
 8007bf8:	605a      	strne	r2, [r3, #4]
 8007bfa:	e7eb      	b.n	8007bd4 <_malloc_r+0xa8>
 8007bfc:	4623      	mov	r3, r4
 8007bfe:	6864      	ldr	r4, [r4, #4]
 8007c00:	e7ae      	b.n	8007b60 <_malloc_r+0x34>
 8007c02:	463c      	mov	r4, r7
 8007c04:	687f      	ldr	r7, [r7, #4]
 8007c06:	e7b6      	b.n	8007b76 <_malloc_r+0x4a>
 8007c08:	461a      	mov	r2, r3
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	42a3      	cmp	r3, r4
 8007c0e:	d1fb      	bne.n	8007c08 <_malloc_r+0xdc>
 8007c10:	2300      	movs	r3, #0
 8007c12:	6053      	str	r3, [r2, #4]
 8007c14:	e7de      	b.n	8007bd4 <_malloc_r+0xa8>
 8007c16:	230c      	movs	r3, #12
 8007c18:	6033      	str	r3, [r6, #0]
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f000 f80c 	bl	8007c38 <__malloc_unlock>
 8007c20:	e794      	b.n	8007b4c <_malloc_r+0x20>
 8007c22:	6005      	str	r5, [r0, #0]
 8007c24:	e7d6      	b.n	8007bd4 <_malloc_r+0xa8>
 8007c26:	bf00      	nop
 8007c28:	200020f4 	.word	0x200020f4

08007c2c <__malloc_lock>:
 8007c2c:	4801      	ldr	r0, [pc, #4]	@ (8007c34 <__malloc_lock+0x8>)
 8007c2e:	f7ff bf0e 	b.w	8007a4e <__retarget_lock_acquire_recursive>
 8007c32:	bf00      	nop
 8007c34:	200020ec 	.word	0x200020ec

08007c38 <__malloc_unlock>:
 8007c38:	4801      	ldr	r0, [pc, #4]	@ (8007c40 <__malloc_unlock+0x8>)
 8007c3a:	f7ff bf09 	b.w	8007a50 <__retarget_lock_release_recursive>
 8007c3e:	bf00      	nop
 8007c40:	200020ec 	.word	0x200020ec

08007c44 <__sfputc_r>:
 8007c44:	6893      	ldr	r3, [r2, #8]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	b410      	push	{r4}
 8007c4c:	6093      	str	r3, [r2, #8]
 8007c4e:	da08      	bge.n	8007c62 <__sfputc_r+0x1e>
 8007c50:	6994      	ldr	r4, [r2, #24]
 8007c52:	42a3      	cmp	r3, r4
 8007c54:	db01      	blt.n	8007c5a <__sfputc_r+0x16>
 8007c56:	290a      	cmp	r1, #10
 8007c58:	d103      	bne.n	8007c62 <__sfputc_r+0x1e>
 8007c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c5e:	f7ff bde8 	b.w	8007832 <__swbuf_r>
 8007c62:	6813      	ldr	r3, [r2, #0]
 8007c64:	1c58      	adds	r0, r3, #1
 8007c66:	6010      	str	r0, [r2, #0]
 8007c68:	7019      	strb	r1, [r3, #0]
 8007c6a:	4608      	mov	r0, r1
 8007c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <__sfputs_r>:
 8007c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c74:	4606      	mov	r6, r0
 8007c76:	460f      	mov	r7, r1
 8007c78:	4614      	mov	r4, r2
 8007c7a:	18d5      	adds	r5, r2, r3
 8007c7c:	42ac      	cmp	r4, r5
 8007c7e:	d101      	bne.n	8007c84 <__sfputs_r+0x12>
 8007c80:	2000      	movs	r0, #0
 8007c82:	e007      	b.n	8007c94 <__sfputs_r+0x22>
 8007c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c88:	463a      	mov	r2, r7
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f7ff ffda 	bl	8007c44 <__sfputc_r>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d1f3      	bne.n	8007c7c <__sfputs_r+0xa>
 8007c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c98 <_vfiprintf_r>:
 8007c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	460d      	mov	r5, r1
 8007c9e:	b09d      	sub	sp, #116	@ 0x74
 8007ca0:	4614      	mov	r4, r2
 8007ca2:	4698      	mov	r8, r3
 8007ca4:	4606      	mov	r6, r0
 8007ca6:	b118      	cbz	r0, 8007cb0 <_vfiprintf_r+0x18>
 8007ca8:	6a03      	ldr	r3, [r0, #32]
 8007caa:	b90b      	cbnz	r3, 8007cb0 <_vfiprintf_r+0x18>
 8007cac:	f7ff fcd8 	bl	8007660 <__sinit>
 8007cb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cb2:	07d9      	lsls	r1, r3, #31
 8007cb4:	d405      	bmi.n	8007cc2 <_vfiprintf_r+0x2a>
 8007cb6:	89ab      	ldrh	r3, [r5, #12]
 8007cb8:	059a      	lsls	r2, r3, #22
 8007cba:	d402      	bmi.n	8007cc2 <_vfiprintf_r+0x2a>
 8007cbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cbe:	f7ff fec6 	bl	8007a4e <__retarget_lock_acquire_recursive>
 8007cc2:	89ab      	ldrh	r3, [r5, #12]
 8007cc4:	071b      	lsls	r3, r3, #28
 8007cc6:	d501      	bpl.n	8007ccc <_vfiprintf_r+0x34>
 8007cc8:	692b      	ldr	r3, [r5, #16]
 8007cca:	b99b      	cbnz	r3, 8007cf4 <_vfiprintf_r+0x5c>
 8007ccc:	4629      	mov	r1, r5
 8007cce:	4630      	mov	r0, r6
 8007cd0:	f7ff fdee 	bl	80078b0 <__swsetup_r>
 8007cd4:	b170      	cbz	r0, 8007cf4 <_vfiprintf_r+0x5c>
 8007cd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cd8:	07dc      	lsls	r4, r3, #31
 8007cda:	d504      	bpl.n	8007ce6 <_vfiprintf_r+0x4e>
 8007cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce0:	b01d      	add	sp, #116	@ 0x74
 8007ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce6:	89ab      	ldrh	r3, [r5, #12]
 8007ce8:	0598      	lsls	r0, r3, #22
 8007cea:	d4f7      	bmi.n	8007cdc <_vfiprintf_r+0x44>
 8007cec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cee:	f7ff feaf 	bl	8007a50 <__retarget_lock_release_recursive>
 8007cf2:	e7f3      	b.n	8007cdc <_vfiprintf_r+0x44>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cf8:	2320      	movs	r3, #32
 8007cfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d02:	2330      	movs	r3, #48	@ 0x30
 8007d04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007eb4 <_vfiprintf_r+0x21c>
 8007d08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d0c:	f04f 0901 	mov.w	r9, #1
 8007d10:	4623      	mov	r3, r4
 8007d12:	469a      	mov	sl, r3
 8007d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d18:	b10a      	cbz	r2, 8007d1e <_vfiprintf_r+0x86>
 8007d1a:	2a25      	cmp	r2, #37	@ 0x25
 8007d1c:	d1f9      	bne.n	8007d12 <_vfiprintf_r+0x7a>
 8007d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d22:	d00b      	beq.n	8007d3c <_vfiprintf_r+0xa4>
 8007d24:	465b      	mov	r3, fp
 8007d26:	4622      	mov	r2, r4
 8007d28:	4629      	mov	r1, r5
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	f7ff ffa1 	bl	8007c72 <__sfputs_r>
 8007d30:	3001      	adds	r0, #1
 8007d32:	f000 80a7 	beq.w	8007e84 <_vfiprintf_r+0x1ec>
 8007d36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d38:	445a      	add	r2, fp
 8007d3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 809f 	beq.w	8007e84 <_vfiprintf_r+0x1ec>
 8007d46:	2300      	movs	r3, #0
 8007d48:	f04f 32ff 	mov.w	r2, #4294967295
 8007d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d50:	f10a 0a01 	add.w	sl, sl, #1
 8007d54:	9304      	str	r3, [sp, #16]
 8007d56:	9307      	str	r3, [sp, #28]
 8007d58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d5e:	4654      	mov	r4, sl
 8007d60:	2205      	movs	r2, #5
 8007d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d66:	4853      	ldr	r0, [pc, #332]	@ (8007eb4 <_vfiprintf_r+0x21c>)
 8007d68:	f7f8 fa3a 	bl	80001e0 <memchr>
 8007d6c:	9a04      	ldr	r2, [sp, #16]
 8007d6e:	b9d8      	cbnz	r0, 8007da8 <_vfiprintf_r+0x110>
 8007d70:	06d1      	lsls	r1, r2, #27
 8007d72:	bf44      	itt	mi
 8007d74:	2320      	movmi	r3, #32
 8007d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d7a:	0713      	lsls	r3, r2, #28
 8007d7c:	bf44      	itt	mi
 8007d7e:	232b      	movmi	r3, #43	@ 0x2b
 8007d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d84:	f89a 3000 	ldrb.w	r3, [sl]
 8007d88:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d8a:	d015      	beq.n	8007db8 <_vfiprintf_r+0x120>
 8007d8c:	9a07      	ldr	r2, [sp, #28]
 8007d8e:	4654      	mov	r4, sl
 8007d90:	2000      	movs	r0, #0
 8007d92:	f04f 0c0a 	mov.w	ip, #10
 8007d96:	4621      	mov	r1, r4
 8007d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d9c:	3b30      	subs	r3, #48	@ 0x30
 8007d9e:	2b09      	cmp	r3, #9
 8007da0:	d94b      	bls.n	8007e3a <_vfiprintf_r+0x1a2>
 8007da2:	b1b0      	cbz	r0, 8007dd2 <_vfiprintf_r+0x13a>
 8007da4:	9207      	str	r2, [sp, #28]
 8007da6:	e014      	b.n	8007dd2 <_vfiprintf_r+0x13a>
 8007da8:	eba0 0308 	sub.w	r3, r0, r8
 8007dac:	fa09 f303 	lsl.w	r3, r9, r3
 8007db0:	4313      	orrs	r3, r2
 8007db2:	9304      	str	r3, [sp, #16]
 8007db4:	46a2      	mov	sl, r4
 8007db6:	e7d2      	b.n	8007d5e <_vfiprintf_r+0xc6>
 8007db8:	9b03      	ldr	r3, [sp, #12]
 8007dba:	1d19      	adds	r1, r3, #4
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	9103      	str	r1, [sp, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	bfbb      	ittet	lt
 8007dc4:	425b      	neglt	r3, r3
 8007dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8007dca:	9307      	strge	r3, [sp, #28]
 8007dcc:	9307      	strlt	r3, [sp, #28]
 8007dce:	bfb8      	it	lt
 8007dd0:	9204      	strlt	r2, [sp, #16]
 8007dd2:	7823      	ldrb	r3, [r4, #0]
 8007dd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007dd6:	d10a      	bne.n	8007dee <_vfiprintf_r+0x156>
 8007dd8:	7863      	ldrb	r3, [r4, #1]
 8007dda:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ddc:	d132      	bne.n	8007e44 <_vfiprintf_r+0x1ac>
 8007dde:	9b03      	ldr	r3, [sp, #12]
 8007de0:	1d1a      	adds	r2, r3, #4
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	9203      	str	r2, [sp, #12]
 8007de6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007dea:	3402      	adds	r4, #2
 8007dec:	9305      	str	r3, [sp, #20]
 8007dee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ec4 <_vfiprintf_r+0x22c>
 8007df2:	7821      	ldrb	r1, [r4, #0]
 8007df4:	2203      	movs	r2, #3
 8007df6:	4650      	mov	r0, sl
 8007df8:	f7f8 f9f2 	bl	80001e0 <memchr>
 8007dfc:	b138      	cbz	r0, 8007e0e <_vfiprintf_r+0x176>
 8007dfe:	9b04      	ldr	r3, [sp, #16]
 8007e00:	eba0 000a 	sub.w	r0, r0, sl
 8007e04:	2240      	movs	r2, #64	@ 0x40
 8007e06:	4082      	lsls	r2, r0
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	3401      	adds	r4, #1
 8007e0c:	9304      	str	r3, [sp, #16]
 8007e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e12:	4829      	ldr	r0, [pc, #164]	@ (8007eb8 <_vfiprintf_r+0x220>)
 8007e14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e18:	2206      	movs	r2, #6
 8007e1a:	f7f8 f9e1 	bl	80001e0 <memchr>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d03f      	beq.n	8007ea2 <_vfiprintf_r+0x20a>
 8007e22:	4b26      	ldr	r3, [pc, #152]	@ (8007ebc <_vfiprintf_r+0x224>)
 8007e24:	bb1b      	cbnz	r3, 8007e6e <_vfiprintf_r+0x1d6>
 8007e26:	9b03      	ldr	r3, [sp, #12]
 8007e28:	3307      	adds	r3, #7
 8007e2a:	f023 0307 	bic.w	r3, r3, #7
 8007e2e:	3308      	adds	r3, #8
 8007e30:	9303      	str	r3, [sp, #12]
 8007e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e34:	443b      	add	r3, r7
 8007e36:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e38:	e76a      	b.n	8007d10 <_vfiprintf_r+0x78>
 8007e3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e3e:	460c      	mov	r4, r1
 8007e40:	2001      	movs	r0, #1
 8007e42:	e7a8      	b.n	8007d96 <_vfiprintf_r+0xfe>
 8007e44:	2300      	movs	r3, #0
 8007e46:	3401      	adds	r4, #1
 8007e48:	9305      	str	r3, [sp, #20]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	f04f 0c0a 	mov.w	ip, #10
 8007e50:	4620      	mov	r0, r4
 8007e52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e56:	3a30      	subs	r2, #48	@ 0x30
 8007e58:	2a09      	cmp	r2, #9
 8007e5a:	d903      	bls.n	8007e64 <_vfiprintf_r+0x1cc>
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d0c6      	beq.n	8007dee <_vfiprintf_r+0x156>
 8007e60:	9105      	str	r1, [sp, #20]
 8007e62:	e7c4      	b.n	8007dee <_vfiprintf_r+0x156>
 8007e64:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e68:	4604      	mov	r4, r0
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e7f0      	b.n	8007e50 <_vfiprintf_r+0x1b8>
 8007e6e:	ab03      	add	r3, sp, #12
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	462a      	mov	r2, r5
 8007e74:	4b12      	ldr	r3, [pc, #72]	@ (8007ec0 <_vfiprintf_r+0x228>)
 8007e76:	a904      	add	r1, sp, #16
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f3af 8000 	nop.w
 8007e7e:	4607      	mov	r7, r0
 8007e80:	1c78      	adds	r0, r7, #1
 8007e82:	d1d6      	bne.n	8007e32 <_vfiprintf_r+0x19a>
 8007e84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e86:	07d9      	lsls	r1, r3, #31
 8007e88:	d405      	bmi.n	8007e96 <_vfiprintf_r+0x1fe>
 8007e8a:	89ab      	ldrh	r3, [r5, #12]
 8007e8c:	059a      	lsls	r2, r3, #22
 8007e8e:	d402      	bmi.n	8007e96 <_vfiprintf_r+0x1fe>
 8007e90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e92:	f7ff fddd 	bl	8007a50 <__retarget_lock_release_recursive>
 8007e96:	89ab      	ldrh	r3, [r5, #12]
 8007e98:	065b      	lsls	r3, r3, #25
 8007e9a:	f53f af1f 	bmi.w	8007cdc <_vfiprintf_r+0x44>
 8007e9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ea0:	e71e      	b.n	8007ce0 <_vfiprintf_r+0x48>
 8007ea2:	ab03      	add	r3, sp, #12
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	462a      	mov	r2, r5
 8007ea8:	4b05      	ldr	r3, [pc, #20]	@ (8007ec0 <_vfiprintf_r+0x228>)
 8007eaa:	a904      	add	r1, sp, #16
 8007eac:	4630      	mov	r0, r6
 8007eae:	f000 f879 	bl	8007fa4 <_printf_i>
 8007eb2:	e7e4      	b.n	8007e7e <_vfiprintf_r+0x1e6>
 8007eb4:	08008514 	.word	0x08008514
 8007eb8:	0800851e 	.word	0x0800851e
 8007ebc:	00000000 	.word	0x00000000
 8007ec0:	08007c73 	.word	0x08007c73
 8007ec4:	0800851a 	.word	0x0800851a

08007ec8 <_printf_common>:
 8007ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ecc:	4616      	mov	r6, r2
 8007ece:	4698      	mov	r8, r3
 8007ed0:	688a      	ldr	r2, [r1, #8]
 8007ed2:	690b      	ldr	r3, [r1, #16]
 8007ed4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	bfb8      	it	lt
 8007edc:	4613      	movlt	r3, r2
 8007ede:	6033      	str	r3, [r6, #0]
 8007ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ee4:	4607      	mov	r7, r0
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	b10a      	cbz	r2, 8007eee <_printf_common+0x26>
 8007eea:	3301      	adds	r3, #1
 8007eec:	6033      	str	r3, [r6, #0]
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	0699      	lsls	r1, r3, #26
 8007ef2:	bf42      	ittt	mi
 8007ef4:	6833      	ldrmi	r3, [r6, #0]
 8007ef6:	3302      	addmi	r3, #2
 8007ef8:	6033      	strmi	r3, [r6, #0]
 8007efa:	6825      	ldr	r5, [r4, #0]
 8007efc:	f015 0506 	ands.w	r5, r5, #6
 8007f00:	d106      	bne.n	8007f10 <_printf_common+0x48>
 8007f02:	f104 0a19 	add.w	sl, r4, #25
 8007f06:	68e3      	ldr	r3, [r4, #12]
 8007f08:	6832      	ldr	r2, [r6, #0]
 8007f0a:	1a9b      	subs	r3, r3, r2
 8007f0c:	42ab      	cmp	r3, r5
 8007f0e:	dc26      	bgt.n	8007f5e <_printf_common+0x96>
 8007f10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f14:	6822      	ldr	r2, [r4, #0]
 8007f16:	3b00      	subs	r3, #0
 8007f18:	bf18      	it	ne
 8007f1a:	2301      	movne	r3, #1
 8007f1c:	0692      	lsls	r2, r2, #26
 8007f1e:	d42b      	bmi.n	8007f78 <_printf_common+0xb0>
 8007f20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f24:	4641      	mov	r1, r8
 8007f26:	4638      	mov	r0, r7
 8007f28:	47c8      	blx	r9
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	d01e      	beq.n	8007f6c <_printf_common+0xa4>
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	6922      	ldr	r2, [r4, #16]
 8007f32:	f003 0306 	and.w	r3, r3, #6
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	bf02      	ittt	eq
 8007f3a:	68e5      	ldreq	r5, [r4, #12]
 8007f3c:	6833      	ldreq	r3, [r6, #0]
 8007f3e:	1aed      	subeq	r5, r5, r3
 8007f40:	68a3      	ldr	r3, [r4, #8]
 8007f42:	bf0c      	ite	eq
 8007f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f48:	2500      	movne	r5, #0
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	bfc4      	itt	gt
 8007f4e:	1a9b      	subgt	r3, r3, r2
 8007f50:	18ed      	addgt	r5, r5, r3
 8007f52:	2600      	movs	r6, #0
 8007f54:	341a      	adds	r4, #26
 8007f56:	42b5      	cmp	r5, r6
 8007f58:	d11a      	bne.n	8007f90 <_printf_common+0xc8>
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	e008      	b.n	8007f70 <_printf_common+0xa8>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	4652      	mov	r2, sl
 8007f62:	4641      	mov	r1, r8
 8007f64:	4638      	mov	r0, r7
 8007f66:	47c8      	blx	r9
 8007f68:	3001      	adds	r0, #1
 8007f6a:	d103      	bne.n	8007f74 <_printf_common+0xac>
 8007f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f74:	3501      	adds	r5, #1
 8007f76:	e7c6      	b.n	8007f06 <_printf_common+0x3e>
 8007f78:	18e1      	adds	r1, r4, r3
 8007f7a:	1c5a      	adds	r2, r3, #1
 8007f7c:	2030      	movs	r0, #48	@ 0x30
 8007f7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f82:	4422      	add	r2, r4
 8007f84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f8c:	3302      	adds	r3, #2
 8007f8e:	e7c7      	b.n	8007f20 <_printf_common+0x58>
 8007f90:	2301      	movs	r3, #1
 8007f92:	4622      	mov	r2, r4
 8007f94:	4641      	mov	r1, r8
 8007f96:	4638      	mov	r0, r7
 8007f98:	47c8      	blx	r9
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	d0e6      	beq.n	8007f6c <_printf_common+0xa4>
 8007f9e:	3601      	adds	r6, #1
 8007fa0:	e7d9      	b.n	8007f56 <_printf_common+0x8e>
	...

08007fa4 <_printf_i>:
 8007fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa8:	7e0f      	ldrb	r7, [r1, #24]
 8007faa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007fac:	2f78      	cmp	r7, #120	@ 0x78
 8007fae:	4691      	mov	r9, r2
 8007fb0:	4680      	mov	r8, r0
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	469a      	mov	sl, r3
 8007fb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007fba:	d807      	bhi.n	8007fcc <_printf_i+0x28>
 8007fbc:	2f62      	cmp	r7, #98	@ 0x62
 8007fbe:	d80a      	bhi.n	8007fd6 <_printf_i+0x32>
 8007fc0:	2f00      	cmp	r7, #0
 8007fc2:	f000 80d1 	beq.w	8008168 <_printf_i+0x1c4>
 8007fc6:	2f58      	cmp	r7, #88	@ 0x58
 8007fc8:	f000 80b8 	beq.w	800813c <_printf_i+0x198>
 8007fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007fd4:	e03a      	b.n	800804c <_printf_i+0xa8>
 8007fd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007fda:	2b15      	cmp	r3, #21
 8007fdc:	d8f6      	bhi.n	8007fcc <_printf_i+0x28>
 8007fde:	a101      	add	r1, pc, #4	@ (adr r1, 8007fe4 <_printf_i+0x40>)
 8007fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fe4:	0800803d 	.word	0x0800803d
 8007fe8:	08008051 	.word	0x08008051
 8007fec:	08007fcd 	.word	0x08007fcd
 8007ff0:	08007fcd 	.word	0x08007fcd
 8007ff4:	08007fcd 	.word	0x08007fcd
 8007ff8:	08007fcd 	.word	0x08007fcd
 8007ffc:	08008051 	.word	0x08008051
 8008000:	08007fcd 	.word	0x08007fcd
 8008004:	08007fcd 	.word	0x08007fcd
 8008008:	08007fcd 	.word	0x08007fcd
 800800c:	08007fcd 	.word	0x08007fcd
 8008010:	0800814f 	.word	0x0800814f
 8008014:	0800807b 	.word	0x0800807b
 8008018:	08008109 	.word	0x08008109
 800801c:	08007fcd 	.word	0x08007fcd
 8008020:	08007fcd 	.word	0x08007fcd
 8008024:	08008171 	.word	0x08008171
 8008028:	08007fcd 	.word	0x08007fcd
 800802c:	0800807b 	.word	0x0800807b
 8008030:	08007fcd 	.word	0x08007fcd
 8008034:	08007fcd 	.word	0x08007fcd
 8008038:	08008111 	.word	0x08008111
 800803c:	6833      	ldr	r3, [r6, #0]
 800803e:	1d1a      	adds	r2, r3, #4
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6032      	str	r2, [r6, #0]
 8008044:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008048:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800804c:	2301      	movs	r3, #1
 800804e:	e09c      	b.n	800818a <_printf_i+0x1e6>
 8008050:	6833      	ldr	r3, [r6, #0]
 8008052:	6820      	ldr	r0, [r4, #0]
 8008054:	1d19      	adds	r1, r3, #4
 8008056:	6031      	str	r1, [r6, #0]
 8008058:	0606      	lsls	r6, r0, #24
 800805a:	d501      	bpl.n	8008060 <_printf_i+0xbc>
 800805c:	681d      	ldr	r5, [r3, #0]
 800805e:	e003      	b.n	8008068 <_printf_i+0xc4>
 8008060:	0645      	lsls	r5, r0, #25
 8008062:	d5fb      	bpl.n	800805c <_printf_i+0xb8>
 8008064:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008068:	2d00      	cmp	r5, #0
 800806a:	da03      	bge.n	8008074 <_printf_i+0xd0>
 800806c:	232d      	movs	r3, #45	@ 0x2d
 800806e:	426d      	negs	r5, r5
 8008070:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008074:	4858      	ldr	r0, [pc, #352]	@ (80081d8 <_printf_i+0x234>)
 8008076:	230a      	movs	r3, #10
 8008078:	e011      	b.n	800809e <_printf_i+0xfa>
 800807a:	6821      	ldr	r1, [r4, #0]
 800807c:	6833      	ldr	r3, [r6, #0]
 800807e:	0608      	lsls	r0, r1, #24
 8008080:	f853 5b04 	ldr.w	r5, [r3], #4
 8008084:	d402      	bmi.n	800808c <_printf_i+0xe8>
 8008086:	0649      	lsls	r1, r1, #25
 8008088:	bf48      	it	mi
 800808a:	b2ad      	uxthmi	r5, r5
 800808c:	2f6f      	cmp	r7, #111	@ 0x6f
 800808e:	4852      	ldr	r0, [pc, #328]	@ (80081d8 <_printf_i+0x234>)
 8008090:	6033      	str	r3, [r6, #0]
 8008092:	bf14      	ite	ne
 8008094:	230a      	movne	r3, #10
 8008096:	2308      	moveq	r3, #8
 8008098:	2100      	movs	r1, #0
 800809a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800809e:	6866      	ldr	r6, [r4, #4]
 80080a0:	60a6      	str	r6, [r4, #8]
 80080a2:	2e00      	cmp	r6, #0
 80080a4:	db05      	blt.n	80080b2 <_printf_i+0x10e>
 80080a6:	6821      	ldr	r1, [r4, #0]
 80080a8:	432e      	orrs	r6, r5
 80080aa:	f021 0104 	bic.w	r1, r1, #4
 80080ae:	6021      	str	r1, [r4, #0]
 80080b0:	d04b      	beq.n	800814a <_printf_i+0x1a6>
 80080b2:	4616      	mov	r6, r2
 80080b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80080b8:	fb03 5711 	mls	r7, r3, r1, r5
 80080bc:	5dc7      	ldrb	r7, [r0, r7]
 80080be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080c2:	462f      	mov	r7, r5
 80080c4:	42bb      	cmp	r3, r7
 80080c6:	460d      	mov	r5, r1
 80080c8:	d9f4      	bls.n	80080b4 <_printf_i+0x110>
 80080ca:	2b08      	cmp	r3, #8
 80080cc:	d10b      	bne.n	80080e6 <_printf_i+0x142>
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	07df      	lsls	r7, r3, #31
 80080d2:	d508      	bpl.n	80080e6 <_printf_i+0x142>
 80080d4:	6923      	ldr	r3, [r4, #16]
 80080d6:	6861      	ldr	r1, [r4, #4]
 80080d8:	4299      	cmp	r1, r3
 80080da:	bfde      	ittt	le
 80080dc:	2330      	movle	r3, #48	@ 0x30
 80080de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80080e6:	1b92      	subs	r2, r2, r6
 80080e8:	6122      	str	r2, [r4, #16]
 80080ea:	f8cd a000 	str.w	sl, [sp]
 80080ee:	464b      	mov	r3, r9
 80080f0:	aa03      	add	r2, sp, #12
 80080f2:	4621      	mov	r1, r4
 80080f4:	4640      	mov	r0, r8
 80080f6:	f7ff fee7 	bl	8007ec8 <_printf_common>
 80080fa:	3001      	adds	r0, #1
 80080fc:	d14a      	bne.n	8008194 <_printf_i+0x1f0>
 80080fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008102:	b004      	add	sp, #16
 8008104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	f043 0320 	orr.w	r3, r3, #32
 800810e:	6023      	str	r3, [r4, #0]
 8008110:	4832      	ldr	r0, [pc, #200]	@ (80081dc <_printf_i+0x238>)
 8008112:	2778      	movs	r7, #120	@ 0x78
 8008114:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	6831      	ldr	r1, [r6, #0]
 800811c:	061f      	lsls	r7, r3, #24
 800811e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008122:	d402      	bmi.n	800812a <_printf_i+0x186>
 8008124:	065f      	lsls	r7, r3, #25
 8008126:	bf48      	it	mi
 8008128:	b2ad      	uxthmi	r5, r5
 800812a:	6031      	str	r1, [r6, #0]
 800812c:	07d9      	lsls	r1, r3, #31
 800812e:	bf44      	itt	mi
 8008130:	f043 0320 	orrmi.w	r3, r3, #32
 8008134:	6023      	strmi	r3, [r4, #0]
 8008136:	b11d      	cbz	r5, 8008140 <_printf_i+0x19c>
 8008138:	2310      	movs	r3, #16
 800813a:	e7ad      	b.n	8008098 <_printf_i+0xf4>
 800813c:	4826      	ldr	r0, [pc, #152]	@ (80081d8 <_printf_i+0x234>)
 800813e:	e7e9      	b.n	8008114 <_printf_i+0x170>
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	f023 0320 	bic.w	r3, r3, #32
 8008146:	6023      	str	r3, [r4, #0]
 8008148:	e7f6      	b.n	8008138 <_printf_i+0x194>
 800814a:	4616      	mov	r6, r2
 800814c:	e7bd      	b.n	80080ca <_printf_i+0x126>
 800814e:	6833      	ldr	r3, [r6, #0]
 8008150:	6825      	ldr	r5, [r4, #0]
 8008152:	6961      	ldr	r1, [r4, #20]
 8008154:	1d18      	adds	r0, r3, #4
 8008156:	6030      	str	r0, [r6, #0]
 8008158:	062e      	lsls	r6, r5, #24
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	d501      	bpl.n	8008162 <_printf_i+0x1be>
 800815e:	6019      	str	r1, [r3, #0]
 8008160:	e002      	b.n	8008168 <_printf_i+0x1c4>
 8008162:	0668      	lsls	r0, r5, #25
 8008164:	d5fb      	bpl.n	800815e <_printf_i+0x1ba>
 8008166:	8019      	strh	r1, [r3, #0]
 8008168:	2300      	movs	r3, #0
 800816a:	6123      	str	r3, [r4, #16]
 800816c:	4616      	mov	r6, r2
 800816e:	e7bc      	b.n	80080ea <_printf_i+0x146>
 8008170:	6833      	ldr	r3, [r6, #0]
 8008172:	1d1a      	adds	r2, r3, #4
 8008174:	6032      	str	r2, [r6, #0]
 8008176:	681e      	ldr	r6, [r3, #0]
 8008178:	6862      	ldr	r2, [r4, #4]
 800817a:	2100      	movs	r1, #0
 800817c:	4630      	mov	r0, r6
 800817e:	f7f8 f82f 	bl	80001e0 <memchr>
 8008182:	b108      	cbz	r0, 8008188 <_printf_i+0x1e4>
 8008184:	1b80      	subs	r0, r0, r6
 8008186:	6060      	str	r0, [r4, #4]
 8008188:	6863      	ldr	r3, [r4, #4]
 800818a:	6123      	str	r3, [r4, #16]
 800818c:	2300      	movs	r3, #0
 800818e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008192:	e7aa      	b.n	80080ea <_printf_i+0x146>
 8008194:	6923      	ldr	r3, [r4, #16]
 8008196:	4632      	mov	r2, r6
 8008198:	4649      	mov	r1, r9
 800819a:	4640      	mov	r0, r8
 800819c:	47d0      	blx	sl
 800819e:	3001      	adds	r0, #1
 80081a0:	d0ad      	beq.n	80080fe <_printf_i+0x15a>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	079b      	lsls	r3, r3, #30
 80081a6:	d413      	bmi.n	80081d0 <_printf_i+0x22c>
 80081a8:	68e0      	ldr	r0, [r4, #12]
 80081aa:	9b03      	ldr	r3, [sp, #12]
 80081ac:	4298      	cmp	r0, r3
 80081ae:	bfb8      	it	lt
 80081b0:	4618      	movlt	r0, r3
 80081b2:	e7a6      	b.n	8008102 <_printf_i+0x15e>
 80081b4:	2301      	movs	r3, #1
 80081b6:	4632      	mov	r2, r6
 80081b8:	4649      	mov	r1, r9
 80081ba:	4640      	mov	r0, r8
 80081bc:	47d0      	blx	sl
 80081be:	3001      	adds	r0, #1
 80081c0:	d09d      	beq.n	80080fe <_printf_i+0x15a>
 80081c2:	3501      	adds	r5, #1
 80081c4:	68e3      	ldr	r3, [r4, #12]
 80081c6:	9903      	ldr	r1, [sp, #12]
 80081c8:	1a5b      	subs	r3, r3, r1
 80081ca:	42ab      	cmp	r3, r5
 80081cc:	dcf2      	bgt.n	80081b4 <_printf_i+0x210>
 80081ce:	e7eb      	b.n	80081a8 <_printf_i+0x204>
 80081d0:	2500      	movs	r5, #0
 80081d2:	f104 0619 	add.w	r6, r4, #25
 80081d6:	e7f5      	b.n	80081c4 <_printf_i+0x220>
 80081d8:	08008525 	.word	0x08008525
 80081dc:	08008536 	.word	0x08008536

080081e0 <__sflush_r>:
 80081e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e8:	0716      	lsls	r6, r2, #28
 80081ea:	4605      	mov	r5, r0
 80081ec:	460c      	mov	r4, r1
 80081ee:	d454      	bmi.n	800829a <__sflush_r+0xba>
 80081f0:	684b      	ldr	r3, [r1, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	dc02      	bgt.n	80081fc <__sflush_r+0x1c>
 80081f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	dd48      	ble.n	800828e <__sflush_r+0xae>
 80081fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081fe:	2e00      	cmp	r6, #0
 8008200:	d045      	beq.n	800828e <__sflush_r+0xae>
 8008202:	2300      	movs	r3, #0
 8008204:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008208:	682f      	ldr	r7, [r5, #0]
 800820a:	6a21      	ldr	r1, [r4, #32]
 800820c:	602b      	str	r3, [r5, #0]
 800820e:	d030      	beq.n	8008272 <__sflush_r+0x92>
 8008210:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	0759      	lsls	r1, r3, #29
 8008216:	d505      	bpl.n	8008224 <__sflush_r+0x44>
 8008218:	6863      	ldr	r3, [r4, #4]
 800821a:	1ad2      	subs	r2, r2, r3
 800821c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800821e:	b10b      	cbz	r3, 8008224 <__sflush_r+0x44>
 8008220:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008222:	1ad2      	subs	r2, r2, r3
 8008224:	2300      	movs	r3, #0
 8008226:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008228:	6a21      	ldr	r1, [r4, #32]
 800822a:	4628      	mov	r0, r5
 800822c:	47b0      	blx	r6
 800822e:	1c43      	adds	r3, r0, #1
 8008230:	89a3      	ldrh	r3, [r4, #12]
 8008232:	d106      	bne.n	8008242 <__sflush_r+0x62>
 8008234:	6829      	ldr	r1, [r5, #0]
 8008236:	291d      	cmp	r1, #29
 8008238:	d82b      	bhi.n	8008292 <__sflush_r+0xb2>
 800823a:	4a2a      	ldr	r2, [pc, #168]	@ (80082e4 <__sflush_r+0x104>)
 800823c:	40ca      	lsrs	r2, r1
 800823e:	07d6      	lsls	r6, r2, #31
 8008240:	d527      	bpl.n	8008292 <__sflush_r+0xb2>
 8008242:	2200      	movs	r2, #0
 8008244:	6062      	str	r2, [r4, #4]
 8008246:	04d9      	lsls	r1, r3, #19
 8008248:	6922      	ldr	r2, [r4, #16]
 800824a:	6022      	str	r2, [r4, #0]
 800824c:	d504      	bpl.n	8008258 <__sflush_r+0x78>
 800824e:	1c42      	adds	r2, r0, #1
 8008250:	d101      	bne.n	8008256 <__sflush_r+0x76>
 8008252:	682b      	ldr	r3, [r5, #0]
 8008254:	b903      	cbnz	r3, 8008258 <__sflush_r+0x78>
 8008256:	6560      	str	r0, [r4, #84]	@ 0x54
 8008258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800825a:	602f      	str	r7, [r5, #0]
 800825c:	b1b9      	cbz	r1, 800828e <__sflush_r+0xae>
 800825e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008262:	4299      	cmp	r1, r3
 8008264:	d002      	beq.n	800826c <__sflush_r+0x8c>
 8008266:	4628      	mov	r0, r5
 8008268:	f7ff fbf4 	bl	8007a54 <_free_r>
 800826c:	2300      	movs	r3, #0
 800826e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008270:	e00d      	b.n	800828e <__sflush_r+0xae>
 8008272:	2301      	movs	r3, #1
 8008274:	4628      	mov	r0, r5
 8008276:	47b0      	blx	r6
 8008278:	4602      	mov	r2, r0
 800827a:	1c50      	adds	r0, r2, #1
 800827c:	d1c9      	bne.n	8008212 <__sflush_r+0x32>
 800827e:	682b      	ldr	r3, [r5, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d0c6      	beq.n	8008212 <__sflush_r+0x32>
 8008284:	2b1d      	cmp	r3, #29
 8008286:	d001      	beq.n	800828c <__sflush_r+0xac>
 8008288:	2b16      	cmp	r3, #22
 800828a:	d11e      	bne.n	80082ca <__sflush_r+0xea>
 800828c:	602f      	str	r7, [r5, #0]
 800828e:	2000      	movs	r0, #0
 8008290:	e022      	b.n	80082d8 <__sflush_r+0xf8>
 8008292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008296:	b21b      	sxth	r3, r3
 8008298:	e01b      	b.n	80082d2 <__sflush_r+0xf2>
 800829a:	690f      	ldr	r7, [r1, #16]
 800829c:	2f00      	cmp	r7, #0
 800829e:	d0f6      	beq.n	800828e <__sflush_r+0xae>
 80082a0:	0793      	lsls	r3, r2, #30
 80082a2:	680e      	ldr	r6, [r1, #0]
 80082a4:	bf08      	it	eq
 80082a6:	694b      	ldreq	r3, [r1, #20]
 80082a8:	600f      	str	r7, [r1, #0]
 80082aa:	bf18      	it	ne
 80082ac:	2300      	movne	r3, #0
 80082ae:	eba6 0807 	sub.w	r8, r6, r7
 80082b2:	608b      	str	r3, [r1, #8]
 80082b4:	f1b8 0f00 	cmp.w	r8, #0
 80082b8:	dde9      	ble.n	800828e <__sflush_r+0xae>
 80082ba:	6a21      	ldr	r1, [r4, #32]
 80082bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80082be:	4643      	mov	r3, r8
 80082c0:	463a      	mov	r2, r7
 80082c2:	4628      	mov	r0, r5
 80082c4:	47b0      	blx	r6
 80082c6:	2800      	cmp	r0, #0
 80082c8:	dc08      	bgt.n	80082dc <__sflush_r+0xfc>
 80082ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082d2:	81a3      	strh	r3, [r4, #12]
 80082d4:	f04f 30ff 	mov.w	r0, #4294967295
 80082d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082dc:	4407      	add	r7, r0
 80082de:	eba8 0800 	sub.w	r8, r8, r0
 80082e2:	e7e7      	b.n	80082b4 <__sflush_r+0xd4>
 80082e4:	20400001 	.word	0x20400001

080082e8 <_fflush_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	690b      	ldr	r3, [r1, #16]
 80082ec:	4605      	mov	r5, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	b913      	cbnz	r3, 80082f8 <_fflush_r+0x10>
 80082f2:	2500      	movs	r5, #0
 80082f4:	4628      	mov	r0, r5
 80082f6:	bd38      	pop	{r3, r4, r5, pc}
 80082f8:	b118      	cbz	r0, 8008302 <_fflush_r+0x1a>
 80082fa:	6a03      	ldr	r3, [r0, #32]
 80082fc:	b90b      	cbnz	r3, 8008302 <_fflush_r+0x1a>
 80082fe:	f7ff f9af 	bl	8007660 <__sinit>
 8008302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0f3      	beq.n	80082f2 <_fflush_r+0xa>
 800830a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800830c:	07d0      	lsls	r0, r2, #31
 800830e:	d404      	bmi.n	800831a <_fflush_r+0x32>
 8008310:	0599      	lsls	r1, r3, #22
 8008312:	d402      	bmi.n	800831a <_fflush_r+0x32>
 8008314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008316:	f7ff fb9a 	bl	8007a4e <__retarget_lock_acquire_recursive>
 800831a:	4628      	mov	r0, r5
 800831c:	4621      	mov	r1, r4
 800831e:	f7ff ff5f 	bl	80081e0 <__sflush_r>
 8008322:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008324:	07da      	lsls	r2, r3, #31
 8008326:	4605      	mov	r5, r0
 8008328:	d4e4      	bmi.n	80082f4 <_fflush_r+0xc>
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	059b      	lsls	r3, r3, #22
 800832e:	d4e1      	bmi.n	80082f4 <_fflush_r+0xc>
 8008330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008332:	f7ff fb8d 	bl	8007a50 <__retarget_lock_release_recursive>
 8008336:	e7dd      	b.n	80082f4 <_fflush_r+0xc>

08008338 <__swhatbuf_r>:
 8008338:	b570      	push	{r4, r5, r6, lr}
 800833a:	460c      	mov	r4, r1
 800833c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008340:	2900      	cmp	r1, #0
 8008342:	b096      	sub	sp, #88	@ 0x58
 8008344:	4615      	mov	r5, r2
 8008346:	461e      	mov	r6, r3
 8008348:	da0d      	bge.n	8008366 <__swhatbuf_r+0x2e>
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008350:	f04f 0100 	mov.w	r1, #0
 8008354:	bf14      	ite	ne
 8008356:	2340      	movne	r3, #64	@ 0x40
 8008358:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800835c:	2000      	movs	r0, #0
 800835e:	6031      	str	r1, [r6, #0]
 8008360:	602b      	str	r3, [r5, #0]
 8008362:	b016      	add	sp, #88	@ 0x58
 8008364:	bd70      	pop	{r4, r5, r6, pc}
 8008366:	466a      	mov	r2, sp
 8008368:	f000 f848 	bl	80083fc <_fstat_r>
 800836c:	2800      	cmp	r0, #0
 800836e:	dbec      	blt.n	800834a <__swhatbuf_r+0x12>
 8008370:	9901      	ldr	r1, [sp, #4]
 8008372:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008376:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800837a:	4259      	negs	r1, r3
 800837c:	4159      	adcs	r1, r3
 800837e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008382:	e7eb      	b.n	800835c <__swhatbuf_r+0x24>

08008384 <__smakebuf_r>:
 8008384:	898b      	ldrh	r3, [r1, #12]
 8008386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008388:	079d      	lsls	r5, r3, #30
 800838a:	4606      	mov	r6, r0
 800838c:	460c      	mov	r4, r1
 800838e:	d507      	bpl.n	80083a0 <__smakebuf_r+0x1c>
 8008390:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	6123      	str	r3, [r4, #16]
 8008398:	2301      	movs	r3, #1
 800839a:	6163      	str	r3, [r4, #20]
 800839c:	b003      	add	sp, #12
 800839e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083a0:	ab01      	add	r3, sp, #4
 80083a2:	466a      	mov	r2, sp
 80083a4:	f7ff ffc8 	bl	8008338 <__swhatbuf_r>
 80083a8:	9f00      	ldr	r7, [sp, #0]
 80083aa:	4605      	mov	r5, r0
 80083ac:	4639      	mov	r1, r7
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7ff fbbc 	bl	8007b2c <_malloc_r>
 80083b4:	b948      	cbnz	r0, 80083ca <__smakebuf_r+0x46>
 80083b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ba:	059a      	lsls	r2, r3, #22
 80083bc:	d4ee      	bmi.n	800839c <__smakebuf_r+0x18>
 80083be:	f023 0303 	bic.w	r3, r3, #3
 80083c2:	f043 0302 	orr.w	r3, r3, #2
 80083c6:	81a3      	strh	r3, [r4, #12]
 80083c8:	e7e2      	b.n	8008390 <__smakebuf_r+0xc>
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	6020      	str	r0, [r4, #0]
 80083ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083d2:	81a3      	strh	r3, [r4, #12]
 80083d4:	9b01      	ldr	r3, [sp, #4]
 80083d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80083da:	b15b      	cbz	r3, 80083f4 <__smakebuf_r+0x70>
 80083dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083e0:	4630      	mov	r0, r6
 80083e2:	f000 f81d 	bl	8008420 <_isatty_r>
 80083e6:	b128      	cbz	r0, 80083f4 <__smakebuf_r+0x70>
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	f023 0303 	bic.w	r3, r3, #3
 80083ee:	f043 0301 	orr.w	r3, r3, #1
 80083f2:	81a3      	strh	r3, [r4, #12]
 80083f4:	89a3      	ldrh	r3, [r4, #12]
 80083f6:	431d      	orrs	r5, r3
 80083f8:	81a5      	strh	r5, [r4, #12]
 80083fa:	e7cf      	b.n	800839c <__smakebuf_r+0x18>

080083fc <_fstat_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4d07      	ldr	r5, [pc, #28]	@ (800841c <_fstat_r+0x20>)
 8008400:	2300      	movs	r3, #0
 8008402:	4604      	mov	r4, r0
 8008404:	4608      	mov	r0, r1
 8008406:	4611      	mov	r1, r2
 8008408:	602b      	str	r3, [r5, #0]
 800840a:	f7f8 fe2e 	bl	800106a <_fstat>
 800840e:	1c43      	adds	r3, r0, #1
 8008410:	d102      	bne.n	8008418 <_fstat_r+0x1c>
 8008412:	682b      	ldr	r3, [r5, #0]
 8008414:	b103      	cbz	r3, 8008418 <_fstat_r+0x1c>
 8008416:	6023      	str	r3, [r4, #0]
 8008418:	bd38      	pop	{r3, r4, r5, pc}
 800841a:	bf00      	nop
 800841c:	200020e8 	.word	0x200020e8

08008420 <_isatty_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	4d06      	ldr	r5, [pc, #24]	@ (800843c <_isatty_r+0x1c>)
 8008424:	2300      	movs	r3, #0
 8008426:	4604      	mov	r4, r0
 8008428:	4608      	mov	r0, r1
 800842a:	602b      	str	r3, [r5, #0]
 800842c:	f7f8 fe2d 	bl	800108a <_isatty>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d102      	bne.n	800843a <_isatty_r+0x1a>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	b103      	cbz	r3, 800843a <_isatty_r+0x1a>
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	200020e8 	.word	0x200020e8

08008440 <_sbrk_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4d06      	ldr	r5, [pc, #24]	@ (800845c <_sbrk_r+0x1c>)
 8008444:	2300      	movs	r3, #0
 8008446:	4604      	mov	r4, r0
 8008448:	4608      	mov	r0, r1
 800844a:	602b      	str	r3, [r5, #0]
 800844c:	f7f8 fe36 	bl	80010bc <_sbrk>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d102      	bne.n	800845a <_sbrk_r+0x1a>
 8008454:	682b      	ldr	r3, [r5, #0]
 8008456:	b103      	cbz	r3, 800845a <_sbrk_r+0x1a>
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	200020e8 	.word	0x200020e8

08008460 <_init>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	bf00      	nop
 8008464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008466:	bc08      	pop	{r3}
 8008468:	469e      	mov	lr, r3
 800846a:	4770      	bx	lr

0800846c <_fini>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	bf00      	nop
 8008470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008472:	bc08      	pop	{r3}
 8008474:	469e      	mov	lr, r3
 8008476:	4770      	bx	lr
