
panTompkins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a0c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006ba0  08006ba0  00007ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bf8  08006bf8  000080fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006bf8  08006bf8  00007bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c00  08006c00  000080fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c00  08006c00  00007c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c04  08006c04  00007c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08006c08  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c04  200000fc  08006d04  000080fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d00  08006d04  00008d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6f5  00000000  00000000  0000812c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a45  00000000  00000000  00015821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00018268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087d  00000000  00000000  00018de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017af4  00000000  00000000  00019665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f46c  00000000  00000000  00031159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086731  00000000  00000000  000405c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6cf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db0  00000000  00000000  000c6d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000c9aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006b88 	.word	0x08006b88

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08006b88 	.word	0x08006b88

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 f95a 	bl	80007bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f806 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f870 	bl	80005f0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000510:	f005 fe1a 	bl	8006148 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <main+0x14>

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	@ 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	@ 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f006 fb02 	bl	8006b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b29      	ldr	r3, [pc, #164]	@ (80005e8 <SystemClock_Config+0xd0>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000544:	4a28      	ldr	r2, [pc, #160]	@ (80005e8 <SystemClock_Config+0xd0>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	@ 0x40
 800054c:	4b26      	ldr	r3, [pc, #152]	@ (80005e8 <SystemClock_Config+0xd0>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b23      	ldr	r3, [pc, #140]	@ (80005ec <SystemClock_Config+0xd4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000564:	4a21      	ldr	r2, [pc, #132]	@ (80005ec <SystemClock_Config+0xd4>)
 8000566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	@ (80005ec <SystemClock_Config+0xd4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000580:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800058c:	2319      	movs	r3, #25
 800058e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000590:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000594:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000596:	2304      	movs	r3, #4
 8000598:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 fea2 	bl	80022ec <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ae:	f000 f861 	bl	8000674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2102      	movs	r1, #2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 f904 	bl	80027dc <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005da:	f000 f84b 	bl	8000674 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	@ 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	4b18      	ldr	r3, [pc, #96]	@ (800066c <MX_GPIO_Init+0x7c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a17      	ldr	r2, [pc, #92]	@ (800066c <MX_GPIO_Init+0x7c>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b15      	ldr	r3, [pc, #84]	@ (800066c <MX_GPIO_Init+0x7c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b11      	ldr	r3, [pc, #68]	@ (800066c <MX_GPIO_Init+0x7c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a10      	ldr	r2, [pc, #64]	@ (800066c <MX_GPIO_Init+0x7c>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <MX_GPIO_Init+0x7c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2101      	movs	r1, #1
 8000642:	480b      	ldr	r0, [pc, #44]	@ (8000670 <MX_GPIO_Init+0x80>)
 8000644:	f000 fbe6 	bl	8000e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000648:	2301      	movs	r3, #1
 800064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	4619      	mov	r1, r3
 800065e:	4804      	ldr	r0, [pc, #16]	@ (8000670 <MX_GPIO_Init+0x80>)
 8000660:	f000 fa54 	bl	8000b0c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40020000 	.word	0x40020000

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <Error_Handler+0x8>

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <HAL_MspInit+0x4c>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800068e:	4a0f      	ldr	r2, [pc, #60]	@ (80006cc <HAL_MspInit+0x4c>)
 8000690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000694:	6453      	str	r3, [r2, #68]	@ 0x44
 8000696:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <HAL_MspInit+0x4c>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800069a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <HAL_MspInit+0x4c>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006aa:	4a08      	ldr	r2, [pc, #32]	@ (80006cc <HAL_MspInit+0x4c>)
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b2:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <HAL_MspInit+0x4c>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <NMI_Handler+0x4>

080006d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <HardFault_Handler+0x4>

080006e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <MemManage_Handler+0x4>

080006e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <BusFault_Handler+0x4>

080006f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <UsageFault_Handler+0x4>

080006f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000726:	f000 f89b 	bl	8000860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000734:	4802      	ldr	r0, [pc, #8]	@ (8000740 <OTG_FS_IRQHandler+0x10>)
 8000736:	f000 fcca 	bl	80010ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200015fc 	.word	0x200015fc

08000744 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <SystemInit+0x20>)
 800074a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800074e:	4a05      	ldr	r2, [pc, #20]	@ (8000764 <SystemInit+0x20>)
 8000750:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000754:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000768:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800076c:	f7ff ffea 	bl	8000744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000770:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000772:	490d      	ldr	r1, [pc, #52]	@ (80007a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000774:	4a0d      	ldr	r2, [pc, #52]	@ (80007ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0a      	ldr	r2, [pc, #40]	@ (80007b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000788:	4c0a      	ldr	r4, [pc, #40]	@ (80007b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000796:	f006 f9d3 	bl	8006b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800079a:	f7ff feb1 	bl	8000500 <main>
  bx  lr    
 800079e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80007ac:	08006c08 	.word	0x08006c08
  ldr r2, =_sbss
 80007b0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80007b4:	20001d00 	.word	0x20001d00

080007b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC_IRQHandler>
	...

080007bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007c0:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <HAL_Init+0x40>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0d      	ldr	r2, [pc, #52]	@ (80007fc <HAL_Init+0x40>)
 80007c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007cc:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <HAL_Init+0x40>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0a      	ldr	r2, [pc, #40]	@ (80007fc <HAL_Init+0x40>)
 80007d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d8:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <HAL_Init+0x40>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a07      	ldr	r2, [pc, #28]	@ (80007fc <HAL_Init+0x40>)
 80007de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e4:	2003      	movs	r0, #3
 80007e6:	f000 f94f 	bl	8000a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ea:	200f      	movs	r0, #15
 80007ec:	f000 f808 	bl	8000800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f0:	f7ff ff46 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023c00 	.word	0x40023c00

08000800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000808:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <HAL_InitTick+0x54>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <HAL_InitTick+0x58>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000816:	fbb3 f3f1 	udiv	r3, r3, r1
 800081a:	fbb2 f3f3 	udiv	r3, r2, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f967 	bl	8000af2 <HAL_SYSTICK_Config>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e00e      	b.n	800084c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b0f      	cmp	r3, #15
 8000832:	d80a      	bhi.n	800084a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000834:	2200      	movs	r2, #0
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	f000 f92f 	bl	8000a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000840:	4a06      	ldr	r2, [pc, #24]	@ (800085c <HAL_InitTick+0x5c>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000846:	2300      	movs	r3, #0
 8000848:	e000      	b.n	800084c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000000 	.word	0x20000000
 8000858:	20000008 	.word	0x20000008
 800085c:	20000004 	.word	0x20000004

08000860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <HAL_IncTick+0x20>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <HAL_IncTick+0x24>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4413      	add	r3, r2
 8000870:	4a04      	ldr	r2, [pc, #16]	@ (8000884 <HAL_IncTick+0x24>)
 8000872:	6013      	str	r3, [r2, #0]
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000008 	.word	0x20000008
 8000884:	20000118 	.word	0x20000118

08000888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return uwTick;
 800088c:	4b03      	ldr	r3, [pc, #12]	@ (800089c <HAL_GetTick+0x14>)
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	20000118 	.word	0x20000118

080008a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a8:	f7ff ffee 	bl	8000888 <HAL_GetTick>
 80008ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b8:	d005      	beq.n	80008c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ba:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <HAL_Delay+0x44>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	4413      	add	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008c6:	bf00      	nop
 80008c8:	f7ff ffde 	bl	8000888 <HAL_GetTick>
 80008cc:	4602      	mov	r2, r0
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d8f7      	bhi.n	80008c8 <HAL_Delay+0x28>
  {
  }
}
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000008 	.word	0x20000008

080008e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <__NVIC_SetPriorityGrouping+0x44>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000904:	4013      	ands	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000910:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091a:	4a04      	ldr	r2, [pc, #16]	@ (800092c <__NVIC_SetPriorityGrouping+0x44>)
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	60d3      	str	r3, [r2, #12]
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000934:	4b04      	ldr	r3, [pc, #16]	@ (8000948 <__NVIC_GetPriorityGrouping+0x18>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	f003 0307 	and.w	r3, r3, #7
}
 800093e:	4618      	mov	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	2b00      	cmp	r3, #0
 800095c:	db0b      	blt.n	8000976 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	f003 021f 	and.w	r2, r3, #31
 8000964:	4907      	ldr	r1, [pc, #28]	@ (8000984 <__NVIC_EnableIRQ+0x38>)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	095b      	lsrs	r3, r3, #5
 800096c:	2001      	movs	r0, #1
 800096e:	fa00 f202 	lsl.w	r2, r0, r2
 8000972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000e100 	.word	0xe000e100

08000988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	6039      	str	r1, [r7, #0]
 8000992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000998:	2b00      	cmp	r3, #0
 800099a:	db0a      	blt.n	80009b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	490c      	ldr	r1, [pc, #48]	@ (80009d4 <__NVIC_SetPriority+0x4c>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	0112      	lsls	r2, r2, #4
 80009a8:	b2d2      	uxtb	r2, r2
 80009aa:	440b      	add	r3, r1
 80009ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b0:	e00a      	b.n	80009c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4908      	ldr	r1, [pc, #32]	@ (80009d8 <__NVIC_SetPriority+0x50>)
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f003 030f 	and.w	r3, r3, #15
 80009be:	3b04      	subs	r3, #4
 80009c0:	0112      	lsls	r2, r2, #4
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	440b      	add	r3, r1
 80009c6:	761a      	strb	r2, [r3, #24]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000e100 	.word	0xe000e100
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b089      	sub	sp, #36	@ 0x24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	f1c3 0307 	rsb	r3, r3, #7
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	bf28      	it	cs
 80009fa:	2304      	movcs	r3, #4
 80009fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3304      	adds	r3, #4
 8000a02:	2b06      	cmp	r3, #6
 8000a04:	d902      	bls.n	8000a0c <NVIC_EncodePriority+0x30>
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3b03      	subs	r3, #3
 8000a0a:	e000      	b.n	8000a0e <NVIC_EncodePriority+0x32>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	f04f 32ff 	mov.w	r2, #4294967295
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	401a      	ands	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a24:	f04f 31ff 	mov.w	r1, #4294967295
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2e:	43d9      	mvns	r1, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	4313      	orrs	r3, r2
         );
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3724      	adds	r7, #36	@ 0x24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a54:	d301      	bcc.n	8000a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a56:	2301      	movs	r3, #1
 8000a58:	e00f      	b.n	8000a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <SysTick_Config+0x40>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a62:	210f      	movs	r1, #15
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295
 8000a68:	f7ff ff8e 	bl	8000988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a6c:	4b05      	ldr	r3, [pc, #20]	@ (8000a84 <SysTick_Config+0x40>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a72:	4b04      	ldr	r3, [pc, #16]	@ (8000a84 <SysTick_Config+0x40>)
 8000a74:	2207      	movs	r2, #7
 8000a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	e000e010 	.word	0xe000e010

08000a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ff29 	bl	80008e8 <__NVIC_SetPriorityGrouping>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b086      	sub	sp, #24
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab0:	f7ff ff3e 	bl	8000930 <__NVIC_GetPriorityGrouping>
 8000ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	68b9      	ldr	r1, [r7, #8]
 8000aba:	6978      	ldr	r0, [r7, #20]
 8000abc:	f7ff ff8e 	bl	80009dc <NVIC_EncodePriority>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff5d 	bl	8000988 <__NVIC_SetPriority>
}
 8000ace:	bf00      	nop
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff31 	bl	800094c <__NVIC_EnableIRQ>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ffa2 	bl	8000a44 <SysTick_Config>
 8000b00:	4603      	mov	r3, r0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	@ 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
 8000b26:	e159      	b.n	8000ddc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b28:	2201      	movs	r2, #1
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	f040 8148 	bne.w	8000dd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 0303 	and.w	r3, r3, #3
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d005      	beq.n	8000b5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d130      	bne.n	8000bc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	4013      	ands	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b94:	2201      	movs	r2, #1
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	091b      	lsrs	r3, r3, #4
 8000baa:	f003 0201 	and.w	r2, r3, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 0303 	and.w	r3, r3, #3
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d017      	beq.n	8000bfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 0303 	and.w	r3, r3, #3
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d123      	bne.n	8000c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	08da      	lsrs	r2, r3, #3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3208      	adds	r2, #8
 8000c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	f003 0307 	and.w	r3, r3, #7
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	220f      	movs	r2, #15
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	691a      	ldr	r2, [r3, #16]
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	08da      	lsrs	r2, r3, #3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3208      	adds	r2, #8
 8000c4a:	69b9      	ldr	r1, [r7, #24]
 8000c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0203 	and.w	r2, r3, #3
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f000 80a2 	beq.w	8000dd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b57      	ldr	r3, [pc, #348]	@ (8000df4 <HAL_GPIO_Init+0x2e8>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	4a56      	ldr	r2, [pc, #344]	@ (8000df4 <HAL_GPIO_Init+0x2e8>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca2:	4b54      	ldr	r3, [pc, #336]	@ (8000df4 <HAL_GPIO_Init+0x2e8>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cae:	4a52      	ldr	r2, [pc, #328]	@ (8000df8 <HAL_GPIO_Init+0x2ec>)
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	220f      	movs	r2, #15
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a49      	ldr	r2, [pc, #292]	@ (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d019      	beq.n	8000d0e <HAL_GPIO_Init+0x202>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a48      	ldr	r2, [pc, #288]	@ (8000e00 <HAL_GPIO_Init+0x2f4>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d013      	beq.n	8000d0a <HAL_GPIO_Init+0x1fe>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a47      	ldr	r2, [pc, #284]	@ (8000e04 <HAL_GPIO_Init+0x2f8>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d00d      	beq.n	8000d06 <HAL_GPIO_Init+0x1fa>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a46      	ldr	r2, [pc, #280]	@ (8000e08 <HAL_GPIO_Init+0x2fc>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d007      	beq.n	8000d02 <HAL_GPIO_Init+0x1f6>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a45      	ldr	r2, [pc, #276]	@ (8000e0c <HAL_GPIO_Init+0x300>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d101      	bne.n	8000cfe <HAL_GPIO_Init+0x1f2>
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	e008      	b.n	8000d10 <HAL_GPIO_Init+0x204>
 8000cfe:	2307      	movs	r3, #7
 8000d00:	e006      	b.n	8000d10 <HAL_GPIO_Init+0x204>
 8000d02:	2303      	movs	r3, #3
 8000d04:	e004      	b.n	8000d10 <HAL_GPIO_Init+0x204>
 8000d06:	2302      	movs	r3, #2
 8000d08:	e002      	b.n	8000d10 <HAL_GPIO_Init+0x204>
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e000      	b.n	8000d10 <HAL_GPIO_Init+0x204>
 8000d0e:	2300      	movs	r3, #0
 8000d10:	69fa      	ldr	r2, [r7, #28]
 8000d12:	f002 0203 	and.w	r2, r2, #3
 8000d16:	0092      	lsls	r2, r2, #2
 8000d18:	4093      	lsls	r3, r2
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d20:	4935      	ldr	r1, [pc, #212]	@ (8000df8 <HAL_GPIO_Init+0x2ec>)
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	089b      	lsrs	r3, r3, #2
 8000d26:	3302      	adds	r3, #2
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d2e:	4b38      	ldr	r3, [pc, #224]	@ (8000e10 <HAL_GPIO_Init+0x304>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d52:	4a2f      	ldr	r2, [pc, #188]	@ (8000e10 <HAL_GPIO_Init+0x304>)
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d58:	4b2d      	ldr	r3, [pc, #180]	@ (8000e10 <HAL_GPIO_Init+0x304>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d7c:	4a24      	ldr	r2, [pc, #144]	@ (8000e10 <HAL_GPIO_Init+0x304>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d82:	4b23      	ldr	r3, [pc, #140]	@ (8000e10 <HAL_GPIO_Init+0x304>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000da6:	4a1a      	ldr	r2, [pc, #104]	@ (8000e10 <HAL_GPIO_Init+0x304>)
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dac:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <HAL_GPIO_Init+0x304>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dd0:	4a0f      	ldr	r2, [pc, #60]	@ (8000e10 <HAL_GPIO_Init+0x304>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	61fb      	str	r3, [r7, #28]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	2b0f      	cmp	r3, #15
 8000de0:	f67f aea2 	bls.w	8000b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	3724      	adds	r7, #36	@ 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40013800 	.word	0x40013800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020400 	.word	0x40020400
 8000e04:	40020800 	.word	0x40020800
 8000e08:	40020c00 	.word	0x40020c00
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40013c00 	.word	0x40013c00

08000e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]
 8000e20:	4613      	mov	r3, r2
 8000e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e24:	787b      	ldrb	r3, [r7, #1]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e30:	e003      	b.n	8000e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	041a      	lsls	r2, r3, #16
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	619a      	str	r2, [r3, #24]
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af02      	add	r7, sp, #8
 8000e4c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d101      	bne.n	8000e58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e101      	b.n	800105c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d106      	bne.n	8000e78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f005 fb48 	bl	8006508 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e86:	d102      	bne.n	8000e8e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 ff71 	bl	8002d7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7c1a      	ldrb	r2, [r3, #16]
 8000ea0:	f88d 2000 	strb.w	r2, [sp]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ea8:	f001 fe50 	bl	8002b4c <USB_CoreInit>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d005      	beq.n	8000ebe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e0ce      	b.n	800105c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f001 ff69 	bl	8002d9c <USB_SetCurrentMode>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d005      	beq.n	8000edc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e0bf      	b.n	800105c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e04a      	b.n	8000f78 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	3315      	adds	r3, #21
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	4413      	add	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	440b      	add	r3, r1
 8000f04:	3314      	adds	r3, #20
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	b298      	uxth	r0, r3
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	332e      	adds	r3, #46	@ 0x2e
 8000f1e:	4602      	mov	r2, r0
 8000f20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	440b      	add	r3, r1
 8000f30:	3318      	adds	r3, #24
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	4413      	add	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	331c      	adds	r3, #28
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	4413      	add	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	440b      	add	r3, r1
 8000f58:	3320      	adds	r3, #32
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	4413      	add	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3324      	adds	r3, #36	@ 0x24
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	3301      	adds	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	791b      	ldrb	r3, [r3, #4]
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d3af      	bcc.n	8000ee2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
 8000f86:	e044      	b.n	8001012 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f9e:	7bfa      	ldrb	r2, [r7, #15]
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	4413      	add	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	4413      	add	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	3301      	adds	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	791b      	ldrb	r3, [r3, #4]
 8001016:	7bfa      	ldrb	r2, [r7, #15]
 8001018:	429a      	cmp	r2, r3
 800101a:	d3b5      	bcc.n	8000f88 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7c1a      	ldrb	r2, [r3, #16]
 8001024:	f88d 2000 	strb.w	r2, [sp]
 8001028:	3304      	adds	r3, #4
 800102a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800102c:	f001 ff02 	bl	8002e34 <USB_DevInit>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d005      	beq.n	8001042 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2202      	movs	r2, #2
 800103a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00c      	b.n	800105c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f002 ff4c 	bl	8003ef2 <USB_DevDisconnect>

  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001078:	2b01      	cmp	r3, #1
 800107a:	d101      	bne.n	8001080 <HAL_PCD_Start+0x1c>
 800107c:	2302      	movs	r3, #2
 800107e:	e022      	b.n	80010c6 <HAL_PCD_Start+0x62>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001090:	2b00      	cmp	r3, #0
 8001092:	d009      	beq.n	80010a8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001098:	2b01      	cmp	r3, #1
 800109a:	d105      	bne.n	80010a8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 fe53 	bl	8002d58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 fefa 	bl	8003eb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010ce:	b590      	push	{r4, r7, lr}
 80010d0:	b08d      	sub	sp, #52	@ 0x34
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010dc:	6a3b      	ldr	r3, [r7, #32]
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 ffb8 	bl	800405a <USB_GetMode>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f040 848c 	bne.w	8001a0a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 ff1c 	bl	8003f34 <USB_ReadInterrupts>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8482 	beq.w	8001a08 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f002 ff09 	bl	8003f34 <USB_ReadInterrupts>
 8001122:	4603      	mov	r3, r0
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b02      	cmp	r3, #2
 800112a:	d107      	bne.n	800113c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f002 0202 	and.w	r2, r2, #2
 800113a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f002 fef7 	bl	8003f34 <USB_ReadInterrupts>
 8001146:	4603      	mov	r3, r0
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	2b10      	cmp	r3, #16
 800114e:	d161      	bne.n	8001214 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	699a      	ldr	r2, [r3, #24]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0210 	bic.w	r2, r2, #16
 800115e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001160:	6a3b      	ldr	r3, [r7, #32]
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	f003 020f 	and.w	r2, r3, #15
 800116c:	4613      	mov	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	3304      	adds	r3, #4
 800117e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001186:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800118a:	d124      	bne.n	80011d6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001192:	4013      	ands	r3, r2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d035      	beq.n	8001204 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	091b      	lsrs	r3, r3, #4
 80011a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	6a38      	ldr	r0, [r7, #32]
 80011ac:	f002 fd2e 	bl	8003c0c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011bc:	441a      	add	r2, r3
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	695a      	ldr	r2, [r3, #20]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011ce:	441a      	add	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	615a      	str	r2, [r3, #20]
 80011d4:	e016      	b.n	8001204 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80011dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80011e0:	d110      	bne.n	8001204 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80011e8:	2208      	movs	r2, #8
 80011ea:	4619      	mov	r1, r3
 80011ec:	6a38      	ldr	r0, [r7, #32]
 80011ee:	f002 fd0d 	bl	8003c0c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011fe:	441a      	add	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	699a      	ldr	r2, [r3, #24]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 0210 	orr.w	r2, r2, #16
 8001212:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f002 fe8b 	bl	8003f34 <USB_ReadInterrupts>
 800121e:	4603      	mov	r3, r0
 8001220:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001224:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001228:	f040 80a7 	bne.w	800137a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f002 fe90 	bl	8003f5a <USB_ReadDevAllOutEpInterrupt>
 800123a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800123c:	e099      	b.n	8001372 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800123e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 808e 	beq.w	8001366 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f002 feb4 	bl	8003fc2 <USB_ReadDevOutEPInterrupt>
 800125a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00c      	beq.n	8001280 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001268:	015a      	lsls	r2, r3, #5
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	4413      	add	r3, r2
 800126e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001272:	461a      	mov	r2, r3
 8001274:	2301      	movs	r3, #1
 8001276:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001278:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 fea4 	bl	8001fc8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00c      	beq.n	80012a4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800128a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128c:	015a      	lsls	r2, r3, #5
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	4413      	add	r3, r2
 8001292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001296:	461a      	mov	r2, r3
 8001298:	2308      	movs	r3, #8
 800129a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800129c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 ff7a 	bl	8002198 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d008      	beq.n	80012c0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b0:	015a      	lsls	r2, r3, #5
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	4413      	add	r3, r2
 80012b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012ba:	461a      	mov	r2, r3
 80012bc:	2310      	movs	r3, #16
 80012be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d030      	beq.n	800132c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d2:	2b80      	cmp	r3, #128	@ 0x80
 80012d4:	d109      	bne.n	80012ea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80012e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012e8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80012ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ec:	4613      	mov	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	4413      	add	r3, r2
 80012fc:	3304      	adds	r3, #4
 80012fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	78db      	ldrb	r3, [r3, #3]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d108      	bne.n	800131a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2200      	movs	r2, #0
 800130c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800130e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4619      	mov	r1, r3
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f005 f9fd 	bl	8006714 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	015a      	lsls	r2, r3, #5
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	4413      	add	r3, r2
 8001322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001326:	461a      	mov	r2, r3
 8001328:	2302      	movs	r3, #2
 800132a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	f003 0320 	and.w	r3, r3, #32
 8001332:	2b00      	cmp	r3, #0
 8001334:	d008      	beq.n	8001348 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	015a      	lsls	r2, r3, #5
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	4413      	add	r3, r2
 800133e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001342:	461a      	mov	r2, r3
 8001344:	2320      	movs	r3, #32
 8001346:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d009      	beq.n	8001366 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001354:	015a      	lsls	r2, r3, #5
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	4413      	add	r3, r2
 800135a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800135e:	461a      	mov	r2, r3
 8001360:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001364:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001368:	3301      	adds	r3, #1
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800136c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800136e:	085b      	lsrs	r3, r3, #1
 8001370:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001374:	2b00      	cmp	r3, #0
 8001376:	f47f af62 	bne.w	800123e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fdd8 	bl	8003f34 <USB_ReadInterrupts>
 8001384:	4603      	mov	r3, r0
 8001386:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800138a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800138e:	f040 80db 	bne.w	8001548 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f002 fdf9 	bl	8003f8e <USB_ReadDevAllInEpInterrupt>
 800139c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80013a2:	e0cd      	b.n	8001540 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 80c2 	beq.w	8001534 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	4611      	mov	r1, r2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 fe1f 	bl	8003ffe <USB_ReadDevInEPInterrupt>
 80013c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d057      	beq.n	800147c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	2201      	movs	r2, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69f9      	ldr	r1, [r7, #28]
 80013e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80013ec:	4013      	ands	r3, r2
 80013ee:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f2:	015a      	lsls	r2, r3, #5
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80013fc:	461a      	mov	r2, r3
 80013fe:	2301      	movs	r3, #1
 8001400:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	799b      	ldrb	r3, [r3, #6]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d132      	bne.n	8001470 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800140e:	4613      	mov	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	3320      	adds	r3, #32
 800141a:	6819      	ldr	r1, [r3, #0]
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001420:	4613      	mov	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4413      	add	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4403      	add	r3, r0
 800142a:	331c      	adds	r3, #28
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4419      	add	r1, r3
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001434:	4613      	mov	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4403      	add	r3, r0
 800143e:	3320      	adds	r3, #32
 8001440:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001444:	2b00      	cmp	r3, #0
 8001446:	d113      	bne.n	8001470 <HAL_PCD_IRQHandler+0x3a2>
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	3324      	adds	r3, #36	@ 0x24
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d108      	bne.n	8001470 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001468:	461a      	mov	r2, r3
 800146a:	2101      	movs	r1, #1
 800146c:	f002 fe26 	bl	80040bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4619      	mov	r1, r3
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f005 f8c7 	bl	800660a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d008      	beq.n	8001498 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001488:	015a      	lsls	r2, r3, #5
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	4413      	add	r3, r2
 800148e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001492:	461a      	mov	r2, r3
 8001494:	2308      	movs	r3, #8
 8001496:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d008      	beq.n	80014b4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a4:	015a      	lsls	r2, r3, #5
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	4413      	add	r3, r2
 80014aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014ae:	461a      	mov	r2, r3
 80014b0:	2310      	movs	r3, #16
 80014b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d008      	beq.n	80014d0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c0:	015a      	lsls	r2, r3, #5
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014ca:	461a      	mov	r2, r3
 80014cc:	2340      	movs	r3, #64	@ 0x40
 80014ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d023      	beq.n	8001522 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80014da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014dc:	6a38      	ldr	r0, [r7, #32]
 80014de:	f001 fe0d 	bl	80030fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80014e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014e4:	4613      	mov	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	3310      	adds	r3, #16
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	3304      	adds	r3, #4
 80014f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	78db      	ldrb	r3, [r3, #3]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d108      	bne.n	8001510 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	2200      	movs	r2, #0
 8001502:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4619      	mov	r1, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f005 f914 	bl	8006738 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	015a      	lsls	r2, r3, #5
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800151c:	461a      	mov	r2, r3
 800151e:	2302      	movs	r3, #2
 8001520:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800152c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fcbd 	bl	8001eae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	3301      	adds	r3, #1
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800153a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800153c:	085b      	lsrs	r3, r3, #1
 800153e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001542:	2b00      	cmp	r3, #0
 8001544:	f47f af2e 	bne.w	80013a4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f002 fcf1 	bl	8003f34 <USB_ReadInterrupts>
 8001552:	4603      	mov	r3, r0
 8001554:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001558:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800155c:	d122      	bne.n	80015a4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800156c:	f023 0301 	bic.w	r3, r3, #1
 8001570:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001578:	2b01      	cmp	r3, #1
 800157a:	d108      	bne.n	800158e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001584:	2100      	movs	r1, #0
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fea4 	bl	80022d4 <HAL_PCDEx_LPM_Callback>
 800158c:	e002      	b.n	8001594 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f005 f8b2 	bl	80066f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80015a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fcc3 	bl	8003f34 <USB_ReadInterrupts>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80015b8:	d112      	bne.n	80015e0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d102      	bne.n	80015d0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f005 f86e 	bl	80066ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80015de:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 fca5 	bl	8003f34 <USB_ReadInterrupts>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015f4:	f040 80b7 	bne.w	8001766 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	69fa      	ldr	r2, [r7, #28]
 8001602:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2110      	movs	r1, #16
 8001612:	4618      	mov	r0, r3
 8001614:	f001 fd72 	bl	80030fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800161c:	e046      	b.n	80016ac <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800161e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001620:	015a      	lsls	r2, r3, #5
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	4413      	add	r3, r2
 8001626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800162a:	461a      	mov	r2, r3
 800162c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001630:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001634:	015a      	lsls	r2, r3, #5
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	4413      	add	r3, r2
 800163a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001642:	0151      	lsls	r1, r2, #5
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	440a      	add	r2, r1
 8001648:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800164c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001650:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001654:	015a      	lsls	r2, r3, #5
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	4413      	add	r3, r2
 800165a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800165e:	461a      	mov	r2, r3
 8001660:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001664:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001668:	015a      	lsls	r2, r3, #5
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	4413      	add	r3, r2
 800166e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001676:	0151      	lsls	r1, r2, #5
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	440a      	add	r2, r1
 800167c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001680:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001684:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001688:	015a      	lsls	r2, r3, #5
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	4413      	add	r3, r2
 800168e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001696:	0151      	lsls	r1, r2, #5
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	440a      	add	r2, r1
 800169c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80016a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80016a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a8:	3301      	adds	r3, #1
 80016aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	791b      	ldrb	r3, [r3, #4]
 80016b0:	461a      	mov	r2, r3
 80016b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d3b2      	bcc.n	800161e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016c6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80016ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7bdb      	ldrb	r3, [r3, #15]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d016      	beq.n	8001702 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016e4:	f043 030b 	orr.w	r3, r3, #11
 80016e8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016fa:	f043 030b 	orr.w	r3, r3, #11
 80016fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001700:	e015      	b.n	800172e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001710:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001714:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001718:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001728:	f043 030b 	orr.w	r3, r3, #11
 800172c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800173c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001740:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001750:	461a      	mov	r2, r3
 8001752:	f002 fcb3 	bl	80040bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fbe2 	bl	8003f34 <USB_ReadInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800177a:	d123      	bne.n	80017c4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f002 fc78 	bl	8004076 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f001 fd2f 	bl	80031ee <USB_GetDevSpeed>
 8001790:	4603      	mov	r3, r0
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681c      	ldr	r4, [r3, #0]
 800179c:	f001 f9ca 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 80017a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017a6:	461a      	mov	r2, r3
 80017a8:	4620      	mov	r0, r4
 80017aa:	f001 fa33 	bl	8002c14 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f004 ff53 	bl	800665a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80017c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f002 fbb3 	bl	8003f34 <USB_ReadInterrupts>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d10a      	bne.n	80017ee <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f004 ff30 	bl	800663e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695a      	ldr	r2, [r3, #20]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f002 0208 	and.w	r2, r2, #8
 80017ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f002 fb9e 	bl	8003f34 <USB_ReadInterrupts>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fe:	2b80      	cmp	r3, #128	@ 0x80
 8001800:	d123      	bne.n	800184a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800180e:	2301      	movs	r3, #1
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
 8001812:	e014      	b.n	800183e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001818:	4613      	mov	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800182c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182e:	b2db      	uxtb	r3, r3
 8001830:	4619      	mov	r1, r3
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fb0a 	bl	8001e4c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183a:	3301      	adds	r3, #1
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	791b      	ldrb	r3, [r3, #4]
 8001842:	461a      	mov	r2, r3
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	4293      	cmp	r3, r2
 8001848:	d3e4      	bcc.n	8001814 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f002 fb70 	bl	8003f34 <USB_ReadInterrupts>
 8001854:	4603      	mov	r3, r0
 8001856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800185a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800185e:	d13c      	bne.n	80018da <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001860:	2301      	movs	r3, #1
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
 8001864:	e02b      	b.n	80018be <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001868:	015a      	lsls	r2, r3, #5
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	4413      	add	r3, r2
 800186e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800187a:	4613      	mov	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	3318      	adds	r3, #24
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d115      	bne.n	80018b8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800188c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800188e:	2b00      	cmp	r3, #0
 8001890:	da12      	bge.n	80018b8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001896:	4613      	mov	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	3317      	adds	r3, #23
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	4619      	mov	r1, r3
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 faca 	bl	8001e4c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ba:	3301      	adds	r3, #1
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	791b      	ldrb	r3, [r3, #4]
 80018c2:	461a      	mov	r2, r3
 80018c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d3cd      	bcc.n	8001866 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	695a      	ldr	r2, [r3, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80018d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 fb28 	bl	8003f34 <USB_ReadInterrupts>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80018ee:	d156      	bne.n	800199e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018f0:	2301      	movs	r3, #1
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f4:	e045      	b.n	8001982 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	015a      	lsls	r2, r3, #5
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d12e      	bne.n	800197c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800191e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001920:	2b00      	cmp	r3, #0
 8001922:	da2b      	bge.n	800197c <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	0c1a      	lsrs	r2, r3, #16
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800192e:	4053      	eors	r3, r2
 8001930:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001934:	2b00      	cmp	r3, #0
 8001936:	d121      	bne.n	800197c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800193c:	4613      	mov	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10a      	bne.n	800197c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001974:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001978:	6053      	str	r3, [r2, #4]
            break;
 800197a:	e008      	b.n	800198e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197e:	3301      	adds	r3, #1
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	791b      	ldrb	r3, [r3, #4]
 8001986:	461a      	mov	r2, r3
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	4293      	cmp	r3, r2
 800198c:	d3b3      	bcc.n	80018f6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800199c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 fac6 	bl	8003f34 <USB_ReadInterrupts>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80019ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019b2:	d10a      	bne.n	80019ca <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f004 fed1 	bl	800675c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80019c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 fab0 	bl	8003f34 <USB_ReadInterrupts>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d115      	bne.n	8001a0a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f004 fec1 	bl	8006778 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6859      	ldr	r1, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	e000      	b.n	8001a0a <HAL_PCD_IRQHandler+0x93c>
      return;
 8001a08:	bf00      	nop
    }
  }
}
 8001a0a:	3734      	adds	r7, #52	@ 0x34
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd90      	pop	{r4, r7, pc}

08001a10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_PCD_SetAddress+0x1a>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e012      	b.n	8001a50 <HAL_PCD_SetAddress+0x40>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f002 fa0f 	bl	8003e64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	4608      	mov	r0, r1
 8001a62:	4611      	mov	r1, r2
 8001a64:	461a      	mov	r2, r3
 8001a66:	4603      	mov	r3, r0
 8001a68:	70fb      	strb	r3, [r7, #3]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	803b      	strh	r3, [r7, #0]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	da0f      	bge.n	8001a9e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	f003 020f 	and.w	r2, r3, #15
 8001a84:	4613      	mov	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	3310      	adds	r3, #16
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	3304      	adds	r3, #4
 8001a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	705a      	strb	r2, [r3, #1]
 8001a9c:	e00f      	b.n	8001abe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	f003 020f 	and.w	r2, r3, #15
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001aca:	883b      	ldrh	r3, [r7, #0]
 8001acc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	78ba      	ldrb	r2, [r7, #2]
 8001ad8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	785b      	ldrb	r3, [r3, #1]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d004      	beq.n	8001aec <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001aec:	78bb      	ldrb	r3, [r7, #2]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d102      	bne.n	8001af8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_PCD_EP_Open+0xae>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e00e      	b.n	8001b24 <HAL_PCD_EP_Open+0xcc>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68f9      	ldr	r1, [r7, #12]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f001 fb8f 	bl	8003238 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001b22:	7afb      	ldrb	r3, [r7, #11]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	da0f      	bge.n	8001b60 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	f003 020f 	and.w	r2, r3, #15
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	3310      	adds	r3, #16
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	3304      	adds	r3, #4
 8001b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	705a      	strb	r2, [r3, #1]
 8001b5e:	e00f      	b.n	8001b80 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	f003 020f 	and.w	r2, r3, #15
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	3304      	adds	r3, #4
 8001b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_PCD_EP_Close+0x6e>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e00e      	b.n	8001bb8 <HAL_PCD_EP_Close+0x8c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68f9      	ldr	r1, [r7, #12]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f001 fbcd 	bl	8003348 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bd0:	7afb      	ldrb	r3, [r7, #11]
 8001bd2:	f003 020f 	and.w	r2, r3, #15
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4413      	add	r3, r2
 8001be6:	3304      	adds	r3, #4
 8001be8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c02:	7afb      	ldrb	r3, [r7, #11]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	799b      	ldrb	r3, [r3, #6]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d102      	bne.n	8001c1c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	799b      	ldrb	r3, [r3, #6]
 8001c24:	461a      	mov	r2, r3
 8001c26:	6979      	ldr	r1, [r7, #20]
 8001c28:	f001 fc6a 	bl	8003500 <USB_EPStartXfer>

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	f003 020f 	and.w	r2, r3, #15
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001c58:	681b      	ldr	r3, [r3, #0]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	460b      	mov	r3, r1
 8001c74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c76:	7afb      	ldrb	r3, [r7, #11]
 8001c78:	f003 020f 	and.w	r2, r3, #15
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	3310      	adds	r3, #16
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4413      	add	r3, r2
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	799b      	ldrb	r3, [r3, #6]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d102      	bne.n	8001cc0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	799b      	ldrb	r3, [r3, #6]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	6979      	ldr	r1, [r7, #20]
 8001ccc:	f001 fc18 	bl	8003500 <USB_EPStartXfer>

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	7912      	ldrb	r2, [r2, #4]
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e04f      	b.n	8001d98 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	da0f      	bge.n	8001d20 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	f003 020f 	and.w	r2, r3, #15
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	3310      	adds	r3, #16
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	3304      	adds	r3, #4
 8001d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	705a      	strb	r2, [r3, #1]
 8001d1e:	e00d      	b.n	8001d3c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	4613      	mov	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	3304      	adds	r3, #4
 8001d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_PCD_EP_SetStall+0x82>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e01d      	b.n	8001d98 <HAL_PCD_EP_SetStall+0xbe>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68f9      	ldr	r1, [r7, #12]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f001 ffa6 	bl	8003cbc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7999      	ldrb	r1, [r3, #6]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d88:	461a      	mov	r2, r3
 8001d8a:	f002 f997 	bl	80040bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	7912      	ldrb	r2, [r2, #4]
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e042      	b.n	8001e44 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	da0f      	bge.n	8001de6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	f003 020f 	and.w	r2, r3, #15
 8001dcc:	4613      	mov	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	3310      	adds	r3, #16
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	3304      	adds	r3, #4
 8001ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2201      	movs	r2, #1
 8001de2:	705a      	strb	r2, [r3, #1]
 8001de4:	e00f      	b.n	8001e06 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	f003 020f 	and.w	r2, r3, #15
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_PCD_EP_ClrStall+0x86>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e00e      	b.n	8001e44 <HAL_PCD_EP_ClrStall+0xa4>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68f9      	ldr	r1, [r7, #12]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f001 ffaf 	bl	8003d98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	da0c      	bge.n	8001e7a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	f003 020f 	and.w	r2, r3, #15
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	3310      	adds	r3, #16
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	3304      	adds	r3, #4
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	e00c      	b.n	8001e94 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	f003 020f 	and.w	r2, r3, #15
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	3304      	adds	r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68f9      	ldr	r1, [r7, #12]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 fdce 	bl	8003a3c <USB_EPStopXfer>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ea4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b08a      	sub	sp, #40	@ 0x28
 8001eb2:	af02      	add	r7, sp, #8
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	3310      	adds	r3, #16
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d901      	bls.n	8001ee6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e06b      	b.n	8001fbe <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d902      	bls.n	8001f02 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3303      	adds	r3, #3
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f0a:	e02a      	b.n	8001f62 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d902      	bls.n	8001f28 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	3303      	adds	r3, #3
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	68d9      	ldr	r1, [r3, #12]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	4603      	mov	r3, r0
 8001f44:	6978      	ldr	r0, [r7, #20]
 8001f46:	f001 fe23 	bl	8003b90 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	441a      	add	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	441a      	add	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d809      	bhi.n	8001f8c <PCD_WriteEmptyTxFifo+0xde>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d203      	bcs.n	8001f8c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1bf      	bne.n	8001f0c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d811      	bhi.n	8001fbc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	6939      	ldr	r1, [r7, #16]
 8001fb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001fb8:	4013      	ands	r3, r2
 8001fba:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3720      	adds	r7, #32
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	333c      	adds	r3, #60	@ 0x3c
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	799b      	ldrb	r3, [r3, #6]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d17b      	bne.n	80020f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d015      	beq.n	8002034 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	4a61      	ldr	r2, [pc, #388]	@ (8002190 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	f240 80b9 	bls.w	8002184 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80b3 	beq.w	8002184 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800202a:	461a      	mov	r2, r3
 800202c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002030:	6093      	str	r3, [r2, #8]
 8002032:	e0a7      	b.n	8002184 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4413      	add	r3, r2
 8002046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800204a:	461a      	mov	r2, r3
 800204c:	2320      	movs	r3, #32
 800204e:	6093      	str	r3, [r2, #8]
 8002050:	e098      	b.n	8002184 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	f040 8093 	bne.w	8002184 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	4a4b      	ldr	r2, [pc, #300]	@ (8002190 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d90f      	bls.n	8002086 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	4413      	add	r3, r2
 8002078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800207c:	461a      	mov	r2, r3
 800207e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002082:	6093      	str	r3, [r2, #8]
 8002084:	e07e      	b.n	8002184 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	3304      	adds	r3, #4
 800209a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	0159      	lsls	r1, r3, #5
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	440b      	add	r3, r1
 80020a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b2:	1ad2      	subs	r2, r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d114      	bne.n	80020e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80020d0:	461a      	mov	r2, r3
 80020d2:	2101      	movs	r1, #1
 80020d4:	f001 fff2 	bl	80040bc <USB_EP0_OutStart>
 80020d8:	e006      	b.n	80020e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	441a      	add	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4619      	mov	r1, r3
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f004 fa70 	bl	80065d4 <HAL_PCD_DataOutStageCallback>
 80020f4:	e046      	b.n	8002184 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	4a26      	ldr	r2, [pc, #152]	@ (8002194 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d124      	bne.n	8002148 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00a      	beq.n	800211e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	4413      	add	r3, r2
 8002110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002114:	461a      	mov	r2, r3
 8002116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800211a:	6093      	str	r3, [r2, #8]
 800211c:	e032      	b.n	8002184 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	4413      	add	r3, r2
 8002130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002134:	461a      	mov	r2, r3
 8002136:	2320      	movs	r3, #32
 8002138:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	4619      	mov	r1, r3
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f004 fa47 	bl	80065d4 <HAL_PCD_DataOutStageCallback>
 8002146:	e01d      	b.n	8002184 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d114      	bne.n	8002178 <PCD_EP_OutXfrComplete_int+0x1b0>
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d108      	bne.n	8002178 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002170:	461a      	mov	r2, r3
 8002172:	2100      	movs	r1, #0
 8002174:	f001 ffa2 	bl	80040bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	4619      	mov	r1, r3
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f004 fa28 	bl	80065d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	4f54300a 	.word	0x4f54300a
 8002194:	4f54310a 	.word	0x4f54310a

08002198 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	333c      	adds	r3, #60	@ 0x3c
 80021b0:	3304      	adds	r3, #4
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4a15      	ldr	r2, [pc, #84]	@ (8002220 <PCD_EP_OutSetupPacket_int+0x88>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d90e      	bls.n	80021ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d009      	beq.n	80021ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021e4:	461a      	mov	r2, r3
 80021e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f004 f9df 	bl	80065b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <PCD_EP_OutSetupPacket_int+0x88>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d90c      	bls.n	8002214 <PCD_EP_OutSetupPacket_int+0x7c>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	799b      	ldrb	r3, [r3, #6]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d108      	bne.n	8002214 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800220c:	461a      	mov	r2, r3
 800220e:	2101      	movs	r1, #1
 8002210:	f001 ff54 	bl	80040bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	4f54300a 	.word	0x4f54300a

08002224 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	70fb      	strb	r3, [r7, #3]
 8002230:	4613      	mov	r3, r2
 8002232:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d107      	bne.n	8002252 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002242:	883b      	ldrh	r3, [r7, #0]
 8002244:	0419      	lsls	r1, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	430a      	orrs	r2, r1
 800224e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002250:	e028      	b.n	80022a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002258:	0c1b      	lsrs	r3, r3, #16
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	4413      	add	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]
 8002264:	e00d      	b.n	8002282 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	3340      	adds	r3, #64	@ 0x40
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	4413      	add	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	3301      	adds	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	3b01      	subs	r3, #1
 8002288:	429a      	cmp	r2, r3
 800228a:	d3ec      	bcc.n	8002266 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800228c:	883b      	ldrh	r3, [r7, #0]
 800228e:	0418      	lsls	r0, r3, #16
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6819      	ldr	r1, [r3, #0]
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	3b01      	subs	r3, #1
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	4302      	orrs	r2, r0
 800229c:	3340      	adds	r3, #64	@ 0x40
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e267      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d075      	beq.n	80023f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800230a:	4b88      	ldr	r3, [pc, #544]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d00c      	beq.n	8002330 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002316:	4b85      	ldr	r3, [pc, #532]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800231e:	2b08      	cmp	r3, #8
 8002320:	d112      	bne.n	8002348 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002322:	4b82      	ldr	r3, [pc, #520]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800232a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800232e:	d10b      	bne.n	8002348 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	4b7e      	ldr	r3, [pc, #504]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d05b      	beq.n	80023f4 <HAL_RCC_OscConfig+0x108>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d157      	bne.n	80023f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e242      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002350:	d106      	bne.n	8002360 <HAL_RCC_OscConfig+0x74>
 8002352:	4b76      	ldr	r3, [pc, #472]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a75      	ldr	r2, [pc, #468]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e01d      	b.n	800239c <HAL_RCC_OscConfig+0xb0>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x98>
 800236a:	4b70      	ldr	r3, [pc, #448]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6f      	ldr	r2, [pc, #444]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b6d      	ldr	r3, [pc, #436]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a6c      	ldr	r2, [pc, #432]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0xb0>
 8002384:	4b69      	ldr	r3, [pc, #420]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a68      	ldr	r2, [pc, #416]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800238a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b66      	ldr	r3, [pc, #408]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a65      	ldr	r2, [pc, #404]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800239a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7fe fa70 	bl	8000888 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ac:	f7fe fa6c 	bl	8000888 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	@ 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e207      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b5b      	ldr	r3, [pc, #364]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0xc0>
 80023ca:	e014      	b.n	80023f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7fe fa5c 	bl	8000888 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d4:	f7fe fa58 	bl	8000888 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	@ 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1f3      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	4b51      	ldr	r3, [pc, #324]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0xe8>
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d063      	beq.n	80024ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002402:	4b4a      	ldr	r3, [pc, #296]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240e:	4b47      	ldr	r3, [pc, #284]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002416:	2b08      	cmp	r3, #8
 8002418:	d11c      	bne.n	8002454 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241a:	4b44      	ldr	r3, [pc, #272]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d116      	bne.n	8002454 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	4b41      	ldr	r3, [pc, #260]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_RCC_OscConfig+0x152>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d001      	beq.n	800243e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e1c7      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	4b3b      	ldr	r3, [pc, #236]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4937      	ldr	r1, [pc, #220]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	e03a      	b.n	80024ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245c:	4b34      	ldr	r3, [pc, #208]	@ (8002530 <HAL_RCC_OscConfig+0x244>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7fe fa11 	bl	8000888 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246a:	f7fe fa0d 	bl	8000888 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e1a8      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247c:	4b2b      	ldr	r3, [pc, #172]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002488:	4b28      	ldr	r3, [pc, #160]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4925      	ldr	r1, [pc, #148]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]
 800249c:	e015      	b.n	80024ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249e:	4b24      	ldr	r3, [pc, #144]	@ (8002530 <HAL_RCC_OscConfig+0x244>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe f9f0 	bl	8000888 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ac:	f7fe f9ec 	bl	8000888 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e187      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	4b1b      	ldr	r3, [pc, #108]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d036      	beq.n	8002544 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d016      	beq.n	800250c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <HAL_RCC_OscConfig+0x248>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7fe f9d0 	bl	8000888 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ec:	f7fe f9cc 	bl	8000888 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e167      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x200>
 800250a:	e01b      	b.n	8002544 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250c:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <HAL_RCC_OscConfig+0x248>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7fe f9b9 	bl	8000888 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	e00e      	b.n	8002538 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251a:	f7fe f9b5 	bl	8000888 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d907      	bls.n	8002538 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e150      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
 800252c:	40023800 	.word	0x40023800
 8002530:	42470000 	.word	0x42470000
 8002534:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	4b88      	ldr	r3, [pc, #544]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 800253a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ea      	bne.n	800251a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8097 	beq.w	8002680 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b81      	ldr	r3, [pc, #516]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10f      	bne.n	8002582 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	4b7d      	ldr	r3, [pc, #500]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	4a7c      	ldr	r2, [pc, #496]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	@ 0x40
 8002572:	4b7a      	ldr	r3, [pc, #488]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002582:	4b77      	ldr	r3, [pc, #476]	@ (8002760 <HAL_RCC_OscConfig+0x474>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d118      	bne.n	80025c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258e:	4b74      	ldr	r3, [pc, #464]	@ (8002760 <HAL_RCC_OscConfig+0x474>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a73      	ldr	r2, [pc, #460]	@ (8002760 <HAL_RCC_OscConfig+0x474>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259a:	f7fe f975 	bl	8000888 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a2:	f7fe f971 	bl	8000888 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e10c      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002760 <HAL_RCC_OscConfig+0x474>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_OscConfig+0x2ea>
 80025c8:	4b64      	ldr	r3, [pc, #400]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025cc:	4a63      	ldr	r2, [pc, #396]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d4:	e01c      	b.n	8002610 <HAL_RCC_OscConfig+0x324>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x30c>
 80025de:	4b5f      	ldr	r3, [pc, #380]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e2:	4a5e      	ldr	r2, [pc, #376]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ea:	4b5c      	ldr	r3, [pc, #368]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ee:	4a5b      	ldr	r2, [pc, #364]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0x324>
 80025f8:	4b58      	ldr	r3, [pc, #352]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fc:	4a57      	ldr	r2, [pc, #348]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	6713      	str	r3, [r2, #112]	@ 0x70
 8002604:	4b55      	ldr	r3, [pc, #340]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002608:	4a54      	ldr	r2, [pc, #336]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 800260a:	f023 0304 	bic.w	r3, r3, #4
 800260e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d015      	beq.n	8002644 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7fe f936 	bl	8000888 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261e:	e00a      	b.n	8002636 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f7fe f932 	bl	8000888 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e0cb      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002636:	4b49      	ldr	r3, [pc, #292]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0ee      	beq.n	8002620 <HAL_RCC_OscConfig+0x334>
 8002642:	e014      	b.n	800266e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002644:	f7fe f920 	bl	8000888 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264a:	e00a      	b.n	8002662 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264c:	f7fe f91c 	bl	8000888 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e0b5      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002662:	4b3e      	ldr	r3, [pc, #248]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1ee      	bne.n	800264c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800266e:	7dfb      	ldrb	r3, [r7, #23]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d105      	bne.n	8002680 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002674:	4b39      	ldr	r3, [pc, #228]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002678:	4a38      	ldr	r2, [pc, #224]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 800267a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800267e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80a1 	beq.w	80027cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268a:	4b34      	ldr	r3, [pc, #208]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b08      	cmp	r3, #8
 8002694:	d05c      	beq.n	8002750 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d141      	bne.n	8002722 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b31      	ldr	r3, [pc, #196]	@ (8002764 <HAL_RCC_OscConfig+0x478>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe f8f0 	bl	8000888 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe f8ec 	bl	8000888 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e087      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	4b27      	ldr	r3, [pc, #156]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	019b      	lsls	r3, r3, #6
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	3b01      	subs	r3, #1
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	491b      	ldr	r1, [pc, #108]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002764 <HAL_RCC_OscConfig+0x478>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7fe f8c5 	bl	8000888 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002702:	f7fe f8c1 	bl	8000888 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e05c      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x416>
 8002720:	e054      	b.n	80027cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <HAL_RCC_OscConfig+0x478>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe f8ae 	bl	8000888 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe f8aa 	bl	8000888 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e045      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x444>
 800274e:	e03d      	b.n	80027cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d107      	bne.n	8002768 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e038      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
 800275c:	40023800 	.word	0x40023800
 8002760:	40007000 	.word	0x40007000
 8002764:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002768:	4b1b      	ldr	r3, [pc, #108]	@ (80027d8 <HAL_RCC_OscConfig+0x4ec>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d028      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d121      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d11a      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002798:	4013      	ands	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800279e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d111      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ae:	085b      	lsrs	r3, r3, #1
 80027b0:	3b01      	subs	r3, #1
 80027b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800

080027dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0cc      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f0:	4b68      	ldr	r3, [pc, #416]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d90c      	bls.n	8002818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b65      	ldr	r3, [pc, #404]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b63      	ldr	r3, [pc, #396]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0b8      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d020      	beq.n	8002866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002830:	4b59      	ldr	r3, [pc, #356]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a58      	ldr	r2, [pc, #352]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800283a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002848:	4b53      	ldr	r3, [pc, #332]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a52      	ldr	r2, [pc, #328]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b50      	ldr	r3, [pc, #320]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	494d      	ldr	r1, [pc, #308]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d044      	beq.n	80028fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b47      	ldr	r3, [pc, #284]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d119      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e07f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d003      	beq.n	800289a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002896:	2b03      	cmp	r3, #3
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289a:	4b3f      	ldr	r3, [pc, #252]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e06f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e067      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ba:	4b37      	ldr	r3, [pc, #220]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f023 0203 	bic.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4934      	ldr	r1, [pc, #208]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028cc:	f7fd ffdc 	bl	8000888 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f7fd ffd8 	bl	8000888 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e04f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 020c 	and.w	r2, r3, #12
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d1eb      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028fc:	4b25      	ldr	r3, [pc, #148]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d20c      	bcs.n	8002924 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b22      	ldr	r3, [pc, #136]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e032      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002930:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4916      	ldr	r1, [pc, #88]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800294e:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	490e      	ldr	r1, [pc, #56]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002962:	f000 f821 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002966:	4602      	mov	r2, r0
 8002968:	4b0b      	ldr	r3, [pc, #44]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	490a      	ldr	r1, [pc, #40]	@ (800299c <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	5ccb      	ldrb	r3, [r1, r3]
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	4a09      	ldr	r2, [pc, #36]	@ (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800297e:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd ff3c 	bl	8000800 <HAL_InitTick>

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023c00 	.word	0x40023c00
 8002998:	40023800 	.word	0x40023800
 800299c:	08006be8 	.word	0x08006be8
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000004 	.word	0x20000004

080029a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029ac:	b090      	sub	sp, #64	@ 0x40
 80029ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029c0:	4b59      	ldr	r3, [pc, #356]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d00d      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x40>
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	f200 80a1 	bhi.w	8002b14 <HAL_RCC_GetSysClockFreq+0x16c>
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x34>
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029da:	e09b      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029dc:	4b53      	ldr	r3, [pc, #332]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x184>)
 80029de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029e0:	e09b      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029e2:	4b53      	ldr	r3, [pc, #332]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x188>)
 80029e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029e6:	e098      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d028      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	099b      	lsrs	r3, r3, #6
 8002a04:	2200      	movs	r2, #0
 8002a06:	623b      	str	r3, [r7, #32]
 8002a08:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a10:	2100      	movs	r1, #0
 8002a12:	4b47      	ldr	r3, [pc, #284]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a14:	fb03 f201 	mul.w	r2, r3, r1
 8002a18:	2300      	movs	r3, #0
 8002a1a:	fb00 f303 	mul.w	r3, r0, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a43      	ldr	r2, [pc, #268]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a22:	fba0 1202 	umull	r1, r2, r0, r2
 8002a26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a28:	460a      	mov	r2, r1
 8002a2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a2e:	4413      	add	r3, r2
 8002a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a34:	2200      	movs	r2, #0
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	61fa      	str	r2, [r7, #28]
 8002a3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a42:	f7fd fbc7 	bl	80001d4 <__aeabi_uldivmod>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a4e:	e053      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a50:	4b35      	ldr	r3, [pc, #212]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	099b      	lsrs	r3, r3, #6
 8002a56:	2200      	movs	r2, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	617a      	str	r2, [r7, #20]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a62:	f04f 0b00 	mov.w	fp, #0
 8002a66:	4652      	mov	r2, sl
 8002a68:	465b      	mov	r3, fp
 8002a6a:	f04f 0000 	mov.w	r0, #0
 8002a6e:	f04f 0100 	mov.w	r1, #0
 8002a72:	0159      	lsls	r1, r3, #5
 8002a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a78:	0150      	lsls	r0, r2, #5
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	ebb2 080a 	subs.w	r8, r2, sl
 8002a82:	eb63 090b 	sbc.w	r9, r3, fp
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a9a:	ebb2 0408 	subs.w	r4, r2, r8
 8002a9e:	eb63 0509 	sbc.w	r5, r3, r9
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	00eb      	lsls	r3, r5, #3
 8002aac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ab0:	00e2      	lsls	r2, r4, #3
 8002ab2:	4614      	mov	r4, r2
 8002ab4:	461d      	mov	r5, r3
 8002ab6:	eb14 030a 	adds.w	r3, r4, sl
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	eb45 030b 	adc.w	r3, r5, fp
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ace:	4629      	mov	r1, r5
 8002ad0:	028b      	lsls	r3, r1, #10
 8002ad2:	4621      	mov	r1, r4
 8002ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ad8:	4621      	mov	r1, r4
 8002ada:	028a      	lsls	r2, r1, #10
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	60fa      	str	r2, [r7, #12]
 8002ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aec:	f7fd fb72 	bl	80001d4 <__aeabi_uldivmod>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4613      	mov	r3, r2
 8002af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002af8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	0c1b      	lsrs	r3, r3, #16
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	3301      	adds	r3, #1
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002b08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b12:	e002      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b14:	4b05      	ldr	r3, [pc, #20]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x184>)
 8002b16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3740      	adds	r7, #64	@ 0x40
 8002b20:	46bd      	mov	sp, r7
 8002b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	00f42400 	.word	0x00f42400
 8002b30:	017d7840 	.word	0x017d7840

08002b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b38:	4b03      	ldr	r3, [pc, #12]	@ (8002b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000000 	.word	0x20000000

08002b4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	f107 001c 	add.w	r0, r7, #28
 8002b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b5e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d123      	bne.n	8002bae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002b7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d105      	bne.n	8002ba2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f001 fae8 	bl	8004178 <USB_CoreReset>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	73fb      	strb	r3, [r7, #15]
 8002bac:	e01b      	b.n	8002be6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f001 fadc 	bl	8004178 <USB_CoreReset>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002bc4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d106      	bne.n	8002bda <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	639a      	str	r2, [r3, #56]	@ 0x38
 8002bd8:	e005      	b.n	8002be6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bde:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002be6:	7fbb      	ldrb	r3, [r7, #30]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d10b      	bne.n	8002c04 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f043 0206 	orr.w	r2, r3, #6
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c10:	b004      	add	sp, #16
 8002c12:	4770      	bx	lr

08002c14 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d165      	bne.n	8002cf4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4a41      	ldr	r2, [pc, #260]	@ (8002d30 <USB_SetTurnaroundTime+0x11c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d906      	bls.n	8002c3e <USB_SetTurnaroundTime+0x2a>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4a40      	ldr	r2, [pc, #256]	@ (8002d34 <USB_SetTurnaroundTime+0x120>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d202      	bcs.n	8002c3e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002c38:	230f      	movs	r3, #15
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	e062      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	4a3c      	ldr	r2, [pc, #240]	@ (8002d34 <USB_SetTurnaroundTime+0x120>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d306      	bcc.n	8002c54 <USB_SetTurnaroundTime+0x40>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4a3b      	ldr	r2, [pc, #236]	@ (8002d38 <USB_SetTurnaroundTime+0x124>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d202      	bcs.n	8002c54 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002c4e:	230e      	movs	r3, #14
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e057      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4a38      	ldr	r2, [pc, #224]	@ (8002d38 <USB_SetTurnaroundTime+0x124>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d306      	bcc.n	8002c6a <USB_SetTurnaroundTime+0x56>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4a37      	ldr	r2, [pc, #220]	@ (8002d3c <USB_SetTurnaroundTime+0x128>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d202      	bcs.n	8002c6a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002c64:	230d      	movs	r3, #13
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e04c      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4a33      	ldr	r2, [pc, #204]	@ (8002d3c <USB_SetTurnaroundTime+0x128>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d306      	bcc.n	8002c80 <USB_SetTurnaroundTime+0x6c>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4a32      	ldr	r2, [pc, #200]	@ (8002d40 <USB_SetTurnaroundTime+0x12c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d802      	bhi.n	8002c80 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002c7a:	230c      	movs	r3, #12
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	e041      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4a2f      	ldr	r2, [pc, #188]	@ (8002d40 <USB_SetTurnaroundTime+0x12c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d906      	bls.n	8002c96 <USB_SetTurnaroundTime+0x82>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4a2e      	ldr	r2, [pc, #184]	@ (8002d44 <USB_SetTurnaroundTime+0x130>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d802      	bhi.n	8002c96 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002c90:	230b      	movs	r3, #11
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	e036      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4a2a      	ldr	r2, [pc, #168]	@ (8002d44 <USB_SetTurnaroundTime+0x130>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d906      	bls.n	8002cac <USB_SetTurnaroundTime+0x98>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	4a29      	ldr	r2, [pc, #164]	@ (8002d48 <USB_SetTurnaroundTime+0x134>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d802      	bhi.n	8002cac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002ca6:	230a      	movs	r3, #10
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	e02b      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4a26      	ldr	r2, [pc, #152]	@ (8002d48 <USB_SetTurnaroundTime+0x134>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d906      	bls.n	8002cc2 <USB_SetTurnaroundTime+0xae>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4a25      	ldr	r2, [pc, #148]	@ (8002d4c <USB_SetTurnaroundTime+0x138>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d202      	bcs.n	8002cc2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002cbc:	2309      	movs	r3, #9
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e020      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4a21      	ldr	r2, [pc, #132]	@ (8002d4c <USB_SetTurnaroundTime+0x138>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d306      	bcc.n	8002cd8 <USB_SetTurnaroundTime+0xc4>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4a20      	ldr	r2, [pc, #128]	@ (8002d50 <USB_SetTurnaroundTime+0x13c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d802      	bhi.n	8002cd8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	e015      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4a1d      	ldr	r2, [pc, #116]	@ (8002d50 <USB_SetTurnaroundTime+0x13c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d906      	bls.n	8002cee <USB_SetTurnaroundTime+0xda>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d54 <USB_SetTurnaroundTime+0x140>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d202      	bcs.n	8002cee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002ce8:	2307      	movs	r3, #7
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	e00a      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002cee:	2306      	movs	r3, #6
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	e007      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002cfa:	2309      	movs	r3, #9
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	e001      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d00:	2309      	movs	r3, #9
 8002d02:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	029b      	lsls	r3, r3, #10
 8002d18:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	00d8acbf 	.word	0x00d8acbf
 8002d34:	00e4e1c0 	.word	0x00e4e1c0
 8002d38:	00f42400 	.word	0x00f42400
 8002d3c:	01067380 	.word	0x01067380
 8002d40:	011a499f 	.word	0x011a499f
 8002d44:	01312cff 	.word	0x01312cff
 8002d48:	014ca43f 	.word	0x014ca43f
 8002d4c:	016e3600 	.word	0x016e3600
 8002d50:	01a6ab1f 	.word	0x01a6ab1f
 8002d54:	01e84800 	.word	0x01e84800

08002d58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f043 0201 	orr.w	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f023 0201 	bic.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d115      	bne.n	8002dea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002dca:	200a      	movs	r0, #10
 8002dcc:	f7fd fd68 	bl	80008a0 <HAL_Delay>
      ms += 10U;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	330a      	adds	r3, #10
 8002dd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f001 f93f 	bl	800405a <USB_GetMode>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d01e      	beq.n	8002e20 <USB_SetCurrentMode+0x84>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2bc7      	cmp	r3, #199	@ 0xc7
 8002de6:	d9f0      	bls.n	8002dca <USB_SetCurrentMode+0x2e>
 8002de8:	e01a      	b.n	8002e20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d115      	bne.n	8002e1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002dfc:	200a      	movs	r0, #10
 8002dfe:	f7fd fd4f 	bl	80008a0 <HAL_Delay>
      ms += 10U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	330a      	adds	r3, #10
 8002e06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f001 f926 	bl	800405a <USB_GetMode>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <USB_SetCurrentMode+0x84>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2bc7      	cmp	r3, #199	@ 0xc7
 8002e18:	d9f0      	bls.n	8002dfc <USB_SetCurrentMode+0x60>
 8002e1a:	e001      	b.n	8002e20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e005      	b.n	8002e2c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2bc8      	cmp	r3, #200	@ 0xc8
 8002e24:	d101      	bne.n	8002e2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e34:	b084      	sub	sp, #16
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b086      	sub	sp, #24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	e009      	b.n	8002e68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	3340      	adds	r3, #64	@ 0x40
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	2200      	movs	r2, #0
 8002e60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	3301      	adds	r3, #1
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b0e      	cmp	r3, #14
 8002e6c:	d9f2      	bls.n	8002e54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002e6e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11c      	bne.n	8002eb0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e84:	f043 0302 	orr.w	r3, r3, #2
 8002e88:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	639a      	str	r2, [r3, #56]	@ 0x38
 8002eae:	e00b      	b.n	8002ec8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ed4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d10d      	bne.n	8002ef8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d104      	bne.n	8002eee <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f968 	bl	80031bc <USB_SetDevSpeed>
 8002eec:	e008      	b.n	8002f00 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002eee:	2101      	movs	r1, #1
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f963 	bl	80031bc <USB_SetDevSpeed>
 8002ef6:	e003      	b.n	8002f00 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002ef8:	2103      	movs	r1, #3
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f95e 	bl	80031bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f00:	2110      	movs	r1, #16
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f8fa 	bl	80030fc <USB_FlushTxFifo>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f924 	bl	8003160 <USB_FlushRxFifo>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f34:	461a      	mov	r2, r3
 8002f36:	2300      	movs	r3, #0
 8002f38:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f40:	461a      	mov	r2, r3
 8002f42:	2300      	movs	r3, #0
 8002f44:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	e043      	b.n	8002fd4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f62:	d118      	bne.n	8002f96 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f76:	461a      	mov	r2, r3
 8002f78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e013      	b.n	8002fa8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	e008      	b.n	8002fa8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002fcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002fd8:	461a      	mov	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d3b5      	bcc.n	8002f4c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	e043      	b.n	800306e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ffc:	d118      	bne.n	8003030 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003010:	461a      	mov	r2, r3
 8003012:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	e013      	b.n	8003042 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003026:	461a      	mov	r2, r3
 8003028:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e008      	b.n	8003042 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800303c:	461a      	mov	r2, r3
 800303e:	2300      	movs	r3, #0
 8003040:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800304e:	461a      	mov	r2, r3
 8003050:	2300      	movs	r3, #0
 8003052:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003060:	461a      	mov	r2, r3
 8003062:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003066:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	3301      	adds	r3, #1
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003072:	461a      	mov	r2, r3
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4293      	cmp	r3, r2
 8003078:	d3b5      	bcc.n	8002fe6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800308c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800309a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800309c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d105      	bne.n	80030b0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f043 0210 	orr.w	r2, r3, #16
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699a      	ldr	r2, [r3, #24]
 80030b4:	4b10      	ldr	r3, [pc, #64]	@ (80030f8 <USB_DevInit+0x2c4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80030bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f043 0208 	orr.w	r2, r3, #8
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80030d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d107      	bne.n	80030e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030e0:	f043 0304 	orr.w	r3, r3, #4
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030f4:	b004      	add	sp, #16
 80030f6:	4770      	bx	lr
 80030f8:	803c3800 	.word	0x803c3800

080030fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3301      	adds	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003116:	d901      	bls.n	800311c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e01b      	b.n	8003154 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	daf2      	bge.n	800310a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	019b      	lsls	r3, r3, #6
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3301      	adds	r3, #1
 8003138:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003140:	d901      	bls.n	8003146 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e006      	b.n	8003154 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b20      	cmp	r3, #32
 8003150:	d0f0      	beq.n	8003134 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	3301      	adds	r3, #1
 8003170:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003178:	d901      	bls.n	800317e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e018      	b.n	80031b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	daf2      	bge.n	800316c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2210      	movs	r2, #16
 800318e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3301      	adds	r3, #1
 8003194:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800319c:	d901      	bls.n	80031a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e006      	b.n	80031b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b10      	cmp	r3, #16
 80031ac:	d0f0      	beq.n	8003190 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	68f9      	ldr	r1, [r7, #12]
 80031d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b087      	sub	sp, #28
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 0306 	and.w	r3, r3, #6
 8003206:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800320e:	2300      	movs	r3, #0
 8003210:	75fb      	strb	r3, [r7, #23]
 8003212:	e00a      	b.n	800322a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d002      	beq.n	8003220 <USB_GetDevSpeed+0x32>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b06      	cmp	r3, #6
 800321e:	d102      	bne.n	8003226 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003220:	2302      	movs	r3, #2
 8003222:	75fb      	strb	r3, [r7, #23]
 8003224:	e001      	b.n	800322a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003226:	230f      	movs	r3, #15
 8003228:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800322a:	7dfb      	ldrb	r3, [r7, #23]
}
 800322c:	4618      	mov	r0, r3
 800322e:	371c      	adds	r7, #28
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	785b      	ldrb	r3, [r3, #1]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d13a      	bne.n	80032ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800325a:	69da      	ldr	r2, [r3, #28]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	2101      	movs	r1, #1
 8003266:	fa01 f303 	lsl.w	r3, r1, r3
 800326a:	b29b      	uxth	r3, r3
 800326c:	68f9      	ldr	r1, [r7, #12]
 800326e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003272:	4313      	orrs	r3, r2
 8003274:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d155      	bne.n	8003338 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	791b      	ldrb	r3, [r3, #4]
 80032a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	059b      	lsls	r3, r3, #22
 80032ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032b0:	4313      	orrs	r3, r2
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	0151      	lsls	r1, r2, #5
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	440a      	add	r2, r1
 80032ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80032be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	e036      	b.n	8003338 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032d0:	69da      	ldr	r2, [r3, #28]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f303 	lsl.w	r3, r1, r3
 80032e0:	041b      	lsls	r3, r3, #16
 80032e2:	68f9      	ldr	r1, [r7, #12]
 80032e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d11a      	bne.n	8003338 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	791b      	ldrb	r3, [r3, #4]
 800331c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800331e:	430b      	orrs	r3, r1
 8003320:	4313      	orrs	r3, r2
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	0151      	lsls	r1, r2, #5
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	440a      	add	r2, r1
 800332a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800332e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003336:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	785b      	ldrb	r3, [r3, #1]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d161      	bne.n	8003428 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003376:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800337a:	d11f      	bne.n	80033bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	0151      	lsls	r1, r2, #5
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	440a      	add	r2, r1
 8003392:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003396:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800339a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	0151      	lsls	r1, r2, #5
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	440a      	add	r2, r1
 80033b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	2101      	movs	r1, #1
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	68f9      	ldr	r1, [r7, #12]
 80033d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033dc:	4013      	ands	r3, r2
 80033de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033e6:	69da      	ldr	r2, [r3, #28]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	2101      	movs	r1, #1
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	68f9      	ldr	r1, [r7, #12]
 80033fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003400:	4013      	ands	r3, r2
 8003402:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4413      	add	r3, r2
 800340c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	0159      	lsls	r1, r3, #5
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	440b      	add	r3, r1
 800341a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800341e:	4619      	mov	r1, r3
 8003420:	4b35      	ldr	r3, [pc, #212]	@ (80034f8 <USB_DeactivateEndpoint+0x1b0>)
 8003422:	4013      	ands	r3, r2
 8003424:	600b      	str	r3, [r1, #0]
 8003426:	e060      	b.n	80034ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800343a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800343e:	d11f      	bne.n	8003480 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	0151      	lsls	r1, r2, #5
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	440a      	add	r2, r1
 8003456:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800345a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800345e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	0151      	lsls	r1, r2, #5
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	440a      	add	r2, r1
 8003476:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800347a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800347e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003486:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	2101      	movs	r1, #1
 8003492:	fa01 f303 	lsl.w	r3, r1, r3
 8003496:	041b      	lsls	r3, r3, #16
 8003498:	43db      	mvns	r3, r3
 800349a:	68f9      	ldr	r1, [r7, #12]
 800349c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034a0:	4013      	ands	r3, r2
 80034a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	2101      	movs	r1, #1
 80034b6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ba:	041b      	lsls	r3, r3, #16
 80034bc:	43db      	mvns	r3, r3
 80034be:	68f9      	ldr	r1, [r7, #12]
 80034c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034c4:	4013      	ands	r3, r2
 80034c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	0159      	lsls	r1, r3, #5
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	440b      	add	r3, r1
 80034de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034e2:	4619      	mov	r1, r3
 80034e4:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <USB_DeactivateEndpoint+0x1b4>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	ec337800 	.word	0xec337800
 80034fc:	eff37800 	.word	0xeff37800

08003500 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	@ 0x28
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	4613      	mov	r3, r2
 800350c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	785b      	ldrb	r3, [r3, #1]
 800351c:	2b01      	cmp	r3, #1
 800351e:	f040 817f 	bne.w	8003820 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d132      	bne.n	8003590 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	0151      	lsls	r1, r2, #5
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	440a      	add	r2, r1
 8003540:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003544:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003548:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800354c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	4413      	add	r3, r2
 8003556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	0151      	lsls	r1, r2, #5
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	440a      	add	r2, r1
 8003564:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003568:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800356c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	0151      	lsls	r1, r2, #5
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	440a      	add	r2, r1
 8003584:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003588:	0cdb      	lsrs	r3, r3, #19
 800358a:	04db      	lsls	r3, r3, #19
 800358c:	6113      	str	r3, [r2, #16]
 800358e:	e097      	b.n	80036c0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	0151      	lsls	r1, r2, #5
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	440a      	add	r2, r1
 80035a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035aa:	0cdb      	lsrs	r3, r3, #19
 80035ac:	04db      	lsls	r3, r3, #19
 80035ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	0151      	lsls	r1, r2, #5
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	440a      	add	r2, r1
 80035c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035ca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80035ce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80035d2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d11a      	bne.n	8003610 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d903      	bls.n	80035ee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	0151      	lsls	r1, r2, #5
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	440a      	add	r2, r1
 8003604:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003608:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800360c:	6113      	str	r3, [r2, #16]
 800360e:	e044      	b.n	800369a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4413      	add	r3, r2
 800361a:	1e5a      	subs	r2, r3, #1
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	8afb      	ldrh	r3, [r7, #22]
 8003636:	04d9      	lsls	r1, r3, #19
 8003638:	4ba4      	ldr	r3, [pc, #656]	@ (80038cc <USB_EPStartXfer+0x3cc>)
 800363a:	400b      	ands	r3, r1
 800363c:	69b9      	ldr	r1, [r7, #24]
 800363e:	0148      	lsls	r0, r1, #5
 8003640:	69f9      	ldr	r1, [r7, #28]
 8003642:	4401      	add	r1, r0
 8003644:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003648:	4313      	orrs	r3, r2
 800364a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	791b      	ldrb	r3, [r3, #4]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d122      	bne.n	800369a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	0151      	lsls	r1, r2, #5
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	440a      	add	r2, r1
 800366a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800366e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003672:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	8afb      	ldrh	r3, [r7, #22]
 8003684:	075b      	lsls	r3, r3, #29
 8003686:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800368a:	69b9      	ldr	r1, [r7, #24]
 800368c:	0148      	lsls	r0, r1, #5
 800368e:	69f9      	ldr	r1, [r7, #28]
 8003690:	4401      	add	r1, r0
 8003692:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003696:	4313      	orrs	r3, r2
 8003698:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b0:	69b9      	ldr	r1, [r7, #24]
 80036b2:	0148      	lsls	r0, r1, #5
 80036b4:	69f9      	ldr	r1, [r7, #28]
 80036b6:	4401      	add	r1, r0
 80036b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80036bc:	4313      	orrs	r3, r2
 80036be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d14b      	bne.n	800375e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036da:	461a      	mov	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	791b      	ldrb	r3, [r3, #4]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d128      	bne.n	800373c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d110      	bne.n	800371c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	0151      	lsls	r1, r2, #5
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	440a      	add	r2, r1
 8003710:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003714:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e00f      	b.n	800373c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	0151      	lsls	r1, r2, #5
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	440a      	add	r2, r1
 8003732:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800373a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	0151      	lsls	r1, r2, #5
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	440a      	add	r2, r1
 8003752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003756:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	e166      	b.n	8003a2c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	0151      	lsls	r1, r2, #5
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	440a      	add	r2, r1
 8003774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003778:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800377c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	791b      	ldrb	r3, [r3, #4]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d015      	beq.n	80037b2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 814e 	beq.w	8003a2c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003796:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	2101      	movs	r1, #1
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	69f9      	ldr	r1, [r7, #28]
 80037a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037ac:	4313      	orrs	r3, r2
 80037ae:	634b      	str	r3, [r1, #52]	@ 0x34
 80037b0:	e13c      	b.n	8003a2c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d110      	bne.n	80037e4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	0151      	lsls	r1, r2, #5
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	440a      	add	r2, r1
 80037d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e00f      	b.n	8003804 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	0151      	lsls	r1, r2, #5
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	440a      	add	r2, r1
 80037fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003802:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	68d9      	ldr	r1, [r3, #12]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	781a      	ldrb	r2, [r3, #0]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	b298      	uxth	r0, r3
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	4603      	mov	r3, r0
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f9b9 	bl	8003b90 <USB_WritePacket>
 800381e:	e105      	b.n	8003a2c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	0151      	lsls	r1, r2, #5
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	440a      	add	r2, r1
 8003836:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800383a:	0cdb      	lsrs	r3, r3, #19
 800383c:	04db      	lsls	r3, r3, #19
 800383e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	0151      	lsls	r1, r2, #5
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	440a      	add	r2, r1
 8003856:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800385a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800385e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003862:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d132      	bne.n	80038d0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003898:	69b9      	ldr	r1, [r7, #24]
 800389a:	0148      	lsls	r0, r1, #5
 800389c:	69f9      	ldr	r1, [r7, #28]
 800389e:	4401      	add	r1, r0
 80038a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80038a4:	4313      	orrs	r3, r2
 80038a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	0151      	lsls	r1, r2, #5
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	440a      	add	r2, r1
 80038be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038c6:	6113      	str	r3, [r2, #16]
 80038c8:	e062      	b.n	8003990 <USB_EPStartXfer+0x490>
 80038ca:	bf00      	nop
 80038cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d123      	bne.n	8003920 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ee:	69b9      	ldr	r1, [r7, #24]
 80038f0:	0148      	lsls	r0, r1, #5
 80038f2:	69f9      	ldr	r1, [r7, #28]
 80038f4:	4401      	add	r1, r0
 80038f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80038fa:	4313      	orrs	r3, r2
 80038fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	0151      	lsls	r1, r2, #5
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	440a      	add	r2, r1
 8003914:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003918:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800391c:	6113      	str	r3, [r2, #16]
 800391e:	e037      	b.n	8003990 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	4413      	add	r3, r2
 800392a:	1e5a      	subs	r2, r3, #1
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	fbb2 f3f3 	udiv	r3, r2, r3
 8003934:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	8afa      	ldrh	r2, [r7, #22]
 800393c:	fb03 f202 	mul.w	r2, r3, r2
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	8afb      	ldrh	r3, [r7, #22]
 8003954:	04d9      	lsls	r1, r3, #19
 8003956:	4b38      	ldr	r3, [pc, #224]	@ (8003a38 <USB_EPStartXfer+0x538>)
 8003958:	400b      	ands	r3, r1
 800395a:	69b9      	ldr	r1, [r7, #24]
 800395c:	0148      	lsls	r0, r1, #5
 800395e:	69f9      	ldr	r1, [r7, #28]
 8003960:	4401      	add	r1, r0
 8003962:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003966:	4313      	orrs	r3, r2
 8003968:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003980:	69b9      	ldr	r1, [r7, #24]
 8003982:	0148      	lsls	r0, r1, #5
 8003984:	69f9      	ldr	r1, [r7, #28]
 8003986:	4401      	add	r1, r0
 8003988:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800398c:	4313      	orrs	r3, r2
 800398e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d10d      	bne.n	80039b2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	68d9      	ldr	r1, [r3, #12]
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ae:	460a      	mov	r2, r1
 80039b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	791b      	ldrb	r3, [r3, #4]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d128      	bne.n	8003a0c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d110      	bne.n	80039ec <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	0151      	lsls	r1, r2, #5
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	440a      	add	r2, r1
 80039e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00f      	b.n	8003a0c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	0151      	lsls	r1, r2, #5
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	440a      	add	r2, r1
 8003a02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	0151      	lsls	r1, r2, #5
 8003a1e:	69fa      	ldr	r2, [r7, #28]
 8003a20:	440a      	add	r2, r1
 8003a22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a26:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003a2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	1ff80000 	.word	0x1ff80000

08003a3c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	785b      	ldrb	r3, [r3, #1]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d14a      	bne.n	8003af0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a72:	f040 8086 	bne.w	8003b82 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	7812      	ldrb	r2, [r2, #0]
 8003a8a:	0151      	lsls	r1, r2, #5
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	440a      	add	r2, r1
 8003a90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a98:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	7812      	ldrb	r2, [r2, #0]
 8003aae:	0151      	lsls	r1, r2, #5
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	440a      	add	r2, r1
 8003ab4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ab8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003abc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d902      	bls.n	8003ad4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	75fb      	strb	r3, [r7, #23]
          break;
 8003ad2:	e056      	b.n	8003b82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003aec:	d0e7      	beq.n	8003abe <USB_EPStopXfer+0x82>
 8003aee:	e048      	b.n	8003b82 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b08:	d13b      	bne.n	8003b82 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	7812      	ldrb	r2, [r2, #0]
 8003b1e:	0151      	lsls	r1, r2, #5
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	440a      	add	r2, r1
 8003b24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b2c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	7812      	ldrb	r2, [r2, #0]
 8003b42:	0151      	lsls	r1, r2, #5
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	440a      	add	r2, r1
 8003b48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3301      	adds	r3, #1
 8003b56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d902      	bls.n	8003b68 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	75fb      	strb	r3, [r7, #23]
          break;
 8003b66:	e00c      	b.n	8003b82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b80:	d0e7      	beq.n	8003b52 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	@ 0x24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	71fb      	strb	r3, [r7, #7]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003bae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d123      	bne.n	8003bfe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003bb6:	88bb      	ldrh	r3, [r7, #4]
 8003bb8:	3303      	adds	r3, #3
 8003bba:	089b      	lsrs	r3, r3, #2
 8003bbc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	e018      	b.n	8003bf6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	031a      	lsls	r2, r3, #12
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	3301      	adds	r3, #1
 8003be2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	3301      	adds	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3301      	adds	r3, #1
 8003bee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d3e2      	bcc.n	8003bc4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3724      	adds	r7, #36	@ 0x24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b08b      	sub	sp, #44	@ 0x2c
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	4613      	mov	r3, r2
 8003c18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	089b      	lsrs	r3, r3, #2
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003c32:	2300      	movs	r3, #0
 8003c34:	623b      	str	r3, [r7, #32]
 8003c36:	e014      	b.n	8003c62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c42:	601a      	str	r2, [r3, #0]
    pDest++;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	3301      	adds	r3, #1
 8003c48:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	3301      	adds	r3, #1
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	3301      	adds	r3, #1
 8003c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	623b      	str	r3, [r7, #32]
 8003c62:	6a3a      	ldr	r2, [r7, #32]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d3e6      	bcc.n	8003c38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003c6a:	8bfb      	ldrh	r3, [r7, #30]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01e      	beq.n	8003cae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f107 0310 	add.w	r3, r7, #16
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c94:	701a      	strb	r2, [r3, #0]
      i++;
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	623b      	str	r3, [r7, #32]
      pDest++;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003ca2:	8bfb      	ldrh	r3, [r7, #30]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003ca8:	8bfb      	ldrh	r3, [r7, #30]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1ea      	bne.n	8003c84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	372c      	adds	r7, #44	@ 0x2c
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	785b      	ldrb	r3, [r3, #1]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d12c      	bne.n	8003d32 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	db12      	blt.n	8003d10 <USB_EPSetStall+0x54>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00f      	beq.n	8003d10 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	0151      	lsls	r1, r2, #5
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	440a      	add	r2, r1
 8003d06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d0a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d0e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	0151      	lsls	r1, r2, #5
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	440a      	add	r2, r1
 8003d26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	e02b      	b.n	8003d8a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	db12      	blt.n	8003d6a <USB_EPSetStall+0xae>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00f      	beq.n	8003d6a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	0151      	lsls	r1, r2, #5
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	440a      	add	r2, r1
 8003d60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d64:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d68:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	0151      	lsls	r1, r2, #5
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	440a      	add	r2, r1
 8003d80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	785b      	ldrb	r3, [r3, #1]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d128      	bne.n	8003e06 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	0151      	lsls	r1, r2, #5
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	440a      	add	r2, r1
 8003dca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003dd2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	791b      	ldrb	r3, [r3, #4]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d003      	beq.n	8003de4 <USB_EPClearStall+0x4c>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	791b      	ldrb	r3, [r3, #4]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d138      	bne.n	8003e56 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	0151      	lsls	r1, r2, #5
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	440a      	add	r2, r1
 8003dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	e027      	b.n	8003e56 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	0151      	lsls	r1, r2, #5
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	440a      	add	r2, r1
 8003e1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e20:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	791b      	ldrb	r3, [r3, #4]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d003      	beq.n	8003e36 <USB_EPClearStall+0x9e>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	791b      	ldrb	r3, [r3, #4]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d10f      	bne.n	8003e56 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	0151      	lsls	r1, r2, #5
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	440a      	add	r2, r1
 8003e4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e54:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e82:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003e86:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003e98:	68f9      	ldr	r1, [r7, #12]
 8003e9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003eca:	f023 0303 	bic.w	r3, r3, #3
 8003ece:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ede:	f023 0302 	bic.w	r3, r3, #2
 8003ee2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003f0c:	f023 0303 	bic.w	r3, r3, #3
 8003f10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f20:	f043 0302 	orr.w	r3, r3, #2
 8003f24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b085      	sub	sp, #20
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	0c1b      	lsrs	r3, r3, #16
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b085      	sub	sp, #20
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	b29b      	uxth	r3, r3
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	4013      	ands	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b087      	sub	sp, #28
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	460b      	mov	r3, r1
 8004008:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800401e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004020:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	fa22 f303 	lsr.w	r3, r2, r3
 800402e:	01db      	lsls	r3, r3, #7
 8004030:	b2db      	uxtb	r3, r3
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4013      	ands	r3, r2
 800404a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800404c:	68bb      	ldr	r3, [r7, #8]
}
 800404e:	4618      	mov	r0, r3
 8004050:	371c      	adds	r7, #28
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f003 0301 	and.w	r3, r3, #1
}
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004076:	b480      	push	{r7}
 8004078:	b085      	sub	sp, #20
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004090:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004094:	f023 0307 	bic.w	r3, r3, #7
 8004098:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	460b      	mov	r3, r1
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	333c      	adds	r3, #60	@ 0x3c
 80040d2:	3304      	adds	r3, #4
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4a26      	ldr	r2, [pc, #152]	@ (8004174 <USB_EP0_OutStart+0xb8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d90a      	bls.n	80040f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040f0:	d101      	bne.n	80040f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e037      	b.n	8004166 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040fc:	461a      	mov	r2, r3
 80040fe:	2300      	movs	r3, #0
 8004100:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004110:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004114:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004124:	f043 0318 	orr.w	r3, r3, #24
 8004128:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004138:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800413c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800413e:	7afb      	ldrb	r3, [r7, #11]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d10f      	bne.n	8004164 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800414a:	461a      	mov	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800415e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004162:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	4f54300a 	.word	0x4f54300a

08004178 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3301      	adds	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004190:	d901      	bls.n	8004196 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e022      	b.n	80041dc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	daf2      	bge.n	8004184 <USB_CoreReset+0xc>

  count = 10U;
 800419e:	230a      	movs	r3, #10
 80041a0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80041a2:	e002      	b.n	80041aa <USB_CoreReset+0x32>
  {
    count--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f9      	bne.n	80041a4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f043 0201 	orr.w	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3301      	adds	r3, #1
 80041c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041c8:	d901      	bls.n	80041ce <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e006      	b.n	80041dc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d0f0      	beq.n	80041bc <USB_CoreReset+0x44>

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80041f4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80041f8:	f002 fc56 	bl	8006aa8 <USBD_static_malloc>
 80041fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d109      	bne.n	8004218 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	32b0      	adds	r2, #176	@ 0xb0
 800420e:	2100      	movs	r1, #0
 8004210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004214:	2302      	movs	r3, #2
 8004216:	e0d4      	b.n	80043c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004218:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800421c:	2100      	movs	r1, #0
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f002 fc86 	bl	8006b30 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	32b0      	adds	r2, #176	@ 0xb0
 800422e:	68f9      	ldr	r1, [r7, #12]
 8004230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	32b0      	adds	r2, #176	@ 0xb0
 800423e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7c1b      	ldrb	r3, [r3, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d138      	bne.n	80042c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004250:	4b5e      	ldr	r3, [pc, #376]	@ (80043cc <USBD_CDC_Init+0x1e4>)
 8004252:	7819      	ldrb	r1, [r3, #0]
 8004254:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004258:	2202      	movs	r2, #2
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f002 fb01 	bl	8006862 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004260:	4b5a      	ldr	r3, [pc, #360]	@ (80043cc <USBD_CDC_Init+0x1e4>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	f003 020f 	and.w	r2, r3, #15
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	3323      	adds	r3, #35	@ 0x23
 8004276:	2201      	movs	r2, #1
 8004278:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800427a:	4b55      	ldr	r3, [pc, #340]	@ (80043d0 <USBD_CDC_Init+0x1e8>)
 800427c:	7819      	ldrb	r1, [r3, #0]
 800427e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004282:	2202      	movs	r2, #2
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f002 faec 	bl	8006862 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800428a:	4b51      	ldr	r3, [pc, #324]	@ (80043d0 <USBD_CDC_Init+0x1e8>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	f003 020f 	and.w	r2, r3, #15
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80042a2:	2201      	movs	r2, #1
 80042a4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80042a6:	4b4b      	ldr	r3, [pc, #300]	@ (80043d4 <USBD_CDC_Init+0x1ec>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	f003 020f 	and.w	r2, r3, #15
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	331c      	adds	r3, #28
 80042bc:	2210      	movs	r2, #16
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e035      	b.n	800432e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80042c2:	4b42      	ldr	r3, [pc, #264]	@ (80043cc <USBD_CDC_Init+0x1e4>)
 80042c4:	7819      	ldrb	r1, [r3, #0]
 80042c6:	2340      	movs	r3, #64	@ 0x40
 80042c8:	2202      	movs	r2, #2
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f002 fac9 	bl	8006862 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80042d0:	4b3e      	ldr	r3, [pc, #248]	@ (80043cc <USBD_CDC_Init+0x1e4>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	f003 020f 	and.w	r2, r3, #15
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	3323      	adds	r3, #35	@ 0x23
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80042ea:	4b39      	ldr	r3, [pc, #228]	@ (80043d0 <USBD_CDC_Init+0x1e8>)
 80042ec:	7819      	ldrb	r1, [r3, #0]
 80042ee:	2340      	movs	r3, #64	@ 0x40
 80042f0:	2202      	movs	r2, #2
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f002 fab5 	bl	8006862 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80042f8:	4b35      	ldr	r3, [pc, #212]	@ (80043d0 <USBD_CDC_Init+0x1e8>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	f003 020f 	and.w	r2, r3, #15
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004310:	2201      	movs	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004314:	4b2f      	ldr	r3, [pc, #188]	@ (80043d4 <USBD_CDC_Init+0x1ec>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	f003 020f 	and.w	r2, r3, #15
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	331c      	adds	r3, #28
 800432a:	2210      	movs	r2, #16
 800432c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800432e:	4b29      	ldr	r3, [pc, #164]	@ (80043d4 <USBD_CDC_Init+0x1ec>)
 8004330:	7819      	ldrb	r1, [r3, #0]
 8004332:	2308      	movs	r3, #8
 8004334:	2203      	movs	r2, #3
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f002 fa93 	bl	8006862 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800433c:	4b25      	ldr	r3, [pc, #148]	@ (80043d4 <USBD_CDC_Init+0x1ec>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	f003 020f 	and.w	r2, r3, #15
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	3323      	adds	r3, #35	@ 0x23
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	33b0      	adds	r3, #176	@ 0xb0
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800438c:	2302      	movs	r3, #2
 800438e:	e018      	b.n	80043c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	7c1b      	ldrb	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10a      	bne.n	80043ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004398:	4b0d      	ldr	r3, [pc, #52]	@ (80043d0 <USBD_CDC_Init+0x1e8>)
 800439a:	7819      	ldrb	r1, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80043a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f002 fb4a 	bl	8006a40 <USBD_LL_PrepareReceive>
 80043ac:	e008      	b.n	80043c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80043ae:	4b08      	ldr	r3, [pc, #32]	@ (80043d0 <USBD_CDC_Init+0x1e8>)
 80043b0:	7819      	ldrb	r1, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80043b8:	2340      	movs	r3, #64	@ 0x40
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f002 fb40 	bl	8006a40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000093 	.word	0x20000093
 80043d0:	20000094 	.word	0x20000094
 80043d4:	20000095 	.word	0x20000095

080043d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80043e4:	4b3a      	ldr	r3, [pc, #232]	@ (80044d0 <USBD_CDC_DeInit+0xf8>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f002 fa5f 	bl	80068ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80043f0:	4b37      	ldr	r3, [pc, #220]	@ (80044d0 <USBD_CDC_DeInit+0xf8>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	f003 020f 	and.w	r2, r3, #15
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	3323      	adds	r3, #35	@ 0x23
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800440a:	4b32      	ldr	r3, [pc, #200]	@ (80044d4 <USBD_CDC_DeInit+0xfc>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	4619      	mov	r1, r3
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f002 fa4c 	bl	80068ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004416:	4b2f      	ldr	r3, [pc, #188]	@ (80044d4 <USBD_CDC_DeInit+0xfc>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	f003 020f 	and.w	r2, r3, #15
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800442e:	2200      	movs	r2, #0
 8004430:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004432:	4b29      	ldr	r3, [pc, #164]	@ (80044d8 <USBD_CDC_DeInit+0x100>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f002 fa38 	bl	80068ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800443e:	4b26      	ldr	r3, [pc, #152]	@ (80044d8 <USBD_CDC_DeInit+0x100>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	f003 020f 	and.w	r2, r3, #15
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	3323      	adds	r3, #35	@ 0x23
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004458:	4b1f      	ldr	r3, [pc, #124]	@ (80044d8 <USBD_CDC_DeInit+0x100>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	f003 020f 	and.w	r2, r3, #15
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	331c      	adds	r3, #28
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	32b0      	adds	r2, #176	@ 0xb0
 800447c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d01f      	beq.n	80044c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	33b0      	adds	r3, #176	@ 0xb0
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	32b0      	adds	r2, #176	@ 0xb0
 80044a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f002 fb0c 	bl	8006ac4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	32b0      	adds	r2, #176	@ 0xb0
 80044b6:	2100      	movs	r1, #0
 80044b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000093 	.word	0x20000093
 80044d4:	20000094 	.word	0x20000094
 80044d8:	20000095 	.word	0x20000095

080044dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	32b0      	adds	r2, #176	@ 0xb0
 80044f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004508:	2303      	movs	r3, #3
 800450a:	e0bf      	b.n	800468c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004514:	2b00      	cmp	r3, #0
 8004516:	d050      	beq.n	80045ba <USBD_CDC_Setup+0xde>
 8004518:	2b20      	cmp	r3, #32
 800451a:	f040 80af 	bne.w	800467c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	88db      	ldrh	r3, [r3, #6]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d03a      	beq.n	800459c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	b25b      	sxtb	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	da1b      	bge.n	8004568 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	33b0      	adds	r3, #176	@ 0xb0
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004546:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	88d2      	ldrh	r2, [r2, #6]
 800454c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	88db      	ldrh	r3, [r3, #6]
 8004552:	2b07      	cmp	r3, #7
 8004554:	bf28      	it	cs
 8004556:	2307      	movcs	r3, #7
 8004558:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	89fa      	ldrh	r2, [r7, #14]
 800455e:	4619      	mov	r1, r3
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f001 fd69 	bl	8006038 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004566:	e090      	b.n	800468a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	785a      	ldrb	r2, [r3, #1]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	88db      	ldrh	r3, [r3, #6]
 8004576:	2b3f      	cmp	r3, #63	@ 0x3f
 8004578:	d803      	bhi.n	8004582 <USBD_CDC_Setup+0xa6>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	88db      	ldrh	r3, [r3, #6]
 800457e:	b2da      	uxtb	r2, r3
 8004580:	e000      	b.n	8004584 <USBD_CDC_Setup+0xa8>
 8004582:	2240      	movs	r2, #64	@ 0x40
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800458a:	6939      	ldr	r1, [r7, #16]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004592:	461a      	mov	r2, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f001 fd7e 	bl	8006096 <USBD_CtlPrepareRx>
      break;
 800459a:	e076      	b.n	800468a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	33b0      	adds	r3, #176	@ 0xb0
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	7850      	ldrb	r0, [r2, #1]
 80045b2:	2200      	movs	r2, #0
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	4798      	blx	r3
      break;
 80045b8:	e067      	b.n	800468a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	785b      	ldrb	r3, [r3, #1]
 80045be:	2b0b      	cmp	r3, #11
 80045c0:	d851      	bhi.n	8004666 <USBD_CDC_Setup+0x18a>
 80045c2:	a201      	add	r2, pc, #4	@ (adr r2, 80045c8 <USBD_CDC_Setup+0xec>)
 80045c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c8:	080045f9 	.word	0x080045f9
 80045cc:	08004675 	.word	0x08004675
 80045d0:	08004667 	.word	0x08004667
 80045d4:	08004667 	.word	0x08004667
 80045d8:	08004667 	.word	0x08004667
 80045dc:	08004667 	.word	0x08004667
 80045e0:	08004667 	.word	0x08004667
 80045e4:	08004667 	.word	0x08004667
 80045e8:	08004667 	.word	0x08004667
 80045ec:	08004667 	.word	0x08004667
 80045f0:	08004623 	.word	0x08004623
 80045f4:	0800464d 	.word	0x0800464d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b03      	cmp	r3, #3
 8004602:	d107      	bne.n	8004614 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004604:	f107 030a 	add.w	r3, r7, #10
 8004608:	2202      	movs	r2, #2
 800460a:	4619      	mov	r1, r3
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f001 fd13 	bl	8006038 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004612:	e032      	b.n	800467a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004614:	6839      	ldr	r1, [r7, #0]
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f001 fc91 	bl	8005f3e <USBD_CtlError>
            ret = USBD_FAIL;
 800461c:	2303      	movs	r3, #3
 800461e:	75fb      	strb	r3, [r7, #23]
          break;
 8004620:	e02b      	b.n	800467a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b03      	cmp	r3, #3
 800462c:	d107      	bne.n	800463e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800462e:	f107 030d 	add.w	r3, r7, #13
 8004632:	2201      	movs	r2, #1
 8004634:	4619      	mov	r1, r3
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f001 fcfe 	bl	8006038 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800463c:	e01d      	b.n	800467a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800463e:	6839      	ldr	r1, [r7, #0]
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f001 fc7c 	bl	8005f3e <USBD_CtlError>
            ret = USBD_FAIL;
 8004646:	2303      	movs	r3, #3
 8004648:	75fb      	strb	r3, [r7, #23]
          break;
 800464a:	e016      	b.n	800467a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b03      	cmp	r3, #3
 8004656:	d00f      	beq.n	8004678 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004658:	6839      	ldr	r1, [r7, #0]
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f001 fc6f 	bl	8005f3e <USBD_CtlError>
            ret = USBD_FAIL;
 8004660:	2303      	movs	r3, #3
 8004662:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004664:	e008      	b.n	8004678 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004666:	6839      	ldr	r1, [r7, #0]
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f001 fc68 	bl	8005f3e <USBD_CtlError>
          ret = USBD_FAIL;
 800466e:	2303      	movs	r3, #3
 8004670:	75fb      	strb	r3, [r7, #23]
          break;
 8004672:	e002      	b.n	800467a <USBD_CDC_Setup+0x19e>
          break;
 8004674:	bf00      	nop
 8004676:	e008      	b.n	800468a <USBD_CDC_Setup+0x1ae>
          break;
 8004678:	bf00      	nop
      }
      break;
 800467a:	e006      	b.n	800468a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800467c:	6839      	ldr	r1, [r7, #0]
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f001 fc5d 	bl	8005f3e <USBD_CtlError>
      ret = USBD_FAIL;
 8004684:	2303      	movs	r3, #3
 8004686:	75fb      	strb	r3, [r7, #23]
      break;
 8004688:	bf00      	nop
  }

  return (uint8_t)ret;
 800468a:	7dfb      	ldrb	r3, [r7, #23]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80046a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	32b0      	adds	r2, #176	@ 0xb0
 80046b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e065      	b.n	800478a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	32b0      	adds	r2, #176	@ 0xb0
 80046c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80046ce:	78fb      	ldrb	r3, [r7, #3]
 80046d0:	f003 020f 	and.w	r2, r3, #15
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	3314      	adds	r3, #20
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d02f      	beq.n	8004748 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	f003 020f 	and.w	r2, r3, #15
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	3314      	adds	r3, #20
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	f003 010f 	and.w	r1, r3, #15
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	460b      	mov	r3, r1
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	440b      	add	r3, r1
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4403      	add	r3, r0
 8004710:	331c      	adds	r3, #28
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	fbb2 f1f3 	udiv	r1, r2, r3
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800471e:	2b00      	cmp	r3, #0
 8004720:	d112      	bne.n	8004748 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004722:	78fb      	ldrb	r3, [r7, #3]
 8004724:	f003 020f 	and.w	r2, r3, #15
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	3314      	adds	r3, #20
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800473a:	78f9      	ldrb	r1, [r7, #3]
 800473c:	2300      	movs	r3, #0
 800473e:	2200      	movs	r2, #0
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f002 f95c 	bl	80069fe <USBD_LL_Transmit>
 8004746:	e01f      	b.n	8004788 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2200      	movs	r2, #0
 800474c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	33b0      	adds	r3, #176	@ 0xb0
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d010      	beq.n	8004788 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	33b0      	adds	r3, #176	@ 0xb0
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004784:	78fa      	ldrb	r2, [r7, #3]
 8004786:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	460b      	mov	r3, r1
 800479c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	32b0      	adds	r2, #176	@ 0xb0
 80047a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	32b0      	adds	r2, #176	@ 0xb0
 80047b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e01a      	b.n	80047fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	4619      	mov	r1, r3
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f002 f95a 	bl	8006a82 <USBD_LL_GetRxDataSize>
 80047ce:	4602      	mov	r2, r0
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	33b0      	adds	r3, #176	@ 0xb0
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80047f4:	4611      	mov	r1, r2
 80047f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	32b0      	adds	r2, #176	@ 0xb0
 8004814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004818:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004820:	2303      	movs	r3, #3
 8004822:	e024      	b.n	800486e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	33b0      	adds	r3, #176	@ 0xb0
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d019      	beq.n	800486c <USBD_CDC_EP0_RxReady+0x6a>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800483e:	2bff      	cmp	r3, #255	@ 0xff
 8004840:	d014      	beq.n	800486c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	33b0      	adds	r3, #176	@ 0xb0
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800485a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004862:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	22ff      	movs	r2, #255	@ 0xff
 8004868:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004880:	2182      	movs	r1, #130	@ 0x82
 8004882:	4818      	ldr	r0, [pc, #96]	@ (80048e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004884:	f000 fd22 	bl	80052cc <USBD_GetEpDesc>
 8004888:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800488a:	2101      	movs	r1, #1
 800488c:	4815      	ldr	r0, [pc, #84]	@ (80048e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800488e:	f000 fd1d 	bl	80052cc <USBD_GetEpDesc>
 8004892:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004894:	2181      	movs	r1, #129	@ 0x81
 8004896:	4813      	ldr	r0, [pc, #76]	@ (80048e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004898:	f000 fd18 	bl	80052cc <USBD_GetEpDesc>
 800489c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2210      	movs	r2, #16
 80048a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d006      	beq.n	80048be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048b8:	711a      	strb	r2, [r3, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d006      	beq.n	80048d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048cc:	711a      	strb	r2, [r3, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2243      	movs	r2, #67	@ 0x43
 80048d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80048d8:	4b02      	ldr	r3, [pc, #8]	@ (80048e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000050 	.word	0x20000050

080048e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80048f0:	2182      	movs	r1, #130	@ 0x82
 80048f2:	4818      	ldr	r0, [pc, #96]	@ (8004954 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80048f4:	f000 fcea 	bl	80052cc <USBD_GetEpDesc>
 80048f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80048fa:	2101      	movs	r1, #1
 80048fc:	4815      	ldr	r0, [pc, #84]	@ (8004954 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80048fe:	f000 fce5 	bl	80052cc <USBD_GetEpDesc>
 8004902:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004904:	2181      	movs	r1, #129	@ 0x81
 8004906:	4813      	ldr	r0, [pc, #76]	@ (8004954 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004908:	f000 fce0 	bl	80052cc <USBD_GetEpDesc>
 800490c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2210      	movs	r2, #16
 8004918:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d006      	beq.n	800492e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2200      	movs	r2, #0
 8004924:	711a      	strb	r2, [r3, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f042 0202 	orr.w	r2, r2, #2
 800492c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d006      	beq.n	8004942 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	711a      	strb	r2, [r3, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f042 0202 	orr.w	r2, r2, #2
 8004940:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2243      	movs	r2, #67	@ 0x43
 8004946:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004948:	4b02      	ldr	r3, [pc, #8]	@ (8004954 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000050 	.word	0x20000050

08004958 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004960:	2182      	movs	r1, #130	@ 0x82
 8004962:	4818      	ldr	r0, [pc, #96]	@ (80049c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004964:	f000 fcb2 	bl	80052cc <USBD_GetEpDesc>
 8004968:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800496a:	2101      	movs	r1, #1
 800496c:	4815      	ldr	r0, [pc, #84]	@ (80049c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800496e:	f000 fcad 	bl	80052cc <USBD_GetEpDesc>
 8004972:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004974:	2181      	movs	r1, #129	@ 0x81
 8004976:	4813      	ldr	r0, [pc, #76]	@ (80049c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004978:	f000 fca8 	bl	80052cc <USBD_GetEpDesc>
 800497c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2210      	movs	r2, #16
 8004988:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d006      	beq.n	800499e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2200      	movs	r2, #0
 8004994:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004998:	711a      	strb	r2, [r3, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d006      	beq.n	80049b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049ac:	711a      	strb	r2, [r3, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2243      	movs	r2, #67	@ 0x43
 80049b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80049b8:	4b02      	ldr	r3, [pc, #8]	@ (80049c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000050 	.word	0x20000050

080049c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	220a      	movs	r2, #10
 80049d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80049d6:	4b03      	ldr	r3, [pc, #12]	@ (80049e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	2000000c 	.word	0x2000000c

080049e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e009      	b.n	8004a10 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	33b0      	adds	r3, #176	@ 0xb0
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	32b0      	adds	r2, #176	@ 0xb0
 8004a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a36:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e008      	b.n	8004a54 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	32b0      	adds	r2, #176	@ 0xb0
 8004a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e004      	b.n	8004a8e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	32b0      	adds	r2, #176	@ 0xb0
 8004aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	32b0      	adds	r2, #176	@ 0xb0
 8004abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e018      	b.n	8004afc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	7c1b      	ldrb	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10a      	bne.n	8004ae8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8004b04 <USBD_CDC_ReceivePacket+0x68>)
 8004ad4:	7819      	ldrb	r1, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004adc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f001 ffad 	bl	8006a40 <USBD_LL_PrepareReceive>
 8004ae6:	e008      	b.n	8004afa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ae8:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <USBD_CDC_ReceivePacket+0x68>)
 8004aea:	7819      	ldrb	r1, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004af2:	2340      	movs	r3, #64	@ 0x40
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f001 ffa3 	bl	8006a40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	20000094 	.word	0x20000094

08004b08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	4613      	mov	r3, r2
 8004b14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e01f      	b.n	8004b60 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	79fa      	ldrb	r2, [r7, #7]
 8004b52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f001 fe1d 	bl	8006794 <USBD_LL_Init>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e025      	b.n	8004bcc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	32ae      	adds	r2, #174	@ 0xae
 8004b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00f      	beq.n	8004bbc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	32ae      	adds	r2, #174	@ 0xae
 8004ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	f107 020e 	add.w	r2, r7, #14
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	4798      	blx	r3
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f001 fe25 	bl	800682c <USBD_LL_Start>
 8004be2:	4603      	mov	r3, r0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004bf4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	78fa      	ldrb	r2, [r7, #3]
 8004c26:	4611      	mov	r1, r2
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	4798      	blx	r3
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	460b      	mov	r3, r1
 8004c44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	4611      	mov	r1, r2
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4798      	blx	r3
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004c60:	2303      	movs	r3, #3
 8004c62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004c7e:	6839      	ldr	r1, [r7, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f001 f922 	bl	8005eca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004c94:	461a      	mov	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d01a      	beq.n	8004ce0 <USBD_LL_SetupStage+0x72>
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d822      	bhi.n	8004cf4 <USBD_LL_SetupStage+0x86>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <USBD_LL_SetupStage+0x4a>
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d00a      	beq.n	8004ccc <USBD_LL_SetupStage+0x5e>
 8004cb6:	e01d      	b.n	8004cf4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fb77 	bl	80053b4 <USBD_StdDevReq>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8004cca:	e020      	b.n	8004d0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fbdf 	bl	8005498 <USBD_StdItfReq>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8004cde:	e016      	b.n	8004d0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fc41 	bl	8005570 <USBD_StdEPReq>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf2:	e00c      	b.n	8004d0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004cfa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f001 fdf2 	bl	80068ec <USBD_LL_StallEP>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d0c:	bf00      	nop
  }

  return ret;
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	460b      	mov	r3, r1
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8004d2a:	7afb      	ldrb	r3, [r7, #11]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d177      	bne.n	8004e20 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004d36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	f040 80a1 	bne.w	8004e86 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	8992      	ldrh	r2, [r2, #12]
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d91c      	bls.n	8004d8a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	8992      	ldrh	r2, [r2, #12]
 8004d58:	1a9a      	subs	r2, r3, r2
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	8992      	ldrh	r2, [r2, #12]
 8004d66:	441a      	add	r2, r3
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	6919      	ldr	r1, [r3, #16]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	899b      	ldrh	r3, [r3, #12]
 8004d74:	461a      	mov	r2, r3
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	bf38      	it	cc
 8004d7e:	4613      	movcc	r3, r2
 8004d80:	461a      	mov	r2, r3
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f001 f9a8 	bl	80060d8 <USBD_CtlContinueRx>
 8004d88:	e07d      	b.n	8004e86 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d014      	beq.n	8004dc2 <USBD_LL_DataOutStage+0xaa>
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d81d      	bhi.n	8004dd8 <USBD_LL_DataOutStage+0xc0>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <USBD_LL_DataOutStage+0x8e>
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d003      	beq.n	8004dac <USBD_LL_DataOutStage+0x94>
 8004da4:	e018      	b.n	8004dd8 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	75bb      	strb	r3, [r7, #22]
            break;
 8004daa:	e018      	b.n	8004dde <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	4619      	mov	r1, r3
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 fa6e 	bl	8005298 <USBD_CoreFindIF>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	75bb      	strb	r3, [r7, #22]
            break;
 8004dc0:	e00d      	b.n	8004dde <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	4619      	mov	r1, r3
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 fa70 	bl	80052b2 <USBD_CoreFindEP>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	75bb      	strb	r3, [r7, #22]
            break;
 8004dd6:	e002      	b.n	8004dde <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	75bb      	strb	r3, [r7, #22]
            break;
 8004ddc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004dde:	7dbb      	ldrb	r3, [r7, #22]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d119      	bne.n	8004e18 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d113      	bne.n	8004e18 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004df0:	7dba      	ldrb	r2, [r7, #22]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	32ae      	adds	r2, #174	@ 0xae
 8004df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00b      	beq.n	8004e18 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8004e00:	7dba      	ldrb	r2, [r7, #22]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004e08:	7dba      	ldrb	r2, [r7, #22]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	32ae      	adds	r2, #174	@ 0xae
 8004e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f001 f96e 	bl	80060fa <USBD_CtlSendStatus>
 8004e1e:	e032      	b.n	8004e86 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004e20:	7afb      	ldrb	r3, [r7, #11]
 8004e22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	4619      	mov	r1, r3
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fa41 	bl	80052b2 <USBD_CoreFindEP>
 8004e30:	4603      	mov	r3, r0
 8004e32:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004e34:	7dbb      	ldrb	r3, [r7, #22]
 8004e36:	2bff      	cmp	r3, #255	@ 0xff
 8004e38:	d025      	beq.n	8004e86 <USBD_LL_DataOutStage+0x16e>
 8004e3a:	7dbb      	ldrb	r3, [r7, #22]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d122      	bne.n	8004e86 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d117      	bne.n	8004e7c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004e4c:	7dba      	ldrb	r2, [r7, #22]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	32ae      	adds	r2, #174	@ 0xae
 8004e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00f      	beq.n	8004e7c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8004e5c:	7dba      	ldrb	r2, [r7, #22]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004e64:	7dba      	ldrb	r2, [r7, #22]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	32ae      	adds	r2, #174	@ 0xae
 8004e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	7afa      	ldrb	r2, [r7, #11]
 8004e72:	4611      	mov	r1, r2
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	4798      	blx	r3
 8004e78:	4603      	mov	r3, r0
 8004e7a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004e7c:	7dfb      	ldrb	r3, [r7, #23]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	e000      	b.n	8004e88 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8004e9e:	7afb      	ldrb	r3, [r7, #11]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d178      	bne.n	8004f96 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3314      	adds	r3, #20
 8004ea8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d163      	bne.n	8004f7c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	8992      	ldrh	r2, [r2, #12]
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d91c      	bls.n	8004efa <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	8992      	ldrh	r2, [r2, #12]
 8004ec8:	1a9a      	subs	r2, r3, r2
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	8992      	ldrh	r2, [r2, #12]
 8004ed6:	441a      	add	r2, r3
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	6919      	ldr	r1, [r3, #16]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f001 f8c4 	bl	8006074 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004eec:	2300      	movs	r3, #0
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f001 fda4 	bl	8006a40 <USBD_LL_PrepareReceive>
 8004ef8:	e040      	b.n	8004f7c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	899b      	ldrh	r3, [r3, #12]
 8004efe:	461a      	mov	r2, r3
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d11c      	bne.n	8004f42 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d316      	bcc.n	8004f42 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d20f      	bcs.n	8004f42 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004f22:	2200      	movs	r2, #0
 8004f24:	2100      	movs	r1, #0
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f001 f8a4 	bl	8006074 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f34:	2300      	movs	r3, #0
 8004f36:	2200      	movs	r2, #0
 8004f38:	2100      	movs	r1, #0
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f001 fd80 	bl	8006a40 <USBD_LL_PrepareReceive>
 8004f40:	e01c      	b.n	8004f7c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d10f      	bne.n	8004f6e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f6e:	2180      	movs	r1, #128	@ 0x80
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f001 fcbb 	bl	80068ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f001 f8d2 	bl	8006120 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d03a      	beq.n	8004ffc <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f7ff fe30 	bl	8004bec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004f94:	e032      	b.n	8004ffc <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004f96:	7afb      	ldrb	r3, [r7, #11]
 8004f98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f986 	bl	80052b2 <USBD_CoreFindEP>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004faa:	7dfb      	ldrb	r3, [r7, #23]
 8004fac:	2bff      	cmp	r3, #255	@ 0xff
 8004fae:	d025      	beq.n	8004ffc <USBD_LL_DataInStage+0x16c>
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d122      	bne.n	8004ffc <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d11c      	bne.n	8004ffc <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004fc2:	7dfa      	ldrb	r2, [r7, #23]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	32ae      	adds	r2, #174	@ 0xae
 8004fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d014      	beq.n	8004ffc <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8004fd2:	7dfa      	ldrb	r2, [r7, #23]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004fda:	7dfa      	ldrb	r2, [r7, #23]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	32ae      	adds	r2, #174	@ 0xae
 8004fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	7afa      	ldrb	r2, [r7, #11]
 8004fe8:	4611      	mov	r1, r2
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	4798      	blx	r3
 8004fee:	4603      	mov	r3, r0
 8004ff0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004ff2:	7dbb      	ldrb	r3, [r7, #22]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8004ff8:	7dbb      	ldrb	r3, [r7, #22]
 8004ffa:	e000      	b.n	8004ffe <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d014      	beq.n	800506c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00e      	beq.n	800506c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6852      	ldr	r2, [r2, #4]
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	4611      	mov	r1, r2
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	4798      	blx	r3
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005068:	2303      	movs	r3, #3
 800506a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800506c:	2340      	movs	r3, #64	@ 0x40
 800506e:	2200      	movs	r2, #0
 8005070:	2100      	movs	r1, #0
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f001 fbf5 	bl	8006862 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2240      	movs	r2, #64	@ 0x40
 8005084:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005088:	2340      	movs	r3, #64	@ 0x40
 800508a:	2200      	movs	r2, #0
 800508c:	2180      	movs	r1, #128	@ 0x80
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f001 fbe7 	bl	8006862 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2240      	movs	r2, #64	@ 0x40
 80050a0:	841a      	strh	r2, [r3, #32]

  return ret;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	78fa      	ldrb	r2, [r7, #3]
 80050bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d006      	beq.n	80050ee <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2204      	movs	r2, #4
 80050f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b04      	cmp	r3, #4
 8005116:	d106      	bne.n	8005126 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800511e:	b2da      	uxtb	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b03      	cmp	r3, #3
 8005146:	d110      	bne.n	800516a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	32ae      	adds	r2, #174	@ 0xae
 800518a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005192:	2303      	movs	r3, #3
 8005194:	e01c      	b.n	80051d0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d115      	bne.n	80051ce <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	32ae      	adds	r2, #174	@ 0xae
 80051ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00b      	beq.n	80051ce <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	32ae      	adds	r2, #174	@ 0xae
 80051c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	78fa      	ldrb	r2, [r7, #3]
 80051c8:	4611      	mov	r1, r2
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	32ae      	adds	r2, #174	@ 0xae
 80051ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e01c      	b.n	8005234 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b03      	cmp	r3, #3
 8005204:	d115      	bne.n	8005232 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	32ae      	adds	r2, #174	@ 0xae
 8005210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	32ae      	adds	r2, #174	@ 0xae
 8005224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522a:	78fa      	ldrb	r2, [r7, #3]
 800522c:	4611      	mov	r1, r2
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00e      	beq.n	800528e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6852      	ldr	r2, [r2, #4]
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	4611      	mov	r1, r2
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	4798      	blx	r3
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800528a:	2303      	movs	r3, #3
 800528c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800528e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80052a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	460b      	mov	r3, r1
 80052bc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80052be:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80052e0:	2300      	movs	r3, #0
 80052e2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	885b      	ldrh	r3, [r3, #2]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	7812      	ldrb	r2, [r2, #0]
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d91f      	bls.n	8005332 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80052f8:	e013      	b.n	8005322 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80052fa:	f107 030a 	add.w	r3, r7, #10
 80052fe:	4619      	mov	r1, r3
 8005300:	6978      	ldr	r0, [r7, #20]
 8005302:	f000 f81b 	bl	800533c <USBD_GetNextDesc>
 8005306:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	785b      	ldrb	r3, [r3, #1]
 800530c:	2b05      	cmp	r3, #5
 800530e:	d108      	bne.n	8005322 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	789b      	ldrb	r3, [r3, #2]
 8005318:	78fa      	ldrb	r2, [r7, #3]
 800531a:	429a      	cmp	r2, r3
 800531c:	d008      	beq.n	8005330 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800531e:	2300      	movs	r3, #0
 8005320:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	885b      	ldrh	r3, [r3, #2]
 8005326:	b29a      	uxth	r2, r3
 8005328:	897b      	ldrh	r3, [r7, #10]
 800532a:	429a      	cmp	r2, r3
 800532c:	d8e5      	bhi.n	80052fa <USBD_GetEpDesc+0x2e>
 800532e:	e000      	b.n	8005332 <USBD_GetEpDesc+0x66>
          break;
 8005330:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005332:	693b      	ldr	r3, [r7, #16]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	7812      	ldrb	r2, [r2, #0]
 8005352:	4413      	add	r3, r2
 8005354:	b29a      	uxth	r2, r3
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4413      	add	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005366:	68fb      	ldr	r3, [r7, #12]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	3301      	adds	r3, #1
 800538a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005392:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	b21a      	sxth	r2, r3
 800539a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800539e:	4313      	orrs	r3, r2
 80053a0:	b21b      	sxth	r3, r3
 80053a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80053a4:	89fb      	ldrh	r3, [r7, #14]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80053ca:	2b40      	cmp	r3, #64	@ 0x40
 80053cc:	d005      	beq.n	80053da <USBD_StdDevReq+0x26>
 80053ce:	2b40      	cmp	r3, #64	@ 0x40
 80053d0:	d857      	bhi.n	8005482 <USBD_StdDevReq+0xce>
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00f      	beq.n	80053f6 <USBD_StdDevReq+0x42>
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d153      	bne.n	8005482 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	32ae      	adds	r2, #174	@ 0xae
 80053e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	6839      	ldr	r1, [r7, #0]
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]
      break;
 80053f4:	e04a      	b.n	800548c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	785b      	ldrb	r3, [r3, #1]
 80053fa:	2b09      	cmp	r3, #9
 80053fc:	d83b      	bhi.n	8005476 <USBD_StdDevReq+0xc2>
 80053fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005404 <USBD_StdDevReq+0x50>)
 8005400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005404:	08005459 	.word	0x08005459
 8005408:	0800546d 	.word	0x0800546d
 800540c:	08005477 	.word	0x08005477
 8005410:	08005463 	.word	0x08005463
 8005414:	08005477 	.word	0x08005477
 8005418:	08005437 	.word	0x08005437
 800541c:	0800542d 	.word	0x0800542d
 8005420:	08005477 	.word	0x08005477
 8005424:	0800544f 	.word	0x0800544f
 8005428:	08005441 	.word	0x08005441
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800542c:	6839      	ldr	r1, [r7, #0]
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fa3e 	bl	80058b0 <USBD_GetDescriptor>
          break;
 8005434:	e024      	b.n	8005480 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005436:	6839      	ldr	r1, [r7, #0]
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fba3 	bl	8005b84 <USBD_SetAddress>
          break;
 800543e:	e01f      	b.n	8005480 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fbe2 	bl	8005c0c <USBD_SetConfig>
 8005448:	4603      	mov	r3, r0
 800544a:	73fb      	strb	r3, [r7, #15]
          break;
 800544c:	e018      	b.n	8005480 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800544e:	6839      	ldr	r1, [r7, #0]
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fc85 	bl	8005d60 <USBD_GetConfig>
          break;
 8005456:	e013      	b.n	8005480 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005458:	6839      	ldr	r1, [r7, #0]
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fcb6 	bl	8005dcc <USBD_GetStatus>
          break;
 8005460:	e00e      	b.n	8005480 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005462:	6839      	ldr	r1, [r7, #0]
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 fce5 	bl	8005e34 <USBD_SetFeature>
          break;
 800546a:	e009      	b.n	8005480 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fd09 	bl	8005e86 <USBD_ClrFeature>
          break;
 8005474:	e004      	b.n	8005480 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005476:	6839      	ldr	r1, [r7, #0]
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fd60 	bl	8005f3e <USBD_CtlError>
          break;
 800547e:	bf00      	nop
      }
      break;
 8005480:	e004      	b.n	800548c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 fd5a 	bl	8005f3e <USBD_CtlError>
      break;
 800548a:	bf00      	nop
  }

  return ret;
 800548c:	7bfb      	ldrb	r3, [r7, #15]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop

08005498 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80054ae:	2b40      	cmp	r3, #64	@ 0x40
 80054b0:	d005      	beq.n	80054be <USBD_StdItfReq+0x26>
 80054b2:	2b40      	cmp	r3, #64	@ 0x40
 80054b4:	d852      	bhi.n	800555c <USBD_StdItfReq+0xc4>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <USBD_StdItfReq+0x26>
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	d14e      	bne.n	800555c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d840      	bhi.n	800554e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	889b      	ldrh	r3, [r3, #4]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d836      	bhi.n	8005544 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	889b      	ldrh	r3, [r3, #4]
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	4619      	mov	r1, r3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff feda 	bl	8005298 <USBD_CoreFindIF>
 80054e4:	4603      	mov	r3, r0
 80054e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80054e8:	7bbb      	ldrb	r3, [r7, #14]
 80054ea:	2bff      	cmp	r3, #255	@ 0xff
 80054ec:	d01d      	beq.n	800552a <USBD_StdItfReq+0x92>
 80054ee:	7bbb      	ldrb	r3, [r7, #14]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d11a      	bne.n	800552a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80054f4:	7bba      	ldrb	r2, [r7, #14]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	32ae      	adds	r2, #174	@ 0xae
 80054fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00f      	beq.n	8005524 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005504:	7bba      	ldrb	r2, [r7, #14]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800550c:	7bba      	ldrb	r2, [r7, #14]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	32ae      	adds	r2, #174	@ 0xae
 8005512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	4798      	blx	r3
 800551e:	4603      	mov	r3, r0
 8005520:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005522:	e004      	b.n	800552e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005524:	2303      	movs	r3, #3
 8005526:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005528:	e001      	b.n	800552e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800552a:	2303      	movs	r3, #3
 800552c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	88db      	ldrh	r3, [r3, #6]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d110      	bne.n	8005558 <USBD_StdItfReq+0xc0>
 8005536:	7bfb      	ldrb	r3, [r7, #15]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10d      	bne.n	8005558 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fddc 	bl	80060fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005542:	e009      	b.n	8005558 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fcf9 	bl	8005f3e <USBD_CtlError>
          break;
 800554c:	e004      	b.n	8005558 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800554e:	6839      	ldr	r1, [r7, #0]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fcf4 	bl	8005f3e <USBD_CtlError>
          break;
 8005556:	e000      	b.n	800555a <USBD_StdItfReq+0xc2>
          break;
 8005558:	bf00      	nop
      }
      break;
 800555a:	e004      	b.n	8005566 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800555c:	6839      	ldr	r1, [r7, #0]
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fced 	bl	8005f3e <USBD_CtlError>
      break;
 8005564:	bf00      	nop
  }

  return ret;
 8005566:	7bfb      	ldrb	r3, [r7, #15]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	889b      	ldrh	r3, [r3, #4]
 8005582:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800558c:	2b40      	cmp	r3, #64	@ 0x40
 800558e:	d007      	beq.n	80055a0 <USBD_StdEPReq+0x30>
 8005590:	2b40      	cmp	r3, #64	@ 0x40
 8005592:	f200 8181 	bhi.w	8005898 <USBD_StdEPReq+0x328>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d02a      	beq.n	80055f0 <USBD_StdEPReq+0x80>
 800559a:	2b20      	cmp	r3, #32
 800559c:	f040 817c 	bne.w	8005898 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80055a0:	7bbb      	ldrb	r3, [r7, #14]
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff fe84 	bl	80052b2 <USBD_CoreFindEP>
 80055aa:	4603      	mov	r3, r0
 80055ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80055ae:	7b7b      	ldrb	r3, [r7, #13]
 80055b0:	2bff      	cmp	r3, #255	@ 0xff
 80055b2:	f000 8176 	beq.w	80058a2 <USBD_StdEPReq+0x332>
 80055b6:	7b7b      	ldrb	r3, [r7, #13]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f040 8172 	bne.w	80058a2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80055be:	7b7a      	ldrb	r2, [r7, #13]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80055c6:	7b7a      	ldrb	r2, [r7, #13]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	32ae      	adds	r2, #174	@ 0xae
 80055cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 8165 	beq.w	80058a2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80055d8:	7b7a      	ldrb	r2, [r7, #13]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	32ae      	adds	r2, #174	@ 0xae
 80055de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
 80055ea:	4603      	mov	r3, r0
 80055ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055ee:	e158      	b.n	80058a2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d008      	beq.n	800560a <USBD_StdEPReq+0x9a>
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	f300 8147 	bgt.w	800588c <USBD_StdEPReq+0x31c>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 809b 	beq.w	800573a <USBD_StdEPReq+0x1ca>
 8005604:	2b01      	cmp	r3, #1
 8005606:	d03c      	beq.n	8005682 <USBD_StdEPReq+0x112>
 8005608:	e140      	b.n	800588c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d002      	beq.n	800561c <USBD_StdEPReq+0xac>
 8005616:	2b03      	cmp	r3, #3
 8005618:	d016      	beq.n	8005648 <USBD_StdEPReq+0xd8>
 800561a:	e02c      	b.n	8005676 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800561c:	7bbb      	ldrb	r3, [r7, #14]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00d      	beq.n	800563e <USBD_StdEPReq+0xce>
 8005622:	7bbb      	ldrb	r3, [r7, #14]
 8005624:	2b80      	cmp	r3, #128	@ 0x80
 8005626:	d00a      	beq.n	800563e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005628:	7bbb      	ldrb	r3, [r7, #14]
 800562a:	4619      	mov	r1, r3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f001 f95d 	bl	80068ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005632:	2180      	movs	r1, #128	@ 0x80
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f001 f959 	bl	80068ec <USBD_LL_StallEP>
 800563a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800563c:	e020      	b.n	8005680 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800563e:	6839      	ldr	r1, [r7, #0]
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fc7c 	bl	8005f3e <USBD_CtlError>
              break;
 8005646:	e01b      	b.n	8005680 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	885b      	ldrh	r3, [r3, #2]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10e      	bne.n	800566e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005650:	7bbb      	ldrb	r3, [r7, #14]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00b      	beq.n	800566e <USBD_StdEPReq+0xfe>
 8005656:	7bbb      	ldrb	r3, [r7, #14]
 8005658:	2b80      	cmp	r3, #128	@ 0x80
 800565a:	d008      	beq.n	800566e <USBD_StdEPReq+0xfe>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	88db      	ldrh	r3, [r3, #6]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005664:	7bbb      	ldrb	r3, [r7, #14]
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f001 f93f 	bl	80068ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fd43 	bl	80060fa <USBD_CtlSendStatus>

              break;
 8005674:	e004      	b.n	8005680 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fc60 	bl	8005f3e <USBD_CtlError>
              break;
 800567e:	bf00      	nop
          }
          break;
 8005680:	e109      	b.n	8005896 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d002      	beq.n	8005694 <USBD_StdEPReq+0x124>
 800568e:	2b03      	cmp	r3, #3
 8005690:	d016      	beq.n	80056c0 <USBD_StdEPReq+0x150>
 8005692:	e04b      	b.n	800572c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005694:	7bbb      	ldrb	r3, [r7, #14]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00d      	beq.n	80056b6 <USBD_StdEPReq+0x146>
 800569a:	7bbb      	ldrb	r3, [r7, #14]
 800569c:	2b80      	cmp	r3, #128	@ 0x80
 800569e:	d00a      	beq.n	80056b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80056a0:	7bbb      	ldrb	r3, [r7, #14]
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f001 f921 	bl	80068ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80056aa:	2180      	movs	r1, #128	@ 0x80
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f001 f91d 	bl	80068ec <USBD_LL_StallEP>
 80056b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80056b4:	e040      	b.n	8005738 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80056b6:	6839      	ldr	r1, [r7, #0]
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fc40 	bl	8005f3e <USBD_CtlError>
              break;
 80056be:	e03b      	b.n	8005738 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	885b      	ldrh	r3, [r3, #2]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d136      	bne.n	8005736 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80056c8:	7bbb      	ldrb	r3, [r7, #14]
 80056ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d004      	beq.n	80056dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80056d2:	7bbb      	ldrb	r3, [r7, #14]
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f001 f927 	bl	800692a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fd0c 	bl	80060fa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80056e2:	7bbb      	ldrb	r3, [r7, #14]
 80056e4:	4619      	mov	r1, r3
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff fde3 	bl	80052b2 <USBD_CoreFindEP>
 80056ec:	4603      	mov	r3, r0
 80056ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80056f0:	7b7b      	ldrb	r3, [r7, #13]
 80056f2:	2bff      	cmp	r3, #255	@ 0xff
 80056f4:	d01f      	beq.n	8005736 <USBD_StdEPReq+0x1c6>
 80056f6:	7b7b      	ldrb	r3, [r7, #13]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d11c      	bne.n	8005736 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80056fc:	7b7a      	ldrb	r2, [r7, #13]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005704:	7b7a      	ldrb	r2, [r7, #13]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	32ae      	adds	r2, #174	@ 0xae
 800570a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d010      	beq.n	8005736 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005714:	7b7a      	ldrb	r2, [r7, #13]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	32ae      	adds	r2, #174	@ 0xae
 800571a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	4798      	blx	r3
 8005726:	4603      	mov	r3, r0
 8005728:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800572a:	e004      	b.n	8005736 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fc05 	bl	8005f3e <USBD_CtlError>
              break;
 8005734:	e000      	b.n	8005738 <USBD_StdEPReq+0x1c8>
              break;
 8005736:	bf00      	nop
          }
          break;
 8005738:	e0ad      	b.n	8005896 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d002      	beq.n	800574c <USBD_StdEPReq+0x1dc>
 8005746:	2b03      	cmp	r3, #3
 8005748:	d033      	beq.n	80057b2 <USBD_StdEPReq+0x242>
 800574a:	e099      	b.n	8005880 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800574c:	7bbb      	ldrb	r3, [r7, #14]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <USBD_StdEPReq+0x1f2>
 8005752:	7bbb      	ldrb	r3, [r7, #14]
 8005754:	2b80      	cmp	r3, #128	@ 0x80
 8005756:	d004      	beq.n	8005762 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fbef 	bl	8005f3e <USBD_CtlError>
                break;
 8005760:	e093      	b.n	800588a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005762:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005766:	2b00      	cmp	r3, #0
 8005768:	da0b      	bge.n	8005782 <USBD_StdEPReq+0x212>
 800576a:	7bbb      	ldrb	r3, [r7, #14]
 800576c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	3310      	adds	r3, #16
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	4413      	add	r3, r2
 800577e:	3304      	adds	r3, #4
 8005780:	e00b      	b.n	800579a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005782:	7bbb      	ldrb	r3, [r7, #14]
 8005784:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	4413      	add	r3, r2
 8005798:	3304      	adds	r3, #4
 800579a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2200      	movs	r2, #0
 80057a0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	330e      	adds	r3, #14
 80057a6:	2202      	movs	r2, #2
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fc44 	bl	8006038 <USBD_CtlSendData>
              break;
 80057b0:	e06b      	b.n	800588a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80057b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	da11      	bge.n	80057de <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80057ba:	7bbb      	ldrb	r3, [r7, #14]
 80057bc:	f003 020f 	and.w	r2, r3, #15
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	3323      	adds	r3, #35	@ 0x23
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d117      	bne.n	8005804 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80057d4:	6839      	ldr	r1, [r7, #0]
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fbb1 	bl	8005f3e <USBD_CtlError>
                  break;
 80057dc:	e055      	b.n	800588a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80057de:	7bbb      	ldrb	r3, [r7, #14]
 80057e0:	f003 020f 	and.w	r2, r3, #15
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	440b      	add	r3, r1
 80057f0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d104      	bne.n	8005804 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80057fa:	6839      	ldr	r1, [r7, #0]
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fb9e 	bl	8005f3e <USBD_CtlError>
                  break;
 8005802:	e042      	b.n	800588a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005804:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005808:	2b00      	cmp	r3, #0
 800580a:	da0b      	bge.n	8005824 <USBD_StdEPReq+0x2b4>
 800580c:	7bbb      	ldrb	r3, [r7, #14]
 800580e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	3310      	adds	r3, #16
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	4413      	add	r3, r2
 8005820:	3304      	adds	r3, #4
 8005822:	e00b      	b.n	800583c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005824:	7bbb      	ldrb	r3, [r7, #14]
 8005826:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	4413      	add	r3, r2
 800583a:	3304      	adds	r3, #4
 800583c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800583e:	7bbb      	ldrb	r3, [r7, #14]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <USBD_StdEPReq+0x2da>
 8005844:	7bbb      	ldrb	r3, [r7, #14]
 8005846:	2b80      	cmp	r3, #128	@ 0x80
 8005848:	d103      	bne.n	8005852 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2200      	movs	r2, #0
 800584e:	739a      	strb	r2, [r3, #14]
 8005850:	e00e      	b.n	8005870 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005852:	7bbb      	ldrb	r3, [r7, #14]
 8005854:	4619      	mov	r1, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f001 f886 	bl	8006968 <USBD_LL_IsStallEP>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2201      	movs	r2, #1
 8005866:	739a      	strb	r2, [r3, #14]
 8005868:	e002      	b.n	8005870 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2200      	movs	r2, #0
 800586e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	330e      	adds	r3, #14
 8005874:	2202      	movs	r2, #2
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 fbdd 	bl	8006038 <USBD_CtlSendData>
              break;
 800587e:	e004      	b.n	800588a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8005880:	6839      	ldr	r1, [r7, #0]
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fb5b 	bl	8005f3e <USBD_CtlError>
              break;
 8005888:	bf00      	nop
          }
          break;
 800588a:	e004      	b.n	8005896 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800588c:	6839      	ldr	r1, [r7, #0]
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fb55 	bl	8005f3e <USBD_CtlError>
          break;
 8005894:	bf00      	nop
      }
      break;
 8005896:	e005      	b.n	80058a4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fb4f 	bl	8005f3e <USBD_CtlError>
      break;
 80058a0:	e000      	b.n	80058a4 <USBD_StdEPReq+0x334>
      break;
 80058a2:	bf00      	nop
  }

  return ret;
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	885b      	ldrh	r3, [r3, #2]
 80058ca:	0a1b      	lsrs	r3, r3, #8
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	3b01      	subs	r3, #1
 80058d0:	2b06      	cmp	r3, #6
 80058d2:	f200 8128 	bhi.w	8005b26 <USBD_GetDescriptor+0x276>
 80058d6:	a201      	add	r2, pc, #4	@ (adr r2, 80058dc <USBD_GetDescriptor+0x2c>)
 80058d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058dc:	080058f9 	.word	0x080058f9
 80058e0:	08005911 	.word	0x08005911
 80058e4:	08005951 	.word	0x08005951
 80058e8:	08005b27 	.word	0x08005b27
 80058ec:	08005b27 	.word	0x08005b27
 80058f0:	08005ac7 	.word	0x08005ac7
 80058f4:	08005af3 	.word	0x08005af3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	7c12      	ldrb	r2, [r2, #16]
 8005904:	f107 0108 	add.w	r1, r7, #8
 8005908:	4610      	mov	r0, r2
 800590a:	4798      	blx	r3
 800590c:	60f8      	str	r0, [r7, #12]
      break;
 800590e:	e112      	b.n	8005b36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	7c1b      	ldrb	r3, [r3, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10d      	bne.n	8005934 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800591e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005920:	f107 0208 	add.w	r2, r7, #8
 8005924:	4610      	mov	r0, r2
 8005926:	4798      	blx	r3
 8005928:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3301      	adds	r3, #1
 800592e:	2202      	movs	r2, #2
 8005930:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005932:	e100      	b.n	8005b36 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800593a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593c:	f107 0208 	add.w	r2, r7, #8
 8005940:	4610      	mov	r0, r2
 8005942:	4798      	blx	r3
 8005944:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	3301      	adds	r3, #1
 800594a:	2202      	movs	r2, #2
 800594c:	701a      	strb	r2, [r3, #0]
      break;
 800594e:	e0f2      	b.n	8005b36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	885b      	ldrh	r3, [r3, #2]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b05      	cmp	r3, #5
 8005958:	f200 80ac 	bhi.w	8005ab4 <USBD_GetDescriptor+0x204>
 800595c:	a201      	add	r2, pc, #4	@ (adr r2, 8005964 <USBD_GetDescriptor+0xb4>)
 800595e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005962:	bf00      	nop
 8005964:	0800597d 	.word	0x0800597d
 8005968:	080059b1 	.word	0x080059b1
 800596c:	080059e5 	.word	0x080059e5
 8005970:	08005a19 	.word	0x08005a19
 8005974:	08005a4d 	.word	0x08005a4d
 8005978:	08005a81 	.word	0x08005a81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00b      	beq.n	80059a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	7c12      	ldrb	r2, [r2, #16]
 8005994:	f107 0108 	add.w	r1, r7, #8
 8005998:	4610      	mov	r0, r2
 800599a:	4798      	blx	r3
 800599c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800599e:	e091      	b.n	8005ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 facb 	bl	8005f3e <USBD_CtlError>
            err++;
 80059a8:	7afb      	ldrb	r3, [r7, #11]
 80059aa:	3301      	adds	r3, #1
 80059ac:	72fb      	strb	r3, [r7, #11]
          break;
 80059ae:	e089      	b.n	8005ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00b      	beq.n	80059d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	7c12      	ldrb	r2, [r2, #16]
 80059c8:	f107 0108 	add.w	r1, r7, #8
 80059cc:	4610      	mov	r0, r2
 80059ce:	4798      	blx	r3
 80059d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059d2:	e077      	b.n	8005ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80059d4:	6839      	ldr	r1, [r7, #0]
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fab1 	bl	8005f3e <USBD_CtlError>
            err++;
 80059dc:	7afb      	ldrb	r3, [r7, #11]
 80059de:	3301      	adds	r3, #1
 80059e0:	72fb      	strb	r3, [r7, #11]
          break;
 80059e2:	e06f      	b.n	8005ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00b      	beq.n	8005a08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	7c12      	ldrb	r2, [r2, #16]
 80059fc:	f107 0108 	add.w	r1, r7, #8
 8005a00:	4610      	mov	r0, r2
 8005a02:	4798      	blx	r3
 8005a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a06:	e05d      	b.n	8005ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fa97 	bl	8005f3e <USBD_CtlError>
            err++;
 8005a10:	7afb      	ldrb	r3, [r7, #11]
 8005a12:	3301      	adds	r3, #1
 8005a14:	72fb      	strb	r3, [r7, #11]
          break;
 8005a16:	e055      	b.n	8005ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00b      	beq.n	8005a3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	7c12      	ldrb	r2, [r2, #16]
 8005a30:	f107 0108 	add.w	r1, r7, #8
 8005a34:	4610      	mov	r0, r2
 8005a36:	4798      	blx	r3
 8005a38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a3a:	e043      	b.n	8005ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a3c:	6839      	ldr	r1, [r7, #0]
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fa7d 	bl	8005f3e <USBD_CtlError>
            err++;
 8005a44:	7afb      	ldrb	r3, [r7, #11]
 8005a46:	3301      	adds	r3, #1
 8005a48:	72fb      	strb	r3, [r7, #11]
          break;
 8005a4a:	e03b      	b.n	8005ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00b      	beq.n	8005a70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	7c12      	ldrb	r2, [r2, #16]
 8005a64:	f107 0108 	add.w	r1, r7, #8
 8005a68:	4610      	mov	r0, r2
 8005a6a:	4798      	blx	r3
 8005a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a6e:	e029      	b.n	8005ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a70:	6839      	ldr	r1, [r7, #0]
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fa63 	bl	8005f3e <USBD_CtlError>
            err++;
 8005a78:	7afb      	ldrb	r3, [r7, #11]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8005a7e:	e021      	b.n	8005ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00b      	beq.n	8005aa4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	7c12      	ldrb	r2, [r2, #16]
 8005a98:	f107 0108 	add.w	r1, r7, #8
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	4798      	blx	r3
 8005aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005aa2:	e00f      	b.n	8005ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005aa4:	6839      	ldr	r1, [r7, #0]
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fa49 	bl	8005f3e <USBD_CtlError>
            err++;
 8005aac:	7afb      	ldrb	r3, [r7, #11]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ab2:	e007      	b.n	8005ac4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fa41 	bl	8005f3e <USBD_CtlError>
          err++;
 8005abc:	7afb      	ldrb	r3, [r7, #11]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005ac2:	bf00      	nop
      }
      break;
 8005ac4:	e037      	b.n	8005b36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	7c1b      	ldrb	r3, [r3, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d109      	bne.n	8005ae2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ad6:	f107 0208 	add.w	r2, r7, #8
 8005ada:	4610      	mov	r0, r2
 8005adc:	4798      	blx	r3
 8005ade:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ae0:	e029      	b.n	8005b36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fa2a 	bl	8005f3e <USBD_CtlError>
        err++;
 8005aea:	7afb      	ldrb	r3, [r7, #11]
 8005aec:	3301      	adds	r3, #1
 8005aee:	72fb      	strb	r3, [r7, #11]
      break;
 8005af0:	e021      	b.n	8005b36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	7c1b      	ldrb	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10d      	bne.n	8005b16 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b02:	f107 0208 	add.w	r2, r7, #8
 8005b06:	4610      	mov	r0, r2
 8005b08:	4798      	blx	r3
 8005b0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	2207      	movs	r2, #7
 8005b12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b14:	e00f      	b.n	8005b36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fa10 	bl	8005f3e <USBD_CtlError>
        err++;
 8005b1e:	7afb      	ldrb	r3, [r7, #11]
 8005b20:	3301      	adds	r3, #1
 8005b22:	72fb      	strb	r3, [r7, #11]
      break;
 8005b24:	e007      	b.n	8005b36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fa08 	bl	8005f3e <USBD_CtlError>
      err++;
 8005b2e:	7afb      	ldrb	r3, [r7, #11]
 8005b30:	3301      	adds	r3, #1
 8005b32:	72fb      	strb	r3, [r7, #11]
      break;
 8005b34:	bf00      	nop
  }

  if (err != 0U)
 8005b36:	7afb      	ldrb	r3, [r7, #11]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d11e      	bne.n	8005b7a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	88db      	ldrh	r3, [r3, #6]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d016      	beq.n	8005b72 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005b44:	893b      	ldrh	r3, [r7, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00e      	beq.n	8005b68 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	88da      	ldrh	r2, [r3, #6]
 8005b4e:	893b      	ldrh	r3, [r7, #8]
 8005b50:	4293      	cmp	r3, r2
 8005b52:	bf28      	it	cs
 8005b54:	4613      	movcs	r3, r2
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b5a:	893b      	ldrh	r3, [r7, #8]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	68f9      	ldr	r1, [r7, #12]
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fa69 	bl	8006038 <USBD_CtlSendData>
 8005b66:	e009      	b.n	8005b7c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f9e7 	bl	8005f3e <USBD_CtlError>
 8005b70:	e004      	b.n	8005b7c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fac1 	bl	80060fa <USBD_CtlSendStatus>
 8005b78:	e000      	b.n	8005b7c <USBD_GetDescriptor+0x2cc>
    return;
 8005b7a:	bf00      	nop
  }
}
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop

08005b84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	889b      	ldrh	r3, [r3, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d131      	bne.n	8005bfa <USBD_SetAddress+0x76>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	88db      	ldrh	r3, [r3, #6]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d12d      	bne.n	8005bfa <USBD_SetAddress+0x76>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	885b      	ldrh	r3, [r3, #2]
 8005ba2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ba4:	d829      	bhi.n	8005bfa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	885b      	ldrh	r3, [r3, #2]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d104      	bne.n	8005bc8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005bbe:	6839      	ldr	r1, [r7, #0]
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f9bc 	bl	8005f3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bc6:	e01d      	b.n	8005c04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	7bfa      	ldrb	r2, [r7, #15]
 8005bcc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fef3 	bl	80069c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fa8d 	bl	80060fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d004      	beq.n	8005bf0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2202      	movs	r2, #2
 8005bea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bee:	e009      	b.n	8005c04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bf8:	e004      	b.n	8005c04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005bfa:	6839      	ldr	r1, [r7, #0]
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f99e 	bl	8005f3e <USBD_CtlError>
  }
}
 8005c02:	bf00      	nop
 8005c04:	bf00      	nop
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	885b      	ldrh	r3, [r3, #2]
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	4b4e      	ldr	r3, [pc, #312]	@ (8005d5c <USBD_SetConfig+0x150>)
 8005c22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005c24:	4b4d      	ldr	r3, [pc, #308]	@ (8005d5c <USBD_SetConfig+0x150>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d905      	bls.n	8005c38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f985 	bl	8005f3e <USBD_CtlError>
    return USBD_FAIL;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e08c      	b.n	8005d52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d002      	beq.n	8005c4a <USBD_SetConfig+0x3e>
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d029      	beq.n	8005c9c <USBD_SetConfig+0x90>
 8005c48:	e075      	b.n	8005d36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005c4a:	4b44      	ldr	r3, [pc, #272]	@ (8005d5c <USBD_SetConfig+0x150>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d020      	beq.n	8005c94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005c52:	4b42      	ldr	r3, [pc, #264]	@ (8005d5c <USBD_SetConfig+0x150>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8005d5c <USBD_SetConfig+0x150>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	4619      	mov	r1, r3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fe ffcd 	bl	8004c02 <USBD_SetClassConfig>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d008      	beq.n	8005c84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f962 	bl	8005f3e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005c82:	e065      	b.n	8005d50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fa38 	bl	80060fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2203      	movs	r2, #3
 8005c8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005c92:	e05d      	b.n	8005d50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fa30 	bl	80060fa <USBD_CtlSendStatus>
      break;
 8005c9a:	e059      	b.n	8005d50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8005d5c <USBD_SetConfig+0x150>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d112      	bne.n	8005cca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005cac:	4b2b      	ldr	r3, [pc, #172]	@ (8005d5c <USBD_SetConfig+0x150>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005cb6:	4b29      	ldr	r3, [pc, #164]	@ (8005d5c <USBD_SetConfig+0x150>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	4619      	mov	r1, r3
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7fe ffbc 	bl	8004c3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fa19 	bl	80060fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005cc8:	e042      	b.n	8005d50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005cca:	4b24      	ldr	r3, [pc, #144]	@ (8005d5c <USBD_SetConfig+0x150>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d02a      	beq.n	8005d2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7fe ffaa 	bl	8004c3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8005d5c <USBD_SetConfig+0x150>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d5c <USBD_SetConfig+0x150>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fe ff83 	bl	8004c02 <USBD_SetClassConfig>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00f      	beq.n	8005d26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f918 	bl	8005f3e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fe ff8f 	bl	8004c3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005d24:	e014      	b.n	8005d50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f9e7 	bl	80060fa <USBD_CtlSendStatus>
      break;
 8005d2c:	e010      	b.n	8005d50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f9e3 	bl	80060fa <USBD_CtlSendStatus>
      break;
 8005d34:	e00c      	b.n	8005d50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f900 	bl	8005f3e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005d3e:	4b07      	ldr	r3, [pc, #28]	@ (8005d5c <USBD_SetConfig+0x150>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	4619      	mov	r1, r3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7fe ff78 	bl	8004c3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4e:	bf00      	nop
  }

  return ret;
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	2000011c 	.word	0x2000011c

08005d60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	88db      	ldrh	r3, [r3, #6]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d004      	beq.n	8005d7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005d72:	6839      	ldr	r1, [r7, #0]
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f8e2 	bl	8005f3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005d7a:	e023      	b.n	8005dc4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	dc02      	bgt.n	8005d8e <USBD_GetConfig+0x2e>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	dc03      	bgt.n	8005d94 <USBD_GetConfig+0x34>
 8005d8c:	e015      	b.n	8005dba <USBD_GetConfig+0x5a>
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d00b      	beq.n	8005daa <USBD_GetConfig+0x4a>
 8005d92:	e012      	b.n	8005dba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	2201      	movs	r2, #1
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f948 	bl	8006038 <USBD_CtlSendData>
        break;
 8005da8:	e00c      	b.n	8005dc4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3304      	adds	r3, #4
 8005dae:	2201      	movs	r2, #1
 8005db0:	4619      	mov	r1, r3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f940 	bl	8006038 <USBD_CtlSendData>
        break;
 8005db8:	e004      	b.n	8005dc4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f8be 	bl	8005f3e <USBD_CtlError>
        break;
 8005dc2:	bf00      	nop
}
 8005dc4:	bf00      	nop
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	3b01      	subs	r3, #1
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d81e      	bhi.n	8005e22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	88db      	ldrh	r3, [r3, #6]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d004      	beq.n	8005df6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f8a5 	bl	8005f3e <USBD_CtlError>
        break;
 8005df4:	e01a      	b.n	8005e2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f043 0202 	orr.w	r2, r3, #2
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	330c      	adds	r3, #12
 8005e16:	2202      	movs	r2, #2
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f90c 	bl	8006038 <USBD_CtlSendData>
      break;
 8005e20:	e004      	b.n	8005e2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f88a 	bl	8005f3e <USBD_CtlError>
      break;
 8005e2a:	bf00      	nop
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	885b      	ldrh	r3, [r3, #2]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d107      	bne.n	8005e56 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f953 	bl	80060fa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005e54:	e013      	b.n	8005e7e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	885b      	ldrh	r3, [r3, #2]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d10b      	bne.n	8005e76 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	889b      	ldrh	r3, [r3, #4]
 8005e62:	0a1b      	lsrs	r3, r3, #8
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f943 	bl	80060fa <USBD_CtlSendStatus>
}
 8005e74:	e003      	b.n	8005e7e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f860 	bl	8005f3e <USBD_CtlError>
}
 8005e7e:	bf00      	nop
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b082      	sub	sp, #8
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d80b      	bhi.n	8005eb6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	885b      	ldrh	r3, [r3, #2]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d10c      	bne.n	8005ec0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f923 	bl	80060fa <USBD_CtlSendStatus>
      }
      break;
 8005eb4:	e004      	b.n	8005ec0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f840 	bl	8005f3e <USBD_CtlError>
      break;
 8005ebe:	e000      	b.n	8005ec2 <USBD_ClrFeature+0x3c>
      break;
 8005ec0:	bf00      	nop
  }
}
 8005ec2:	bf00      	nop
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	781a      	ldrb	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	781a      	ldrb	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f7ff fa3d 	bl	8005374 <SWAPBYTE>
 8005efa:	4603      	mov	r3, r0
 8005efc:	461a      	mov	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3301      	adds	r3, #1
 8005f06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f7ff fa30 	bl	8005374 <SWAPBYTE>
 8005f14:	4603      	mov	r3, r0
 8005f16:	461a      	mov	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3301      	adds	r3, #1
 8005f26:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f7ff fa23 	bl	8005374 <SWAPBYTE>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	461a      	mov	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	80da      	strh	r2, [r3, #6]
}
 8005f36:	bf00      	nop
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f48:	2180      	movs	r1, #128	@ 0x80
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fcce 	bl	80068ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005f50:	2100      	movs	r1, #0
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fcca 	bl	80068ec <USBD_LL_StallEP>
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d042      	beq.n	8005ffc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005f7a:	6938      	ldr	r0, [r7, #16]
 8005f7c:	f000 f842 	bl	8006004 <USBD_GetLen>
 8005f80:	4603      	mov	r3, r0
 8005f82:	3301      	adds	r3, #1
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f8a:	d808      	bhi.n	8005f9e <USBD_GetString+0x3e>
 8005f8c:	6938      	ldr	r0, [r7, #16]
 8005f8e:	f000 f839 	bl	8006004 <USBD_GetLen>
 8005f92:	4603      	mov	r3, r0
 8005f94:	3301      	adds	r3, #1
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	e001      	b.n	8005fa2 <USBD_GetString+0x42>
 8005f9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	4413      	add	r3, r2
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	7812      	ldrb	r2, [r2, #0]
 8005fb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005fb8:	7dfb      	ldrb	r3, [r7, #23]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	2203      	movs	r2, #3
 8005fc0:	701a      	strb	r2, [r3, #0]
  idx++;
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005fc8:	e013      	b.n	8005ff2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	4413      	add	r3, r2
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	7812      	ldrb	r2, [r2, #0]
 8005fd4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	613b      	str	r3, [r7, #16]
    idx++;
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	2200      	movs	r2, #0
 8005fea:	701a      	strb	r2, [r3, #0]
    idx++;
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e7      	bne.n	8005fca <USBD_GetString+0x6a>
 8005ffa:	e000      	b.n	8005ffe <USBD_GetString+0x9e>
    return;
 8005ffc:	bf00      	nop
  }
}
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006014:	e005      	b.n	8006022 <USBD_GetLen+0x1e>
  {
    len++;
 8006016:	7bfb      	ldrb	r3, [r7, #15]
 8006018:	3301      	adds	r3, #1
 800601a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	3301      	adds	r3, #1
 8006020:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1f5      	bne.n	8006016 <USBD_GetLen+0x12>
  }

  return len;
 800602a:	7bfb      	ldrb	r3, [r7, #15]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2202      	movs	r2, #2
 8006048:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	2100      	movs	r1, #0
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 fcca 	bl	80069fe <USBD_LL_Transmit>

  return USBD_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	2100      	movs	r1, #0
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 fcb9 	bl	80069fe <USBD_LL_Transmit>

  return USBD_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2203      	movs	r2, #3
 80060a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	2100      	movs	r1, #0
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 fcb9 	bl	8006a40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	2100      	movs	r1, #0
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 fca8 	bl	8006a40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b082      	sub	sp, #8
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2204      	movs	r2, #4
 8006106:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800610a:	2300      	movs	r3, #0
 800610c:	2200      	movs	r2, #0
 800610e:	2100      	movs	r1, #0
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fc74 	bl	80069fe <USBD_LL_Transmit>

  return USBD_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2205      	movs	r2, #5
 800612c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006130:	2300      	movs	r3, #0
 8006132:	2200      	movs	r2, #0
 8006134:	2100      	movs	r1, #0
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fc82 	bl	8006a40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800614c:	2200      	movs	r2, #0
 800614e:	4912      	ldr	r1, [pc, #72]	@ (8006198 <MX_USB_DEVICE_Init+0x50>)
 8006150:	4812      	ldr	r0, [pc, #72]	@ (800619c <MX_USB_DEVICE_Init+0x54>)
 8006152:	f7fe fcd9 	bl	8004b08 <USBD_Init>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800615c:	f7fa fa8a 	bl	8000674 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006160:	490f      	ldr	r1, [pc, #60]	@ (80061a0 <MX_USB_DEVICE_Init+0x58>)
 8006162:	480e      	ldr	r0, [pc, #56]	@ (800619c <MX_USB_DEVICE_Init+0x54>)
 8006164:	f7fe fd00 	bl	8004b68 <USBD_RegisterClass>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800616e:	f7fa fa81 	bl	8000674 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006172:	490c      	ldr	r1, [pc, #48]	@ (80061a4 <MX_USB_DEVICE_Init+0x5c>)
 8006174:	4809      	ldr	r0, [pc, #36]	@ (800619c <MX_USB_DEVICE_Init+0x54>)
 8006176:	f7fe fc37 	bl	80049e8 <USBD_CDC_RegisterInterface>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006180:	f7fa fa78 	bl	8000674 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006184:	4805      	ldr	r0, [pc, #20]	@ (800619c <MX_USB_DEVICE_Init+0x54>)
 8006186:	f7fe fd25 	bl	8004bd4 <USBD_Start>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006190:	f7fa fa70 	bl	8000674 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006194:	bf00      	nop
 8006196:	bd80      	pop	{r7, pc}
 8006198:	200000ac 	.word	0x200000ac
 800619c:	20000120 	.word	0x20000120
 80061a0:	20000018 	.word	0x20000018
 80061a4:	20000098 	.word	0x20000098

080061a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80061ac:	2200      	movs	r2, #0
 80061ae:	4905      	ldr	r1, [pc, #20]	@ (80061c4 <CDC_Init_FS+0x1c>)
 80061b0:	4805      	ldr	r0, [pc, #20]	@ (80061c8 <CDC_Init_FS+0x20>)
 80061b2:	f7fe fc33 	bl	8004a1c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80061b6:	4905      	ldr	r1, [pc, #20]	@ (80061cc <CDC_Init_FS+0x24>)
 80061b8:	4803      	ldr	r0, [pc, #12]	@ (80061c8 <CDC_Init_FS+0x20>)
 80061ba:	f7fe fc51 	bl	8004a60 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80061be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20000bfc 	.word	0x20000bfc
 80061c8:	20000120 	.word	0x20000120
 80061cc:	200003fc 	.word	0x200003fc

080061d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80061d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	6039      	str	r1, [r7, #0]
 80061ea:	71fb      	strb	r3, [r7, #7]
 80061ec:	4613      	mov	r3, r2
 80061ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80061f0:	79fb      	ldrb	r3, [r7, #7]
 80061f2:	2b23      	cmp	r3, #35	@ 0x23
 80061f4:	d84a      	bhi.n	800628c <CDC_Control_FS+0xac>
 80061f6:	a201      	add	r2, pc, #4	@ (adr r2, 80061fc <CDC_Control_FS+0x1c>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	0800628d 	.word	0x0800628d
 8006200:	0800628d 	.word	0x0800628d
 8006204:	0800628d 	.word	0x0800628d
 8006208:	0800628d 	.word	0x0800628d
 800620c:	0800628d 	.word	0x0800628d
 8006210:	0800628d 	.word	0x0800628d
 8006214:	0800628d 	.word	0x0800628d
 8006218:	0800628d 	.word	0x0800628d
 800621c:	0800628d 	.word	0x0800628d
 8006220:	0800628d 	.word	0x0800628d
 8006224:	0800628d 	.word	0x0800628d
 8006228:	0800628d 	.word	0x0800628d
 800622c:	0800628d 	.word	0x0800628d
 8006230:	0800628d 	.word	0x0800628d
 8006234:	0800628d 	.word	0x0800628d
 8006238:	0800628d 	.word	0x0800628d
 800623c:	0800628d 	.word	0x0800628d
 8006240:	0800628d 	.word	0x0800628d
 8006244:	0800628d 	.word	0x0800628d
 8006248:	0800628d 	.word	0x0800628d
 800624c:	0800628d 	.word	0x0800628d
 8006250:	0800628d 	.word	0x0800628d
 8006254:	0800628d 	.word	0x0800628d
 8006258:	0800628d 	.word	0x0800628d
 800625c:	0800628d 	.word	0x0800628d
 8006260:	0800628d 	.word	0x0800628d
 8006264:	0800628d 	.word	0x0800628d
 8006268:	0800628d 	.word	0x0800628d
 800626c:	0800628d 	.word	0x0800628d
 8006270:	0800628d 	.word	0x0800628d
 8006274:	0800628d 	.word	0x0800628d
 8006278:	0800628d 	.word	0x0800628d
 800627c:	0800628d 	.word	0x0800628d
 8006280:	0800628d 	.word	0x0800628d
 8006284:	0800628d 	.word	0x0800628d
 8006288:	0800628d 	.word	0x0800628d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800628c:	bf00      	nop
  }

  return (USBD_OK);
 800628e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006290:	4618      	mov	r0, r3
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4805      	ldr	r0, [pc, #20]	@ (80062c0 <CDC_Receive_FS+0x24>)
 80062aa:	f7fe fbd9 	bl	8004a60 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80062ae:	4804      	ldr	r0, [pc, #16]	@ (80062c0 <CDC_Receive_FS+0x24>)
 80062b0:	f7fe fbf4 	bl	8004a9c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80062b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000120 	.word	0x20000120

080062c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	4613      	mov	r3, r2
 80062d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80062d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
	...

080062e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	6039      	str	r1, [r7, #0]
 80062f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2212      	movs	r2, #18
 80062f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80062fa:	4b03      	ldr	r3, [pc, #12]	@ (8006308 <USBD_FS_DeviceDescriptor+0x20>)
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	200000c8 	.word	0x200000c8

0800630c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	4603      	mov	r3, r0
 8006314:	6039      	str	r1, [r7, #0]
 8006316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2204      	movs	r2, #4
 800631c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800631e:	4b03      	ldr	r3, [pc, #12]	@ (800632c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006320:	4618      	mov	r0, r3
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	200000dc 	.word	0x200000dc

08006330 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	4603      	mov	r3, r0
 8006338:	6039      	str	r1, [r7, #0]
 800633a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800633c:	79fb      	ldrb	r3, [r7, #7]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d105      	bne.n	800634e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	4907      	ldr	r1, [pc, #28]	@ (8006364 <USBD_FS_ProductStrDescriptor+0x34>)
 8006346:	4808      	ldr	r0, [pc, #32]	@ (8006368 <USBD_FS_ProductStrDescriptor+0x38>)
 8006348:	f7ff fe0a 	bl	8005f60 <USBD_GetString>
 800634c:	e004      	b.n	8006358 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	4904      	ldr	r1, [pc, #16]	@ (8006364 <USBD_FS_ProductStrDescriptor+0x34>)
 8006352:	4805      	ldr	r0, [pc, #20]	@ (8006368 <USBD_FS_ProductStrDescriptor+0x38>)
 8006354:	f7ff fe04 	bl	8005f60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006358:	4b02      	ldr	r3, [pc, #8]	@ (8006364 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	200013fc 	.word	0x200013fc
 8006368:	08006ba0 	.word	0x08006ba0

0800636c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	4603      	mov	r3, r0
 8006374:	6039      	str	r1, [r7, #0]
 8006376:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	4904      	ldr	r1, [pc, #16]	@ (800638c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800637c:	4804      	ldr	r0, [pc, #16]	@ (8006390 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800637e:	f7ff fdef 	bl	8005f60 <USBD_GetString>
  return USBD_StrDesc;
 8006382:	4b02      	ldr	r3, [pc, #8]	@ (800638c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	200013fc 	.word	0x200013fc
 8006390:	08006bb8 	.word	0x08006bb8

08006394 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	6039      	str	r1, [r7, #0]
 800639e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	221a      	movs	r2, #26
 80063a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80063a6:	f000 f843 	bl	8006430 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80063aa:	4b02      	ldr	r3, [pc, #8]	@ (80063b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	200000e0 	.word	0x200000e0

080063b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	4603      	mov	r3, r0
 80063c0:	6039      	str	r1, [r7, #0]
 80063c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d105      	bne.n	80063d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	4907      	ldr	r1, [pc, #28]	@ (80063ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80063ce:	4808      	ldr	r0, [pc, #32]	@ (80063f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80063d0:	f7ff fdc6 	bl	8005f60 <USBD_GetString>
 80063d4:	e004      	b.n	80063e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	4904      	ldr	r1, [pc, #16]	@ (80063ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80063da:	4805      	ldr	r0, [pc, #20]	@ (80063f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80063dc:	f7ff fdc0 	bl	8005f60 <USBD_GetString>
  }
  return USBD_StrDesc;
 80063e0:	4b02      	ldr	r3, [pc, #8]	@ (80063ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	200013fc 	.word	0x200013fc
 80063f0:	08006bcc 	.word	0x08006bcc

080063f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	4603      	mov	r3, r0
 80063fc:	6039      	str	r1, [r7, #0]
 80063fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d105      	bne.n	8006412 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	4907      	ldr	r1, [pc, #28]	@ (8006428 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800640a:	4808      	ldr	r0, [pc, #32]	@ (800642c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800640c:	f7ff fda8 	bl	8005f60 <USBD_GetString>
 8006410:	e004      	b.n	800641c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	4904      	ldr	r1, [pc, #16]	@ (8006428 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006416:	4805      	ldr	r0, [pc, #20]	@ (800642c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006418:	f7ff fda2 	bl	8005f60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800641c:	4b02      	ldr	r3, [pc, #8]	@ (8006428 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	200013fc 	.word	0x200013fc
 800642c:	08006bd8 	.word	0x08006bd8

08006430 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006436:	4b0f      	ldr	r3, [pc, #60]	@ (8006474 <Get_SerialNum+0x44>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800643c:	4b0e      	ldr	r3, [pc, #56]	@ (8006478 <Get_SerialNum+0x48>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006442:	4b0e      	ldr	r3, [pc, #56]	@ (800647c <Get_SerialNum+0x4c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4413      	add	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d009      	beq.n	800646a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006456:	2208      	movs	r2, #8
 8006458:	4909      	ldr	r1, [pc, #36]	@ (8006480 <Get_SerialNum+0x50>)
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 f814 	bl	8006488 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006460:	2204      	movs	r2, #4
 8006462:	4908      	ldr	r1, [pc, #32]	@ (8006484 <Get_SerialNum+0x54>)
 8006464:	68b8      	ldr	r0, [r7, #8]
 8006466:	f000 f80f 	bl	8006488 <IntToUnicode>
  }
}
 800646a:	bf00      	nop
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	1fff7a10 	.word	0x1fff7a10
 8006478:	1fff7a14 	.word	0x1fff7a14
 800647c:	1fff7a18 	.word	0x1fff7a18
 8006480:	200000e2 	.word	0x200000e2
 8006484:	200000f2 	.word	0x200000f2

08006488 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	4613      	mov	r3, r2
 8006494:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006496:	2300      	movs	r3, #0
 8006498:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800649a:	2300      	movs	r3, #0
 800649c:	75fb      	strb	r3, [r7, #23]
 800649e:	e027      	b.n	80064f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	0f1b      	lsrs	r3, r3, #28
 80064a4:	2b09      	cmp	r3, #9
 80064a6:	d80b      	bhi.n	80064c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	0f1b      	lsrs	r3, r3, #28
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	4619      	mov	r1, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	440b      	add	r3, r1
 80064b8:	3230      	adds	r2, #48	@ 0x30
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	e00a      	b.n	80064d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	0f1b      	lsrs	r3, r3, #28
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	7dfb      	ldrb	r3, [r7, #23]
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	4619      	mov	r1, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	440b      	add	r3, r1
 80064d0:	3237      	adds	r2, #55	@ 0x37
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	3301      	adds	r3, #1
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	4413      	add	r3, r2
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
 80064ec:	3301      	adds	r3, #1
 80064ee:	75fb      	strb	r3, [r7, #23]
 80064f0:	7dfa      	ldrb	r2, [r7, #23]
 80064f2:	79fb      	ldrb	r3, [r7, #7]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d3d3      	bcc.n	80064a0 <IntToUnicode+0x18>
  }
}
 80064f8:	bf00      	nop
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08a      	sub	sp, #40	@ 0x28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006510:	f107 0314 	add.w	r3, r7, #20
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	605a      	str	r2, [r3, #4]
 800651a:	609a      	str	r2, [r3, #8]
 800651c:	60da      	str	r2, [r3, #12]
 800651e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006528:	d13a      	bne.n	80065a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800652a:	2300      	movs	r3, #0
 800652c:	613b      	str	r3, [r7, #16]
 800652e:	4b1e      	ldr	r3, [pc, #120]	@ (80065a8 <HAL_PCD_MspInit+0xa0>)
 8006530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006532:	4a1d      	ldr	r2, [pc, #116]	@ (80065a8 <HAL_PCD_MspInit+0xa0>)
 8006534:	f043 0301 	orr.w	r3, r3, #1
 8006538:	6313      	str	r3, [r2, #48]	@ 0x30
 800653a:	4b1b      	ldr	r3, [pc, #108]	@ (80065a8 <HAL_PCD_MspInit+0xa0>)
 800653c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006546:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800654a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800654c:	2302      	movs	r3, #2
 800654e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006550:	2300      	movs	r3, #0
 8006552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006554:	2303      	movs	r3, #3
 8006556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006558:	230a      	movs	r3, #10
 800655a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800655c:	f107 0314 	add.w	r3, r7, #20
 8006560:	4619      	mov	r1, r3
 8006562:	4812      	ldr	r0, [pc, #72]	@ (80065ac <HAL_PCD_MspInit+0xa4>)
 8006564:	f7fa fad2 	bl	8000b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006568:	4b0f      	ldr	r3, [pc, #60]	@ (80065a8 <HAL_PCD_MspInit+0xa0>)
 800656a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800656c:	4a0e      	ldr	r2, [pc, #56]	@ (80065a8 <HAL_PCD_MspInit+0xa0>)
 800656e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006572:	6353      	str	r3, [r2, #52]	@ 0x34
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <HAL_PCD_MspInit+0xa0>)
 800657a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800657c:	4a0a      	ldr	r2, [pc, #40]	@ (80065a8 <HAL_PCD_MspInit+0xa0>)
 800657e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006582:	6453      	str	r3, [r2, #68]	@ 0x44
 8006584:	4b08      	ldr	r3, [pc, #32]	@ (80065a8 <HAL_PCD_MspInit+0xa0>)
 8006586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006588:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006590:	2200      	movs	r2, #0
 8006592:	2100      	movs	r1, #0
 8006594:	2043      	movs	r0, #67	@ 0x43
 8006596:	f7fa fa82 	bl	8000a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800659a:	2043      	movs	r0, #67	@ 0x43
 800659c:	f7fa fa9b 	bl	8000ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80065a0:	bf00      	nop
 80065a2:	3728      	adds	r7, #40	@ 0x28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40023800 	.word	0x40023800
 80065ac:	40020000 	.word	0x40020000

080065b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065c4:	4619      	mov	r1, r3
 80065c6:	4610      	mov	r0, r2
 80065c8:	f7fe fb51 	bl	8004c6e <USBD_LL_SetupStage>
}
 80065cc:	bf00      	nop
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80065e6:	78fa      	ldrb	r2, [r7, #3]
 80065e8:	6879      	ldr	r1, [r7, #4]
 80065ea:	4613      	mov	r3, r2
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	4413      	add	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	440b      	add	r3, r1
 80065f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	4619      	mov	r1, r3
 80065fe:	f7fe fb8b 	bl	8004d18 <USBD_LL_DataOutStage>
}
 8006602:	bf00      	nop
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	460b      	mov	r3, r1
 8006614:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800661c:	78fa      	ldrb	r2, [r7, #3]
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	4613      	mov	r3, r2
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	4413      	add	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	3320      	adds	r3, #32
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	78fb      	ldrb	r3, [r7, #3]
 8006630:	4619      	mov	r1, r3
 8006632:	f7fe fc2d 	bl	8004e90 <USBD_LL_DataInStage>
}
 8006636:	bf00      	nop
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b082      	sub	sp, #8
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800664c:	4618      	mov	r0, r3
 800664e:	f7fe fd71 	bl	8005134 <USBD_LL_SOF>
}
 8006652:	bf00      	nop
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006662:	2301      	movs	r3, #1
 8006664:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	79db      	ldrb	r3, [r3, #7]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d102      	bne.n	8006674 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]
 8006672:	e008      	b.n	8006686 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	79db      	ldrb	r3, [r3, #7]
 8006678:	2b02      	cmp	r3, #2
 800667a:	d102      	bne.n	8006682 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800667c:	2301      	movs	r3, #1
 800667e:	73fb      	strb	r3, [r7, #15]
 8006680:	e001      	b.n	8006686 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006682:	f7f9 fff7 	bl	8000674 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800668c:	7bfa      	ldrb	r2, [r7, #15]
 800668e:	4611      	mov	r1, r2
 8006690:	4618      	mov	r0, r3
 8006692:	f7fe fd0b 	bl	80050ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800669c:	4618      	mov	r0, r3
 800669e:	f7fe fcb2 	bl	8005006 <USBD_LL_Reset>
}
 80066a2:	bf00      	nop
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fe fd06 	bl	80050cc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	6812      	ldr	r2, [r2, #0]
 80066ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80066d2:	f043 0301 	orr.w	r3, r3, #1
 80066d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	7adb      	ldrb	r3, [r3, #11]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d005      	beq.n	80066ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80066e0:	4b04      	ldr	r3, [pc, #16]	@ (80066f4 <HAL_PCD_SuspendCallback+0x48>)
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	4a03      	ldr	r2, [pc, #12]	@ (80066f4 <HAL_PCD_SuspendCallback+0x48>)
 80066e6:	f043 0306 	orr.w	r3, r3, #6
 80066ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80066ec:	bf00      	nop
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	e000ed00 	.word	0xe000ed00

080066f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006706:	4618      	mov	r0, r3
 8006708:	f7fe fcfc 	bl	8005104 <USBD_LL_Resume>
}
 800670c:	bf00      	nop
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006726:	78fa      	ldrb	r2, [r7, #3]
 8006728:	4611      	mov	r1, r2
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fd54 	bl	80051d8 <USBD_LL_IsoOUTIncomplete>
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800674a:	78fa      	ldrb	r2, [r7, #3]
 800674c:	4611      	mov	r1, r2
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe fd10 	bl	8005174 <USBD_LL_IsoINIncomplete>
}
 8006754:	bf00      	nop
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe fd66 	bl	800523c <USBD_LL_DevConnected>
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fd63 	bl	8005252 <USBD_LL_DevDisconnected>
}
 800678c:	bf00      	nop
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d13c      	bne.n	800681e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80067a4:	4a20      	ldr	r2, [pc, #128]	@ (8006828 <USBD_LL_Init+0x94>)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006828 <USBD_LL_Init+0x94>)
 80067b0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80067b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006828 <USBD_LL_Init+0x94>)
 80067b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80067ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80067bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006828 <USBD_LL_Init+0x94>)
 80067be:	2204      	movs	r2, #4
 80067c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80067c2:	4b19      	ldr	r3, [pc, #100]	@ (8006828 <USBD_LL_Init+0x94>)
 80067c4:	2202      	movs	r2, #2
 80067c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80067c8:	4b17      	ldr	r3, [pc, #92]	@ (8006828 <USBD_LL_Init+0x94>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80067ce:	4b16      	ldr	r3, [pc, #88]	@ (8006828 <USBD_LL_Init+0x94>)
 80067d0:	2202      	movs	r2, #2
 80067d2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80067d4:	4b14      	ldr	r3, [pc, #80]	@ (8006828 <USBD_LL_Init+0x94>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80067da:	4b13      	ldr	r3, [pc, #76]	@ (8006828 <USBD_LL_Init+0x94>)
 80067dc:	2200      	movs	r2, #0
 80067de:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80067e0:	4b11      	ldr	r3, [pc, #68]	@ (8006828 <USBD_LL_Init+0x94>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80067e6:	4b10      	ldr	r3, [pc, #64]	@ (8006828 <USBD_LL_Init+0x94>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80067ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006828 <USBD_LL_Init+0x94>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80067f2:	480d      	ldr	r0, [pc, #52]	@ (8006828 <USBD_LL_Init+0x94>)
 80067f4:	f7fa fb27 	bl	8000e46 <HAL_PCD_Init>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80067fe:	f7f9 ff39 	bl	8000674 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006802:	2180      	movs	r1, #128	@ 0x80
 8006804:	4808      	ldr	r0, [pc, #32]	@ (8006828 <USBD_LL_Init+0x94>)
 8006806:	f7fb fd54 	bl	80022b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800680a:	2240      	movs	r2, #64	@ 0x40
 800680c:	2100      	movs	r1, #0
 800680e:	4806      	ldr	r0, [pc, #24]	@ (8006828 <USBD_LL_Init+0x94>)
 8006810:	f7fb fd08 	bl	8002224 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006814:	2280      	movs	r2, #128	@ 0x80
 8006816:	2101      	movs	r1, #1
 8006818:	4803      	ldr	r0, [pc, #12]	@ (8006828 <USBD_LL_Init+0x94>)
 800681a:	f7fb fd03 	bl	8002224 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	200015fc 	.word	0x200015fc

0800682c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006842:	4618      	mov	r0, r3
 8006844:	f7fa fc0e 	bl	8001064 <HAL_PCD_Start>
 8006848:	4603      	mov	r3, r0
 800684a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	4618      	mov	r0, r3
 8006850:	f000 f942 	bl	8006ad8 <USBD_Get_USB_Status>
 8006854:	4603      	mov	r3, r0
 8006856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006858:	7bbb      	ldrb	r3, [r7, #14]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	4608      	mov	r0, r1
 800686c:	4611      	mov	r1, r2
 800686e:	461a      	mov	r2, r3
 8006870:	4603      	mov	r3, r0
 8006872:	70fb      	strb	r3, [r7, #3]
 8006874:	460b      	mov	r3, r1
 8006876:	70bb      	strb	r3, [r7, #2]
 8006878:	4613      	mov	r3, r2
 800687a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800688a:	78bb      	ldrb	r3, [r7, #2]
 800688c:	883a      	ldrh	r2, [r7, #0]
 800688e:	78f9      	ldrb	r1, [r7, #3]
 8006890:	f7fb f8e2 	bl	8001a58 <HAL_PCD_EP_Open>
 8006894:	4603      	mov	r3, r0
 8006896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	4618      	mov	r0, r3
 800689c:	f000 f91c 	bl	8006ad8 <USBD_Get_USB_Status>
 80068a0:	4603      	mov	r3, r0
 80068a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	460b      	mov	r3, r1
 80068b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80068c8:	78fa      	ldrb	r2, [r7, #3]
 80068ca:	4611      	mov	r1, r2
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fb f92d 	bl	8001b2c <HAL_PCD_EP_Close>
 80068d2:	4603      	mov	r3, r0
 80068d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 f8fd 	bl	8006ad8 <USBD_Get_USB_Status>
 80068de:	4603      	mov	r3, r0
 80068e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006906:	78fa      	ldrb	r2, [r7, #3]
 8006908:	4611      	mov	r1, r2
 800690a:	4618      	mov	r0, r3
 800690c:	f7fb f9e5 	bl	8001cda <HAL_PCD_EP_SetStall>
 8006910:	4603      	mov	r3, r0
 8006912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006914:	7bfb      	ldrb	r3, [r7, #15]
 8006916:	4618      	mov	r0, r3
 8006918:	f000 f8de 	bl	8006ad8 <USBD_Get_USB_Status>
 800691c:	4603      	mov	r3, r0
 800691e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006920:	7bbb      	ldrb	r3, [r7, #14]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	460b      	mov	r3, r1
 8006934:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006944:	78fa      	ldrb	r2, [r7, #3]
 8006946:	4611      	mov	r1, r2
 8006948:	4618      	mov	r0, r3
 800694a:	f7fb fa29 	bl	8001da0 <HAL_PCD_EP_ClrStall>
 800694e:	4603      	mov	r3, r0
 8006950:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006952:	7bfb      	ldrb	r3, [r7, #15]
 8006954:	4618      	mov	r0, r3
 8006956:	f000 f8bf 	bl	8006ad8 <USBD_Get_USB_Status>
 800695a:	4603      	mov	r3, r0
 800695c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800695e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800697a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800697c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006980:	2b00      	cmp	r3, #0
 8006982:	da0b      	bge.n	800699c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800698a:	68f9      	ldr	r1, [r7, #12]
 800698c:	4613      	mov	r3, r2
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	4413      	add	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	440b      	add	r3, r1
 8006996:	3316      	adds	r3, #22
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	e00b      	b.n	80069b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069a2:	68f9      	ldr	r1, [r7, #12]
 80069a4:	4613      	mov	r3, r2
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	4413      	add	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80069b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80069da:	78fa      	ldrb	r2, [r7, #3]
 80069dc:	4611      	mov	r1, r2
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fb f816 	bl	8001a10 <HAL_PCD_SetAddress>
 80069e4:	4603      	mov	r3, r0
 80069e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 f874 	bl	8006ad8 <USBD_Get_USB_Status>
 80069f0:	4603      	mov	r3, r0
 80069f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b086      	sub	sp, #24
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	603b      	str	r3, [r7, #0]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006a1c:	7af9      	ldrb	r1, [r7, #11]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	f7fb f920 	bl	8001c66 <HAL_PCD_EP_Transmit>
 8006a26:	4603      	mov	r3, r0
 8006a28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 f853 	bl	8006ad8 <USBD_Get_USB_Status>
 8006a32:	4603      	mov	r3, r0
 8006a34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006a36:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	607a      	str	r2, [r7, #4]
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006a5e:	7af9      	ldrb	r1, [r7, #11]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	f7fb f8ac 	bl	8001bc0 <HAL_PCD_EP_Receive>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a6c:	7dfb      	ldrb	r3, [r7, #23]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 f832 	bl	8006ad8 <USBD_Get_USB_Status>
 8006a74:	4603      	mov	r3, r0
 8006a76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006a78:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a94:	78fa      	ldrb	r2, [r7, #3]
 8006a96:	4611      	mov	r1, r2
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fb f8cc 	bl	8001c36 <HAL_PCD_EP_GetRxCount>
 8006a9e:	4603      	mov	r3, r0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006ab0:	4b03      	ldr	r3, [pc, #12]	@ (8006ac0 <USBD_static_malloc+0x18>)
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	20001ae0 	.word	0x20001ae0

08006ac4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]

}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	4603      	mov	r3, r0
 8006ae0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006ae6:	79fb      	ldrb	r3, [r7, #7]
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d817      	bhi.n	8006b1c <USBD_Get_USB_Status+0x44>
 8006aec:	a201      	add	r2, pc, #4	@ (adr r2, 8006af4 <USBD_Get_USB_Status+0x1c>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b05 	.word	0x08006b05
 8006af8:	08006b0b 	.word	0x08006b0b
 8006afc:	08006b11 	.word	0x08006b11
 8006b00:	08006b17 	.word	0x08006b17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	73fb      	strb	r3, [r7, #15]
    break;
 8006b08:	e00b      	b.n	8006b22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8006b0e:	e008      	b.n	8006b22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006b10:	2301      	movs	r3, #1
 8006b12:	73fb      	strb	r3, [r7, #15]
    break;
 8006b14:	e005      	b.n	8006b22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006b16:	2303      	movs	r3, #3
 8006b18:	73fb      	strb	r3, [r7, #15]
    break;
 8006b1a:	e002      	b.n	8006b22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8006b20:	bf00      	nop
  }
  return usb_status;
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <memset>:
 8006b30:	4402      	add	r2, r0
 8006b32:	4603      	mov	r3, r0
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d100      	bne.n	8006b3a <memset+0xa>
 8006b38:	4770      	bx	lr
 8006b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b3e:	e7f9      	b.n	8006b34 <memset+0x4>

08006b40 <__libc_init_array>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	4d0d      	ldr	r5, [pc, #52]	@ (8006b78 <__libc_init_array+0x38>)
 8006b44:	4c0d      	ldr	r4, [pc, #52]	@ (8006b7c <__libc_init_array+0x3c>)
 8006b46:	1b64      	subs	r4, r4, r5
 8006b48:	10a4      	asrs	r4, r4, #2
 8006b4a:	2600      	movs	r6, #0
 8006b4c:	42a6      	cmp	r6, r4
 8006b4e:	d109      	bne.n	8006b64 <__libc_init_array+0x24>
 8006b50:	4d0b      	ldr	r5, [pc, #44]	@ (8006b80 <__libc_init_array+0x40>)
 8006b52:	4c0c      	ldr	r4, [pc, #48]	@ (8006b84 <__libc_init_array+0x44>)
 8006b54:	f000 f818 	bl	8006b88 <_init>
 8006b58:	1b64      	subs	r4, r4, r5
 8006b5a:	10a4      	asrs	r4, r4, #2
 8006b5c:	2600      	movs	r6, #0
 8006b5e:	42a6      	cmp	r6, r4
 8006b60:	d105      	bne.n	8006b6e <__libc_init_array+0x2e>
 8006b62:	bd70      	pop	{r4, r5, r6, pc}
 8006b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b68:	4798      	blx	r3
 8006b6a:	3601      	adds	r6, #1
 8006b6c:	e7ee      	b.n	8006b4c <__libc_init_array+0xc>
 8006b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b72:	4798      	blx	r3
 8006b74:	3601      	adds	r6, #1
 8006b76:	e7f2      	b.n	8006b5e <__libc_init_array+0x1e>
 8006b78:	08006c00 	.word	0x08006c00
 8006b7c:	08006c00 	.word	0x08006c00
 8006b80:	08006c00 	.word	0x08006c00
 8006b84:	08006c04 	.word	0x08006c04

08006b88 <_init>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	bf00      	nop
 8006b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8e:	bc08      	pop	{r3}
 8006b90:	469e      	mov	lr, r3
 8006b92:	4770      	bx	lr

08006b94 <_fini>:
 8006b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b96:	bf00      	nop
 8006b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9a:	bc08      	pop	{r3}
 8006b9c:	469e      	mov	lr, r3
 8006b9e:	4770      	bx	lr
